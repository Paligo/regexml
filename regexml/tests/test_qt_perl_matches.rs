// This file is generated by regexml-convert-perl-tests
// Do not edit this file directly (except to auto-format)

use regexml::Regex;

#[test]
fn test_p10() {
    let regex = Regex::xpath(r#"abc"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"abc"#));
}

#[test]
fn test_p11() {
    let regex = Regex::xpath(r#"abc"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"abc"#));
}

#[test]
fn test_p12() {
    let regex = Regex::xpath(r#"abc"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"abc"#));
}

#[test]
fn test_p13() {
    let regex = Regex::xpath(r#"abc"#, "");
    // n
    let regex = regex.unwrap();
    assert!(!regex.is_match(r#"xbc"#));
}

#[test]
fn test_p14() {
    let regex = Regex::xpath(r#"abc"#, "");
    // n
    let regex = regex.unwrap();
    assert!(!regex.is_match(r#"axc"#));
}

#[test]
fn test_p15() {
    let regex = Regex::xpath(r#"abc"#, "");
    // n
    let regex = regex.unwrap();
    assert!(!regex.is_match(r#"abx"#));
}

#[test]
fn test_p16() {
    let regex = Regex::xpath(r#"abc"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"xabcy"#));
}

#[test]
fn test_p17() {
    let regex = Regex::xpath(r#"abc"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"xabcy"#));
}

#[test]
fn test_p18() {
    let regex = Regex::xpath(r#"abc"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"xabcy"#));
}

#[test]
fn test_p19() {
    let regex = Regex::xpath(r#"abc"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"ababc"#));
}

#[test]
fn test_p20() {
    let regex = Regex::xpath(r#"abc"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"ababc"#));
}

#[test]
fn test_p21() {
    let regex = Regex::xpath(r#"abc"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"ababc"#));
}

#[test]
fn test_p22() {
    let regex = Regex::xpath(r#"ab*c"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"abc"#));
}

#[test]
fn test_p23() {
    let regex = Regex::xpath(r#"ab*c"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"abc"#));
}

#[test]
fn test_p24() {
    let regex = Regex::xpath(r#"ab*c"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"abc"#));
}

#[test]
fn test_p25() {
    let regex = Regex::xpath(r#"ab*bc"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"abc"#));
}

#[test]
fn test_p26() {
    let regex = Regex::xpath(r#"ab*bc"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"abc"#));
}

#[test]
fn test_p27() {
    let regex = Regex::xpath(r#"ab*bc"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"abc"#));
}

#[test]
fn test_p28() {
    let regex = Regex::xpath(r#"ab*bc"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"abbc"#));
}

#[test]
fn test_p29() {
    let regex = Regex::xpath(r#"ab*bc"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"abbc"#));
}

#[test]
fn test_p30() {
    let regex = Regex::xpath(r#"ab*bc"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"abbc"#));
}

#[test]
fn test_p31() {
    let regex = Regex::xpath(r#"ab*bc"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"abbbbc"#));
}

#[test]
fn test_p32() {
    let regex = Regex::xpath(r#"ab*bc"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"abbbbc"#));
}

#[test]
fn test_p33() {
    let regex = Regex::xpath(r#"ab*bc"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"abbbbc"#));
}

#[test]
fn test_p34() {
    let regex = Regex::xpath(r#".{1}"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"abbbbc"#));
}

#[test]
fn test_p35() {
    let regex = Regex::xpath(r#".{1}"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"abbbbc"#));
}

#[test]
fn test_p36() {
    let regex = Regex::xpath(r#".{1}"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"abbbbc"#));
}

#[test]
fn test_p37() {
    let regex = Regex::xpath(r#".{3,4}"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"abbbbc"#));
}

#[test]
fn test_p38() {
    let regex = Regex::xpath(r#".{3,4}"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"abbbbc"#));
}

#[test]
fn test_p39() {
    let regex = Regex::xpath(r#".{3,4}"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"abbbbc"#));
}

#[test]
fn test_p40() {
    let regex = Regex::xpath(r#"\N{1}"#, "");
    // p
}

#[test]
fn test_p41() {
    let regex = Regex::xpath(r#"\N{1}"#, "");
    // p
}

#[test]
fn test_p42() {
    let regex = Regex::xpath(r#"\N{1}"#, "");
    // p
}

#[test]
fn test_p43() {
    let regex = Regex::xpath(r#"/\N {1}/x"#, "");
    // p
}

#[test]
fn test_p44() {
    let regex = Regex::xpath(r#"/\N {1}/x"#, "");
    // p
}

#[test]
fn test_p45() {
    let regex = Regex::xpath(r#"/\N {1}/x"#, "");
    // p
}

#[test]
fn test_p46() {
    let regex = Regex::xpath(r#"\N{3,4}"#, "");
    // p
}

#[test]
fn test_p47() {
    let regex = Regex::xpath(r#"\N{3,4}"#, "");
    // p
}

#[test]
fn test_p48() {
    let regex = Regex::xpath(r#"\N{3,4}"#, "");
    // p
}

#[test]
fn test_p49() {
    let regex = Regex::xpath(r#"/\N {3,4}/x"#, "");
    // p
}

#[test]
fn test_p50() {
    let regex = Regex::xpath(r#"/\N {3,4}/x"#, "");
    // p
}

#[test]
fn test_p51() {
    let regex = Regex::xpath(r#"/\N {3,4}/x"#, "");
    // p
}

#[test]
fn test_p52() {
    let regex = Regex::xpath(r#"ab{0,}bc"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"abbbbc"#));
}

#[test]
fn test_p53() {
    let regex = Regex::xpath(r#"ab{0,}bc"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"abbbbc"#));
}

#[test]
fn test_p54() {
    let regex = Regex::xpath(r#"ab{0,}bc"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"abbbbc"#));
}

#[test]
fn test_p55() {
    let regex = Regex::xpath(r#"ab+bc"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"abbc"#));
}

#[test]
fn test_p56() {
    let regex = Regex::xpath(r#"ab+bc"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"abbc"#));
}

#[test]
fn test_p57() {
    let regex = Regex::xpath(r#"ab+bc"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"abbc"#));
}

#[test]
fn test_p58() {
    let regex = Regex::xpath(r#"ab+bc"#, "");
    // n
    let regex = regex.unwrap();
    assert!(!regex.is_match(r#"abc"#));
}

#[test]
fn test_p59() {
    let regex = Regex::xpath(r#"ab+bc"#, "");
    // n
    let regex = regex.unwrap();
    assert!(!regex.is_match(r#"abq"#));
}

#[test]
fn test_p60() {
    let regex = Regex::xpath(r#"ab{1,}bc"#, "");
    // n
    let regex = regex.unwrap();
    assert!(!regex.is_match(r#"abq"#));
}

#[test]
fn test_p61() {
    let regex = Regex::xpath(r#"ab+bc"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"abbbbc"#));
}

#[test]
fn test_p62() {
    let regex = Regex::xpath(r#"ab+bc"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"abbbbc"#));
}

#[test]
fn test_p63() {
    let regex = Regex::xpath(r#"ab+bc"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"abbbbc"#));
}

#[test]
fn test_p64() {
    let regex = Regex::xpath(r#"ab{1,}bc"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"abbbbc"#));
}

#[test]
fn test_p65() {
    let regex = Regex::xpath(r#"ab{1,}bc"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"abbbbc"#));
}

#[test]
fn test_p66() {
    let regex = Regex::xpath(r#"ab{1,}bc"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"abbbbc"#));
}

#[test]
fn test_p67() {
    let regex = Regex::xpath(r#"ab{1,3}bc"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"abbbbc"#));
}

#[test]
fn test_p68() {
    let regex = Regex::xpath(r#"ab{1,3}bc"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"abbbbc"#));
}

#[test]
fn test_p69() {
    let regex = Regex::xpath(r#"ab{1,3}bc"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"abbbbc"#));
}

#[test]
fn test_p70() {
    let regex = Regex::xpath(r#"ab{3,4}bc"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"abbbbc"#));
}

#[test]
fn test_p71() {
    let regex = Regex::xpath(r#"ab{3,4}bc"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"abbbbc"#));
}

#[test]
fn test_p72() {
    let regex = Regex::xpath(r#"ab{3,4}bc"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"abbbbc"#));
}

#[test]
fn test_p73() {
    let regex = Regex::xpath(r#"ab{4,5}bc"#, "");
    // n
    let regex = regex.unwrap();
    assert!(!regex.is_match(r#"abbbbc"#));
}

#[test]
fn test_p74() {
    let regex = Regex::xpath(r#"ab?bc"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"abbc"#));
}

#[test]
fn test_p75() {
    let regex = Regex::xpath(r#"ab?bc"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"abc"#));
}

#[test]
fn test_p76() {
    let regex = Regex::xpath(r#"ab{0,1}bc"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"abc"#));
}

#[test]
fn test_p77() {
    let regex = Regex::xpath(r#"ab?bc"#, "");
    // n
    let regex = regex.unwrap();
    assert!(!regex.is_match(r#"abbbbc"#));
}

#[test]
fn test_p78() {
    let regex = Regex::xpath(r#"ab?c"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"abc"#));
}

#[test]
fn test_p79() {
    let regex = Regex::xpath(r#"ab{0,1}c"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"abc"#));
}

#[test]
fn test_p80() {
    let regex = Regex::xpath(r#"^abc$"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"abc"#));
}

#[test]
fn test_p81() {
    let regex = Regex::xpath(r#"^abc$"#, "");
    // n
    let regex = regex.unwrap();
    assert!(!regex.is_match(r#"abcc"#));
}

#[test]
fn test_p82() {
    let regex = Regex::xpath(r#"^abc"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"abcc"#));
}

#[test]
fn test_p83() {
    let regex = Regex::xpath(r#"^abc$"#, "");
    // n
    let regex = regex.unwrap();
    assert!(!regex.is_match(r#"aabc"#));
}

#[test]
fn test_p84() {
    let regex = Regex::xpath(r#"abc$"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"aabc"#));
}

#[test]
fn test_p85() {
    let regex = Regex::xpath(r#"abc$"#, "");
    // n
    let regex = regex.unwrap();
    assert!(!regex.is_match(r#"aabcd"#));
}

#[test]
fn test_p86() {
    let regex = Regex::xpath(r#"^"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"abc"#));
}

#[test]
fn test_p87() {
    let regex = Regex::xpath(r#"$"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"abc"#));
}

#[test]
fn test_p88() {
    let regex = Regex::xpath(r#"a.c"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"abc"#));
}

#[test]
fn test_p89() {
    let regex = Regex::xpath(r#"a.c"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"axc"#));
}

#[test]
fn test_p90() {
    let regex = Regex::xpath(r#"a\Nc"#, "");
    // p
}

#[test]
fn test_p91() {
    let regex = Regex::xpath(r#"/a\N c/x"#, "");
    // p
}

#[test]
fn test_p92() {
    let regex = Regex::xpath(r#"a.*c"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"axyzc"#));
}

#[test]
fn test_p93() {
    let regex = Regex::xpath(r#"a\N*c"#, "");
    // p
}

#[test]
fn test_p94() {
    let regex = Regex::xpath(r#"/a\N *c/x"#, "");
    // p
}

#[test]
fn test_p95() {
    let regex = Regex::xpath(r#"a.*c"#, "");
    // n
    let regex = regex.unwrap();
    assert!(!regex.is_match(r#"axyzd"#));
}

#[test]
fn test_p96() {
    let regex = Regex::xpath(r#"a\N*c"#, "");
    // p
}

#[test]
fn test_p97() {
    let regex = Regex::xpath(r#"/a\N *c/x"#, "");
    // p
}

#[test]
fn test_p98() {
    let regex = Regex::xpath(r#"a[bc]d"#, "");
    // n
    let regex = regex.unwrap();
    assert!(!regex.is_match(r#"abc"#));
}

#[test]
fn test_p99() {
    let regex = Regex::xpath(r#"a[bc]d"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"abd"#));
}

#[test]
fn test_p100() {
    let regex = Regex::xpath(r#"a[b]d"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"abd"#));
}

#[test]
fn test_p101() {
    let regex = Regex::xpath(r#"[a][b][d]"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"abd"#));
}

#[test]
fn test_p102() {
    let regex = Regex::xpath(r#".[b]."#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"abd"#));
}

#[test]
fn test_p103() {
    let regex = Regex::xpath(r#".[b]."#, "");
    // n
    let regex = regex.unwrap();
    assert!(!regex.is_match(r#"aBd"#));
}

#[test]
fn test_p104() {
    let regex = Regex::xpath(r#"(?i:.[b].)"#, "");
    // p
}

#[test]
fn test_p105() {
    let regex = Regex::xpath(r#"(?i:\N[b]\N)"#, "");
    // p
}

#[test]
fn test_p106() {
    let regex = Regex::xpath(r#"a[b-d]e"#, "");
    // n
    let regex = regex.unwrap();
    assert!(!regex.is_match(r#"abd"#));
}

#[test]
fn test_p107() {
    let regex = Regex::xpath(r#"a[b-d]e"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"ace"#));
}

#[test]
fn test_p108() {
    let regex = Regex::xpath(r#"a[b-d]"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"aac"#));
}

#[test]
fn test_p109() {
    let regex = Regex::xpath(r#"a[-b]"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"a-"#));
}

#[test]
fn test_p110() {
    let regex = Regex::xpath(r#"a[b-]"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"a-"#));
}

#[test]
fn test_p111() {
    let regex = Regex::xpath(r#"a[b-a]"#, "");
    // c
}

#[test]
fn test_p112() {
    let regex = Regex::xpath(r#"a[]b"#, "");
    // c
}

#[test]
fn test_p113() {
    let regex = Regex::xpath(r#"a["#, "");
    // c
}

#[test]
fn test_p114() {
    let regex = Regex::xpath(r#"a]"#, "");
    // p
}

#[test]
fn test_p115() {
    let regex = Regex::xpath(r#"a[]]b"#, "");
    // p
}

#[test]
fn test_p116() {
    let regex = Regex::xpath(r#"a[^bc]d"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"aed"#));
}

#[test]
fn test_p117() {
    let regex = Regex::xpath(r#"a[^bc]d"#, "");
    // n
    let regex = regex.unwrap();
    assert!(!regex.is_match(r#"abd"#));
}

#[test]
fn test_p118() {
    let regex = Regex::xpath(r#"a[^-b]c"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"adc"#));
}

#[test]
fn test_p119() {
    let regex = Regex::xpath(r#"a[^-b]c"#, "");
    // n
    let regex = regex.unwrap();
    assert!(!regex.is_match(r#"a-c"#));
}

#[test]
fn test_p120() {
    let regex = Regex::xpath(r#"a[^]b]c"#, "");
    // p
}

#[test]
fn test_p121() {
    let regex = Regex::xpath(r#"a[^]b]c"#, "");
    // p
}

#[test]
fn test_p122() {
    let regex = Regex::xpath(r#"\ba\b"#, "");
    // p
}

#[test]
fn test_p123() {
    let regex = Regex::xpath(r#"\ba\b"#, "");
    // p
}

#[test]
fn test_p124() {
    let regex = Regex::xpath(r#"\ba\b"#, "");
    // p
}

#[test]
fn test_p125() {
    let regex = Regex::xpath(r#"\by\b"#, "");
    // p
}

#[test]
fn test_p126() {
    let regex = Regex::xpath(r#"\by\b"#, "");
    // p
}

#[test]
fn test_p127() {
    let regex = Regex::xpath(r#"\by\b"#, "");
    // p
}

#[test]
fn test_p128() {
    let regex = Regex::xpath(r#"\Ba\B"#, "");
    // p
}

#[test]
fn test_p129() {
    let regex = Regex::xpath(r#"\Ba\B"#, "");
    // p
}

#[test]
fn test_p130() {
    let regex = Regex::xpath(r#"\Ba\B"#, "");
    // p
}

#[test]
fn test_p131() {
    let regex = Regex::xpath(r#"\By\b"#, "");
    // p
}

#[test]
fn test_p132() {
    let regex = Regex::xpath(r#"\By\b"#, "");
    // p
}

#[test]
fn test_p133() {
    let regex = Regex::xpath(r#"\By\b"#, "");
    // p
}

#[test]
fn test_p134() {
    let regex = Regex::xpath(r#"\By\b"#, "");
    // p
}

#[test]
fn test_p135() {
    let regex = Regex::xpath(r#"\by\B"#, "");
    // p
}

#[test]
fn test_p136() {
    let regex = Regex::xpath(r#"\By\B"#, "");
    // p
}

#[test]
fn test_p137() {
    let regex = Regex::xpath(r#"\w"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"a"#));
}

#[test]
fn test_p138() {
    let regex = Regex::xpath(r#"\w"#, "");
    // n
    let regex = regex.unwrap();
    assert!(!regex.is_match(r#"-"#));
}

#[test]
fn test_p139() {
    let regex = Regex::xpath(r#"\W"#, "");
    // n
    let regex = regex.unwrap();
    assert!(!regex.is_match(r#"a"#));
}

#[test]
fn test_p140() {
    let regex = Regex::xpath(r#"\W"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"-"#));
}

#[test]
fn test_p141() {
    let regex = Regex::xpath(r#"a\sb"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"a b"#));
}

#[test]
fn test_p142() {
    let regex = Regex::xpath(r#"a\sb"#, "");
    // n
    let regex = regex.unwrap();
    assert!(!regex.is_match(r#"a-b"#));
}

#[test]
fn test_p143() {
    let regex = Regex::xpath(r#"a\Sb"#, "");
    // n
    let regex = regex.unwrap();
    assert!(!regex.is_match(r#"a b"#));
}

#[test]
fn test_p144() {
    let regex = Regex::xpath(r#"a\Sb"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"a-b"#));
}

#[test]
fn test_p145() {
    let regex = Regex::xpath(r#"\d"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"1"#));
}

#[test]
fn test_p146() {
    let regex = Regex::xpath(r#"\d"#, "");
    // n
    let regex = regex.unwrap();
    assert!(!regex.is_match(r#"-"#));
}

#[test]
fn test_p147() {
    let regex = Regex::xpath(r#"\D"#, "");
    // n
    let regex = regex.unwrap();
    assert!(!regex.is_match(r#"1"#));
}

#[test]
fn test_p148() {
    let regex = Regex::xpath(r#"\D"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"-"#));
}

#[test]
fn test_p149() {
    let regex = Regex::xpath(r#"[\w]"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"a"#));
}

#[test]
fn test_p150() {
    let regex = Regex::xpath(r#"[\w]"#, "");
    // n
    let regex = regex.unwrap();
    assert!(!regex.is_match(r#"-"#));
}

#[test]
fn test_p151() {
    let regex = Regex::xpath(r#"[\W]"#, "");
    // n
    let regex = regex.unwrap();
    assert!(!regex.is_match(r#"a"#));
}

#[test]
fn test_p152() {
    let regex = Regex::xpath(r#"[\W]"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"-"#));
}

#[test]
fn test_p153() {
    let regex = Regex::xpath(r#"a[\s]b"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"a b"#));
}

#[test]
fn test_p154() {
    let regex = Regex::xpath(r#"a[\s]b"#, "");
    // n
    let regex = regex.unwrap();
    assert!(!regex.is_match(r#"a-b"#));
}

#[test]
fn test_p155() {
    let regex = Regex::xpath(r#"a[\S]b"#, "");
    // n
    let regex = regex.unwrap();
    assert!(!regex.is_match(r#"a b"#));
}

#[test]
fn test_p156() {
    let regex = Regex::xpath(r#"a[\S]b"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"a-b"#));
}

#[test]
fn test_p157() {
    let regex = Regex::xpath(r#"[\d]"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"1"#));
}

#[test]
fn test_p158() {
    let regex = Regex::xpath(r#"[\d]"#, "");
    // n
    let regex = regex.unwrap();
    assert!(!regex.is_match(r#"-"#));
}

#[test]
fn test_p159() {
    let regex = Regex::xpath(r#"[\D]"#, "");
    // n
    let regex = regex.unwrap();
    assert!(!regex.is_match(r#"1"#));
}

#[test]
fn test_p160() {
    let regex = Regex::xpath(r#"[\D]"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"-"#));
}

#[test]
fn test_p161() {
    let regex = Regex::xpath(r#"ab|cd"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"abc"#));
}

#[test]
fn test_p162() {
    let regex = Regex::xpath(r#"ab|cd"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"abcd"#));
}

#[test]
fn test_p163() {
    let regex = Regex::xpath(r#"()ef"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"def"#));
}

#[test]
fn test_p164() {
    let regex = Regex::xpath(r#"()ef"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"def"#));
}

#[test]
fn test_p165() {
    let regex = Regex::xpath(r#"()ef"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"def"#));
}

#[test]
fn test_p166() {
    let regex = Regex::xpath(r#"()\x{100}\x{1000}"#, "");
    // p
}

#[test]
fn test_p167() {
    let regex = Regex::xpath(r#"()ef"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"def"#));
}

#[test]
fn test_p168() {
    let regex = Regex::xpath(r#"()ef"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"def"#));
}

#[test]
fn test_p169() {
    let regex = Regex::xpath(r#"*a"#, "");
    // c
}

#[test]
fn test_p170() {
    let regex = Regex::xpath(r#"(|*)b"#, "");
    // c
}

#[test]
fn test_p171() {
    let regex = Regex::xpath(r#"(*)b"#, "");
    // c
}

#[test]
fn test_p172() {
    let regex = Regex::xpath(r#"$b"#, "");
    // n
    let regex = regex.unwrap();
    assert!(!regex.is_match(r#"b"#));
}

#[test]
fn test_p173() {
    let regex = Regex::xpath(r#"a\"#, "");
    // c
}

#[test]
fn test_p174() {
    let regex = Regex::xpath(r#"a\(b"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"a(b"#));
}

#[test]
fn test_p175() {
    let regex = Regex::xpath(r#"a\(*b"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"ab"#));
}

#[test]
fn test_p176() {
    let regex = Regex::xpath(r#"a\(*b"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"a((b"#));
}

#[test]
fn test_p177() {
    let regex = Regex::xpath(r#"a\\b"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"a\b"#));
}

#[test]
fn test_p178() {
    let regex = Regex::xpath(r#"abc)"#, "");
    // c
}

#[test]
fn test_p179() {
    let regex = Regex::xpath(r#"(abc"#, "");
    // c
}

#[test]
fn test_p180() {
    let regex = Regex::xpath(r#"((a))"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"abc"#));
}

#[test]
fn test_p184() {
    let regex = Regex::xpath(r#"((a))"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"abc"#));
}

#[test]
fn test_p185() {
    let regex = Regex::xpath(r#"(a)b(c)"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"abc"#));
}

#[test]
fn test_p186() {
    let regex = Regex::xpath(r#"(a)b(c)"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"abc"#));
}

#[test]
fn test_p187() {
    let regex = Regex::xpath(r#"(a)b(c)"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"abc"#));
}

#[test]
fn test_p188() {
    let regex = Regex::xpath(r#"a+b+c"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"aabbabc"#));
}

#[test]
fn test_p189() {
    let regex = Regex::xpath(r#"a{1,}b{1,}c"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"aabbabc"#));
}

#[test]
fn test_p190() {
    let regex = Regex::xpath(r#"a**"#, "");
    // c
}

#[test]
fn test_p191() {
    let regex = Regex::xpath(r#"a.+?c"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"abcabc"#));
}

#[test]
fn test_p192() {
    let regex = Regex::xpath(r#"(a+|b)*"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"ab"#));
}

#[test]
fn test_p193() {
    let regex = Regex::xpath(r#"(a+|b)*"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"ab"#));
}

#[test]
fn test_p194() {
    let regex = Regex::xpath(r#"(a+|b)*"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"ab"#));
}

#[test]
fn test_p195() {
    let regex = Regex::xpath(r#"(a+|b)*"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"ab"#));
}

#[test]
fn test_p196() {
    let regex = Regex::xpath(r#"(a+|b)*"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"ab"#));
}

#[test]
fn test_p197() {
    let regex = Regex::xpath(r#"(a+|b){0,}"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"ab"#));
}

#[test]
fn test_p198() {
    let regex = Regex::xpath(r#"(a+|b)+"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"ab"#));
}

#[test]
fn test_p199() {
    let regex = Regex::xpath(r#"(a+|b){1,}"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"ab"#));
}

#[test]
fn test_p200() {
    let regex = Regex::xpath(r#"(a+|b)?"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"ab"#));
}

#[test]
fn test_p201() {
    let regex = Regex::xpath(r#"(a+|b){0,1}"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"ab"#));
}

#[test]
fn test_p202() {
    let regex = Regex::xpath(r#")("#, "");
    // c
}

#[test]
fn test_p203() {
    let regex = Regex::xpath(r#"[^ab]*"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"cde"#));
}

#[test]
fn test_p204() {
    let regex = Regex::xpath(r#"abc"#, "");
    // n
    let regex = regex.unwrap();
    assert!(!regex.is_match(r#""#));
}

#[test]
fn test_p205() {
    let regex = Regex::xpath(r#"a*"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#""#));
}

#[test]
fn test_p206() {
    let regex = Regex::xpath(r#"([abc])*d"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"abbbcd"#));
}

#[test]
fn test_p207() {
    let regex = Regex::xpath(r#"([abc])*bcd"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"abcd"#));
}

#[test]
fn test_p208() {
    let regex = Regex::xpath(r#"a|b|c|d|e"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"e"#));
}

#[test]
fn test_p209() {
    let regex = Regex::xpath(r#"(a|b|c|d|e)f"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"ef"#));
}

#[test]
fn test_p210() {
    let regex = Regex::xpath(r#"(a|b|c|d|e)f"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"ef"#));
}

#[test]
fn test_p211() {
    let regex = Regex::xpath(r#"(a|b|c|d|e)f"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"ef"#));
}

#[test]
fn test_p212() {
    let regex = Regex::xpath(r#"(a|b|c|d|e)f"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"ef"#));
}

#[test]
fn test_p213() {
    let regex = Regex::xpath(r#"(a|b|c|d|e)f"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"ef"#));
}

#[test]
fn test_p214() {
    let regex = Regex::xpath(r#"abcd*efg"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"abcdefg"#));
}

#[test]
fn test_p215() {
    let regex = Regex::xpath(r#"ab*"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"xabyabbbz"#));
}

#[test]
fn test_p216() {
    let regex = Regex::xpath(r#"ab*"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"xayabbbz"#));
}

#[test]
fn test_p217() {
    let regex = Regex::xpath(r#"(ab|cd)e"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"abcde"#));
}

#[test]
fn test_p218() {
    let regex = Regex::xpath(r#"[abhgefdc]ij"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"hij"#));
}

#[test]
fn test_p219() {
    let regex = Regex::xpath(r#"^(ab|cd)e"#, "");
    // n
    let regex = regex.unwrap();
    assert!(!regex.is_match(r#"abcde"#));
}

#[test]
fn test_p220() {
    let regex = Regex::xpath(r#"(abc|)ef"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"abcdef"#));
}

#[test]
fn test_p221() {
    let regex = Regex::xpath(r#"(a|b)c*d"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"abcd"#));
}

#[test]
fn test_p222() {
    let regex = Regex::xpath(r#"(ab|ab*)bc"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"abc"#));
}

#[test]
fn test_p223() {
    let regex = Regex::xpath(r#"a([bc]*)c*"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"abc"#));
}

#[test]
fn test_p224() {
    let regex = Regex::xpath(r#"a([bc]*)(c*d)"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"abcd"#));
}

#[test]
fn test_p225() {
    let regex = Regex::xpath(r#"a([bc]*)(c*d)"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"abcd"#));
}

#[test]
fn test_p226() {
    let regex = Regex::xpath(r#"a([bc]*)(c*d)"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"abcd"#));
}

#[test]
fn test_p227() {
    let regex = Regex::xpath(r#"a([bc]*)(c*d)"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"abcd"#));
}

#[test]
fn test_p228() {
    let regex = Regex::xpath(r#"a([bc]*)(c*d)"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"abcd"#));
}

#[test]
fn test_p229() {
    let regex = Regex::xpath(r#"a([bc]*)(c*d)"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"abcd"#));
}

#[test]
fn test_p230() {
    let regex = Regex::xpath(r#"a([bc]*)(c*d)"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"abcd"#));
}

#[test]
fn test_p231() {
    let regex = Regex::xpath(r#"a([bc]+)(c*d)"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"abcd"#));
}

#[test]
fn test_p232() {
    let regex = Regex::xpath(r#"a([bc]*)(c+d)"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"abcd"#));
}

#[test]
fn test_p233() {
    let regex = Regex::xpath(r#"a([bc]*)(c+d)"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"abcd"#));
}

#[test]
fn test_p234() {
    let regex = Regex::xpath(r#"a([bc]*)(c+d)"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"abcd"#));
}

#[test]
fn test_p235() {
    let regex = Regex::xpath(r#"a([bc]*)(c+d)"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"abcd"#));
}

#[test]
fn test_p236() {
    let regex = Regex::xpath(r#"a([bc]*)(c+d)"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"abcd"#));
}

#[test]
fn test_p237() {
    let regex = Regex::xpath(r#"a([bc]*)(c+d)"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"abcd"#));
}

#[test]
fn test_p238() {
    let regex = Regex::xpath(r#"a([bc]*)(c+d)"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"abcd"#));
}

#[test]
fn test_p239() {
    let regex = Regex::xpath(r#"a[bcd]*dcdcde"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"adcdcde"#));
}

#[test]
fn test_p240() {
    let regex = Regex::xpath(r#"a[bcd]+dcdcde"#, "");
    // n
    let regex = regex.unwrap();
    assert!(!regex.is_match(r#"adcdcde"#));
}

#[test]
fn test_p241() {
    let regex = Regex::xpath(r#"(ab|a)b*c"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"abc"#));
}

#[test]
fn test_p242() {
    let regex = Regex::xpath(r#"(ab|a)b*c"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"abc"#));
}

#[test]
fn test_p243() {
    let regex = Regex::xpath(r#"(ab|a)b*c"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"abc"#));
}

#[test]
fn test_p244() {
    let regex = Regex::xpath(r#"(ab|a)b*c"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"abc"#));
}

#[test]
fn test_p245() {
    let regex = Regex::xpath(r#"(ab|a)b*c"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"abc"#));
}

#[test]
fn test_p246() {
    let regex = Regex::xpath(r#"((a)(b)c)(d)"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"abcd"#));
}

#[test]
fn test_p247() {
    let regex = Regex::xpath(r#"((a)(b)c)(d)"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"abcd"#));
}

#[test]
fn test_p248() {
    let regex = Regex::xpath(r#"((a)(b)c)(d)"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"abcd"#));
}

#[test]
fn test_p249() {
    let regex = Regex::xpath(r#"((a)(b)c)(d)"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"abcd"#));
}

#[test]
fn test_p250() {
    let regex = Regex::xpath(r#"((a)(b)c)(d)"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"abcd"#));
}

#[test]
fn test_p251() {
    let regex = Regex::xpath(r#"((a)(b)c)(d)"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"abcd"#));
}

#[test]
fn test_p252() {
    let regex = Regex::xpath(r#"((a)(b)c)(d)"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"abcd"#));
}

#[test]
fn test_p253() {
    let regex = Regex::xpath(r#"((a)(b)c)(d)"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"abcd"#));
}

#[test]
fn test_p254() {
    let regex = Regex::xpath(r#"((a)(b)c)(d)"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"abcd"#));
}

#[test]
fn test_p255() {
    let regex = Regex::xpath(r#"((a)(b)c)(d)"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"abcd"#));
}

#[test]
fn test_p256() {
    let regex = Regex::xpath(r#"((a)(b)c)(d)"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"abcd"#));
}

#[test]
fn test_p257() {
    let regex = Regex::xpath(r#"[a-zA-Z_][a-zA-Z0-9_]*"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"alpha"#));
}

#[test]
fn test_p258() {
    let regex = Regex::xpath(r#"^a(bc+|b[eh])g|.h$"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"abh"#));
}

#[test]
fn test_p259() {
    let regex = Regex::xpath(r#"(bc+d$|ef*g.|h?i(j|k))"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"effgz"#));
}

#[test]
fn test_p260() {
    let regex = Regex::xpath(r#"(bc+d$|ef*g.|h?i(j|k))"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"ij"#));
}

#[test]
fn test_p261() {
    let regex = Regex::xpath(r#"(bc+d$|ef*g.|h?i(j|k))"#, "");
    // n
    let regex = regex.unwrap();
    assert!(!regex.is_match(r#"effg"#));
}

#[test]
fn test_p262() {
    let regex = Regex::xpath(r#"(bc+d$|ef*g.|h?i(j|k))"#, "");
    // n
    let regex = regex.unwrap();
    assert!(!regex.is_match(r#"bcdd"#));
}

#[test]
fn test_p263() {
    let regex = Regex::xpath(r#"(bc+d$|ef*g.|h?i(j|k))"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"reffgz"#));
}

#[test]
fn test_p264() {
    let regex = Regex::xpath(r#"((((((((((a))))))))))"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"a"#));
}

#[test]
fn test_p265() {
    let regex = Regex::xpath(r#"((((((((((a))))))))))"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"a"#));
}

#[test]
fn test_p266() {
    let regex = Regex::xpath(r#"((((((((((a))))))))))"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"a"#));
}

#[test]
fn test_p267() {
    let regex = Regex::xpath(r#"((((((((((a))))))))))"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"a"#));
}

#[test]
fn test_p268() {
    let regex = Regex::xpath(r#"((((((((((a))))))))))"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"a"#));
}

#[test]
fn test_p269() {
    let regex = Regex::xpath(r#"((((((((((a))))))))))\10"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"aa"#));
}

#[test]
fn test_p270() {
    let regex = Regex::xpath(r#"((((((((((a))))))))))${bang}"#, "");
    // p
}

#[test]
fn test_p271() {
    let regex = Regex::xpath(r#"((((((((((a))))))))))${bang}"#, "");
    // p
}

#[test]
fn test_p272() {
    let regex = Regex::xpath(r#"(((((((((a)))))))))"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"a"#));
}

#[test]
fn test_p273() {
    let regex = Regex::xpath(r#"multiple words of text"#, "");
    // n
    let regex = regex.unwrap();
    assert!(!regex.is_match(r#"uh-uh"#));
}

#[test]
fn test_p274() {
    let regex = Regex::xpath(r#"multiple words"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"multiple words, yeah"#));
}

#[test]
fn test_p275() {
    let regex = Regex::xpath(r#"(.*)c(.*)"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"abcde"#));
}

#[test]
fn test_p276() {
    let regex = Regex::xpath(r#"\((.*), (.*)\)"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"(a, b)"#));
}

#[test]
fn test_p277() {
    let regex = Regex::xpath(r#"[k]"#, "");
    // n
    let regex = regex.unwrap();
    assert!(!regex.is_match(r#"ab"#));
}

#[test]
fn test_p278() {
    let regex = Regex::xpath(r#"abcd"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"abcd"#));
}

#[test]
fn test_p279() {
    let regex = Regex::xpath(r#"a(bc)d"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"abcd"#));
}

#[test]
fn test_p280() {
    let regex = Regex::xpath(r#"a[-]?c"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"ac"#));
}

#[test]
fn test_p281() {
    let regex = Regex::xpath(r#"(abc)\1"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"abcabc"#));
}

#[test]
fn test_p282() {
    let regex = Regex::xpath(r#"([a-c]*)\1"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"abcabc"#));
}

#[test]
fn test_p283() {
    let regex = Regex::xpath(r#"\1"#, "");
    // c
}

#[test]
fn test_p284() {
    let regex = Regex::xpath(r#"\2"#, "");
    // c
}

#[test]
fn test_p285() {
    let regex = Regex::xpath(r#"\g1"#, "");
    // c
}

#[test]
fn test_p286() {
    let regex = Regex::xpath(r#"\g-1"#, "");
    // c
}

#[test]
fn test_p287() {
    let regex = Regex::xpath(r#"\g{1}"#, "");
    // c
}

#[test]
fn test_p288() {
    let regex = Regex::xpath(r#"\g{-1}"#, "");
    // c
}

#[test]
fn test_p289() {
    let regex = Regex::xpath(r#"\g0"#, "");
    // c
}

#[test]
fn test_p290() {
    let regex = Regex::xpath(r#"\g-0"#, "");
    // c
}

#[test]
fn test_p291() {
    let regex = Regex::xpath(r#"\g{0}"#, "");
    // c
}

#[test]
fn test_p292() {
    let regex = Regex::xpath(r#"\g{-0}"#, "");
    // c
}

#[test]
fn test_p293() {
    let regex = Regex::xpath(r#"(a)|\1"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"a"#));
}

#[test]
fn test_p294() {
    let regex = Regex::xpath(r#"(a)|\1"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"x"#));
}

#[test]
fn test_p295() {
    let regex = Regex::xpath(r#"(?:(b)?a)\1"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"a"#));
}

#[test]
fn test_p296() {
    let regex = Regex::xpath(r#"(a)|\2"#, "");
    // c
}

#[test]
fn test_p297() {
    let regex = Regex::xpath(r#"(([a-c])b*?\2)*"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"ababbbcbc"#));
}

#[test]
fn test_p298() {
    let regex = Regex::xpath(r#"(([a-c])b*?\2){3}"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"ababbbcbc"#));
}

#[test]
fn test_p299() {
    let regex = Regex::xpath(r#"((\3|b)\2(a)x)+"#, "");
    // p
}

#[test]
fn test_p300() {
    let regex = Regex::xpath(r#"((\3|b)\2(a)x)+"#, "");
    // p
}

#[test]
fn test_p301() {
    let regex = Regex::xpath(r#"((\3|b)\2(a)){2,}"#, "");
    // p
}

#[test]
fn test_p303() {
    let regex = Regex::xpath(r#"^((.)?a\2)+$"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"babadad"#));
}

#[test]
fn test_p304() {
    let regex = Regex::xpath(r#"(a)|(b)"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"b"#));
}

#[test]
fn test_p305() {
    let regex = Regex::xpath(r#"(a)|(b)"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"b"#));
}

#[test]
fn test_p306() {
    let regex = Regex::xpath(r#"(a)|(b)"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"b"#));
}

#[test]
fn test_p307() {
    let regex = Regex::xpath(r#"(a)|(b)"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"b"#));
}

#[test]
fn test_p308() {
    let regex = Regex::xpath(r#"(a)|(b)"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"b"#));
}

#[test]
fn test_p309() {
    let regex = Regex::xpath(r#"(a)|(b)"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"b"#));
}

#[test]
fn test_p310() {
    let regex = Regex::xpath(r#"abc"#, "i");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"ABC"#));
}

#[test]
fn test_p311() {
    let regex = Regex::xpath(r#"abc"#, "i");
    // n
    let regex = regex.unwrap();
    assert!(!regex.is_match(r#"XBC"#));
}

#[test]
fn test_p312() {
    let regex = Regex::xpath(r#"abc"#, "i");
    // n
    let regex = regex.unwrap();
    assert!(!regex.is_match(r#"AXC"#));
}

#[test]
fn test_p313() {
    let regex = Regex::xpath(r#"abc"#, "i");
    // n
    let regex = regex.unwrap();
    assert!(!regex.is_match(r#"ABX"#));
}

#[test]
fn test_p314() {
    let regex = Regex::xpath(r#"abc"#, "i");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"XABCY"#));
}

#[test]
fn test_p315() {
    let regex = Regex::xpath(r#"abc"#, "i");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"ABABC"#));
}

#[test]
fn test_p316() {
    let regex = Regex::xpath(r#"ab*c"#, "i");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"ABC"#));
}

#[test]
fn test_p317() {
    let regex = Regex::xpath(r#"ab*bc"#, "i");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"ABC"#));
}

#[test]
fn test_p318() {
    let regex = Regex::xpath(r#"ab*bc"#, "i");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"ABBC"#));
}

#[test]
fn test_p319() {
    let regex = Regex::xpath(r#"ab*?bc"#, "i");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"ABBBBC"#));
}

#[test]
fn test_p320() {
    let regex = Regex::xpath(r#"ab{0,}?bc"#, "i");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"ABBBBC"#));
}

#[test]
fn test_p321() {
    let regex = Regex::xpath(r#"ab+?bc"#, "i");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"ABBC"#));
}

#[test]
fn test_p322() {
    let regex = Regex::xpath(r#"ab+bc"#, "i");
    // n
    let regex = regex.unwrap();
    assert!(!regex.is_match(r#"ABC"#));
}

#[test]
fn test_p323() {
    let regex = Regex::xpath(r#"ab+bc"#, "i");
    // n
    let regex = regex.unwrap();
    assert!(!regex.is_match(r#"ABQ"#));
}

#[test]
fn test_p324() {
    let regex = Regex::xpath(r#"ab{1,}bc"#, "i");
    // n
    let regex = regex.unwrap();
    assert!(!regex.is_match(r#"ABQ"#));
}

#[test]
fn test_p325() {
    let regex = Regex::xpath(r#"ab+bc"#, "i");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"ABBBBC"#));
}

#[test]
fn test_p326() {
    let regex = Regex::xpath(r#"ab{1,}?bc"#, "i");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"ABBBBC"#));
}

#[test]
fn test_p327() {
    let regex = Regex::xpath(r#"ab{1,3}?bc"#, "i");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"ABBBBC"#));
}

#[test]
fn test_p328() {
    let regex = Regex::xpath(r#"ab{3,4}?bc"#, "i");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"ABBBBC"#));
}

#[test]
fn test_p329() {
    let regex = Regex::xpath(r#"ab{4,5}?bc"#, "i");
    // n
    let regex = regex.unwrap();
    assert!(!regex.is_match(r#"ABBBBC"#));
}

#[test]
fn test_p330() {
    let regex = Regex::xpath(r#"ab??bc"#, "i");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"ABBC"#));
}

#[test]
fn test_p331() {
    let regex = Regex::xpath(r#"ab??bc"#, "i");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"ABC"#));
}

#[test]
fn test_p332() {
    let regex = Regex::xpath(r#"ab{0,1}?bc"#, "i");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"ABC"#));
}

#[test]
fn test_p333() {
    let regex = Regex::xpath(r#"ab??bc"#, "i");
    // n
    let regex = regex.unwrap();
    assert!(!regex.is_match(r#"ABBBBC"#));
}

#[test]
fn test_p334() {
    let regex = Regex::xpath(r#"ab??c"#, "i");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"ABC"#));
}

#[test]
fn test_p335() {
    let regex = Regex::xpath(r#"ab{0,1}?c"#, "i");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"ABC"#));
}

#[test]
fn test_p336() {
    let regex = Regex::xpath(r#"^abc$"#, "i");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"ABC"#));
}

#[test]
fn test_p337() {
    let regex = Regex::xpath(r#"^abc$"#, "i");
    // n
    let regex = regex.unwrap();
    assert!(!regex.is_match(r#"ABCC"#));
}

#[test]
fn test_p338() {
    let regex = Regex::xpath(r#"^abc"#, "i");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"ABCC"#));
}

#[test]
fn test_p339() {
    let regex = Regex::xpath(r#"^abc$"#, "i");
    // n
    let regex = regex.unwrap();
    assert!(!regex.is_match(r#"AABC"#));
}

#[test]
fn test_p340() {
    let regex = Regex::xpath(r#"abc$"#, "i");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"AABC"#));
}

#[test]
fn test_p341() {
    let regex = Regex::xpath(r#"^"#, "i");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"ABC"#));
}

#[test]
fn test_p342() {
    let regex = Regex::xpath(r#"$"#, "i");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"ABC"#));
}

#[test]
fn test_p343() {
    let regex = Regex::xpath(r#"a.c"#, "i");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"ABC"#));
}

#[test]
fn test_p344() {
    let regex = Regex::xpath(r#"a.c"#, "i");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"AXC"#));
}

#[test]
fn test_p345() {
    let regex = Regex::xpath(r#"a\Nc"#, "i");
    // p
}

#[test]
fn test_p346() {
    let regex = Regex::xpath(r#"a.*?c"#, "i");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"AXYZC"#));
}

#[test]
fn test_p347() {
    let regex = Regex::xpath(r#"a.*c"#, "i");
    // n
    let regex = regex.unwrap();
    assert!(!regex.is_match(r#"AXYZD"#));
}

#[test]
fn test_p348() {
    let regex = Regex::xpath(r#"a[bc]d"#, "i");
    // n
    let regex = regex.unwrap();
    assert!(!regex.is_match(r#"ABC"#));
}

#[test]
fn test_p349() {
    let regex = Regex::xpath(r#"a[bc]d"#, "i");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"ABD"#));
}

#[test]
fn test_p350() {
    let regex = Regex::xpath(r#"a[b-d]e"#, "i");
    // n
    let regex = regex.unwrap();
    assert!(!regex.is_match(r#"ABD"#));
}

#[test]
fn test_p351() {
    let regex = Regex::xpath(r#"a[b-d]e"#, "i");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"ACE"#));
}

#[test]
fn test_p352() {
    let regex = Regex::xpath(r#"a[b-d]"#, "i");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"AAC"#));
}

#[test]
fn test_p353() {
    let regex = Regex::xpath(r#"a[-b]"#, "i");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"A-"#));
}

#[test]
fn test_p354() {
    let regex = Regex::xpath(r#"a[b-]"#, "i");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"A-"#));
}

#[test]
fn test_p355() {
    let regex = Regex::xpath(r#"a[b-a]"#, "i");
    // c
}

#[test]
fn test_p356() {
    let regex = Regex::xpath(r#"a[]b"#, "i");
    // c
}

#[test]
fn test_p357() {
    let regex = Regex::xpath(r#"a["#, "i");
    // c
}

#[test]
fn test_p358() {
    let regex = Regex::xpath(r#"a]"#, "i");
    // p
}

#[test]
fn test_p359() {
    let regex = Regex::xpath(r#"a[]]b"#, "i");
    // p
}

#[test]
fn test_p360() {
    let regex = Regex::xpath(r#"a[^bc]d"#, "i");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"AED"#));
}

#[test]
fn test_p361() {
    let regex = Regex::xpath(r#"a[^bc]d"#, "i");
    // n
    let regex = regex.unwrap();
    assert!(!regex.is_match(r#"ABD"#));
}

#[test]
fn test_p362() {
    let regex = Regex::xpath(r#"a[^-b]c"#, "i");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"ADC"#));
}

#[test]
fn test_p363() {
    let regex = Regex::xpath(r#"a[^-b]c"#, "i");
    // n
    let regex = regex.unwrap();
    assert!(!regex.is_match(r#"A-C"#));
}

#[test]
fn test_p364() {
    let regex = Regex::xpath(r#"a[^]b]c"#, "i");
    // p
}

#[test]
fn test_p365() {
    let regex = Regex::xpath(r#"a[^]b]c"#, "i");
    // p
}

#[test]
fn test_p366() {
    let regex = Regex::xpath(r#"ab|cd"#, "i");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"ABC"#));
}

#[test]
fn test_p367() {
    let regex = Regex::xpath(r#"ab|cd"#, "i");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"ABCD"#));
}

#[test]
fn test_p368() {
    let regex = Regex::xpath(r#"()ef"#, "i");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"DEF"#));
}

#[test]
fn test_p369() {
    let regex = Regex::xpath(r#"*a"#, "i");
    // c
}

#[test]
fn test_p370() {
    let regex = Regex::xpath(r#"(|*)b"#, "i");
    // c
}

#[test]
fn test_p371() {
    let regex = Regex::xpath(r#"(*)b"#, "i");
    // c
}

#[test]
fn test_p372() {
    let regex = Regex::xpath(r#"$b"#, "i");
    // n
    let regex = regex.unwrap();
    assert!(!regex.is_match(r#"B"#));
}

#[test]
fn test_p373() {
    let regex = Regex::xpath(r#"a\"#, "i");
    // c
}

#[test]
fn test_p374() {
    let regex = Regex::xpath(r#"a\(b"#, "i");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"A(B"#));
}

#[test]
fn test_p375() {
    let regex = Regex::xpath(r#"a\(*b"#, "i");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"AB"#));
}

#[test]
fn test_p376() {
    let regex = Regex::xpath(r#"a\(*b"#, "i");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"A((B"#));
}

#[test]
fn test_p377() {
    let regex = Regex::xpath(r#"a\\b"#, "i");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"A\B"#));
}

#[test]
fn test_p378() {
    let regex = Regex::xpath(r#"abc)"#, "i");
    // c
}

#[test]
fn test_p379() {
    let regex = Regex::xpath(r#"(abc"#, "i");
    // c
}

#[test]
fn test_p380() {
    let regex = Regex::xpath(r#"((a))"#, "i");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"ABC"#));
}

#[test]
fn test_p381() {
    let regex = Regex::xpath(r#"(a)b(c)"#, "i");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"ABC"#));
}

#[test]
fn test_p382() {
    let regex = Regex::xpath(r#"a+b+c"#, "i");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"AABBABC"#));
}

#[test]
fn test_p383() {
    let regex = Regex::xpath(r#"a{1,}b{1,}c"#, "i");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"AABBABC"#));
}

#[test]
fn test_p384() {
    let regex = Regex::xpath(r#"a**"#, "i");
    // c
}

#[test]
fn test_p385() {
    let regex = Regex::xpath(r#"a.+?c"#, "i");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"ABCABC"#));
}

#[test]
fn test_p386() {
    let regex = Regex::xpath(r#"a.*?c"#, "i");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"ABCABC"#));
}

#[test]
fn test_p387() {
    let regex = Regex::xpath(r#"a.{0,5}?c"#, "i");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"ABCABC"#));
}

#[test]
fn test_p388() {
    let regex = Regex::xpath(r#"(a+|b)*"#, "i");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"AB"#));
}

#[test]
fn test_p389() {
    let regex = Regex::xpath(r#"(a+|b){0,}"#, "i");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"AB"#));
}

#[test]
fn test_p390() {
    let regex = Regex::xpath(r#"(a+|b)+"#, "i");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"AB"#));
}

#[test]
fn test_p391() {
    let regex = Regex::xpath(r#"(a+|b){1,}"#, "i");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"AB"#));
}

#[test]
fn test_p392() {
    let regex = Regex::xpath(r#"(a+|b)?"#, "i");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"AB"#));
}

#[test]
fn test_p393() {
    let regex = Regex::xpath(r#"(a+|b){0,1}"#, "i");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"AB"#));
}

#[test]
fn test_p394() {
    let regex = Regex::xpath(r#"(a+|b){0,1}?"#, "i");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"AB"#));
}

#[test]
fn test_p395() {
    let regex = Regex::xpath(r#")("#, "i");
    // c
}

#[test]
fn test_p396() {
    let regex = Regex::xpath(r#"[^ab]*"#, "i");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"CDE"#));
}

#[test]
fn test_p397() {
    let regex = Regex::xpath(r#"abc"#, "i");
    // n
    let regex = regex.unwrap();
    assert!(!regex.is_match(r#""#));
}

#[test]
fn test_p398() {
    let regex = Regex::xpath(r#"a*"#, "i");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#""#));
}

#[test]
fn test_p399() {
    let regex = Regex::xpath(r#"([abc])*d"#, "i");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"ABBBCD"#));
}

#[test]
fn test_p400() {
    let regex = Regex::xpath(r#"([abc])*bcd"#, "i");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"ABCD"#));
}

#[test]
fn test_p401() {
    let regex = Regex::xpath(r#"a|b|c|d|e"#, "i");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"E"#));
}

#[test]
fn test_p402() {
    let regex = Regex::xpath(r#"(a|b|c|d|e)f"#, "i");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"EF"#));
}

#[test]
fn test_p403() {
    let regex = Regex::xpath(r#"abcd*efg"#, "i");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"ABCDEFG"#));
}

#[test]
fn test_p404() {
    let regex = Regex::xpath(r#"ab*"#, "i");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"XABYABBBZ"#));
}

#[test]
fn test_p405() {
    let regex = Regex::xpath(r#"ab*"#, "i");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"XAYABBBZ"#));
}

#[test]
fn test_p406() {
    let regex = Regex::xpath(r#"(ab|cd)e"#, "i");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"ABCDE"#));
}

#[test]
fn test_p407() {
    let regex = Regex::xpath(r#"[abhgefdc]ij"#, "i");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"HIJ"#));
}

#[test]
fn test_p408() {
    let regex = Regex::xpath(r#"^(ab|cd)e"#, "i");
    // n
    let regex = regex.unwrap();
    assert!(!regex.is_match(r#"ABCDE"#));
}

#[test]
fn test_p409() {
    let regex = Regex::xpath(r#"(abc|)ef"#, "i");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"ABCDEF"#));
}

#[test]
fn test_p410() {
    let regex = Regex::xpath(r#"(a|b)c*d"#, "i");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"ABCD"#));
}

#[test]
fn test_p411() {
    let regex = Regex::xpath(r#"(ab|ab*)bc"#, "i");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"ABC"#));
}

#[test]
fn test_p412() {
    let regex = Regex::xpath(r#"a([bc]*)c*"#, "i");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"ABC"#));
}

#[test]
fn test_p413() {
    let regex = Regex::xpath(r#"a([bc]*)(c*d)"#, "i");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"ABCD"#));
}

#[test]
fn test_p414() {
    let regex = Regex::xpath(r#"a([bc]+)(c*d)"#, "i");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"ABCD"#));
}

#[test]
fn test_p415() {
    let regex = Regex::xpath(r#"a([bc]*)(c+d)"#, "i");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"ABCD"#));
}

#[test]
fn test_p416() {
    let regex = Regex::xpath(r#"a[bcd]*dcdcde"#, "i");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"ADCDCDE"#));
}

#[test]
fn test_p417() {
    let regex = Regex::xpath(r#"a[bcd]+dcdcde"#, "i");
    // n
    let regex = regex.unwrap();
    assert!(!regex.is_match(r#"ADCDCDE"#));
}

#[test]
fn test_p418() {
    let regex = Regex::xpath(r#"(ab|a)b*c"#, "i");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"ABC"#));
}

#[test]
fn test_p419() {
    let regex = Regex::xpath(r#"((a)(b)c)(d)"#, "i");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"ABCD"#));
}

#[test]
fn test_p420() {
    let regex = Regex::xpath(r#"[a-zA-Z_][a-zA-Z0-9_]*"#, "i");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"ALPHA"#));
}

#[test]
fn test_p421() {
    let regex = Regex::xpath(r#"^a(bc+|b[eh])g|.h$"#, "i");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"ABH"#));
}

#[test]
fn test_p422() {
    let regex = Regex::xpath(r#"(bc+d$|ef*g.|h?i(j|k))"#, "i");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"EFFGZ"#));
}

#[test]
fn test_p423() {
    let regex = Regex::xpath(r#"(bc+d$|ef*g.|h?i(j|k))"#, "i");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"IJ"#));
}

#[test]
fn test_p424() {
    let regex = Regex::xpath(r#"(bc+d$|ef*g.|h?i(j|k))"#, "i");
    // n
    let regex = regex.unwrap();
    assert!(!regex.is_match(r#"EFFG"#));
}

#[test]
fn test_p425() {
    let regex = Regex::xpath(r#"(bc+d$|ef*g.|h?i(j|k))"#, "i");
    // n
    let regex = regex.unwrap();
    assert!(!regex.is_match(r#"BCDD"#));
}

#[test]
fn test_p426() {
    let regex = Regex::xpath(r#"(bc+d$|ef*g.|h?i(j|k))"#, "i");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"REFFGZ"#));
}

#[test]
fn test_p427() {
    let regex = Regex::xpath(r#"((((((((((a))))))))))"#, "i");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"A"#));
}

#[test]
fn test_p428() {
    let regex = Regex::xpath(r#"((((((((((a))))))))))\10"#, "i");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"AA"#));
}

#[test]
fn test_p429() {
    let regex = Regex::xpath(r#"((((((((((a))))))))))${bang}"#, "i");
    // p
}

#[test]
fn test_p430() {
    let regex = Regex::xpath(r#"((((((((((a))))))))))${bang}"#, "i");
    // p
}

#[test]
fn test_p431() {
    let regex = Regex::xpath(r#"(((((((((a)))))))))"#, "i");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"A"#));
}

#[test]
fn test_p432() {
    let regex = Regex::xpath(r#"(?:(?:(?:(?:(?:(?:(?:(?:(?:(a))))))))))"#, "i");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"A"#));
}

#[test]
fn test_p433() {
    let regex = Regex::xpath(r#"(?:(?:(?:(?:(?:(?:(?:(?:(?:(a|b|c))))))))))"#, "i");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"C"#));
}

#[test]
fn test_p434() {
    let regex = Regex::xpath(r#"multiple words of text"#, "i");
    // n
    let regex = regex.unwrap();
    assert!(!regex.is_match(r#"UH-UH"#));
}

#[test]
fn test_p435() {
    let regex = Regex::xpath(r#"multiple words"#, "i");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"MULTIPLE WORDS, YEAH"#));
}

#[test]
fn test_p436() {
    let regex = Regex::xpath(r#"(.*)c(.*)"#, "i");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"ABCDE"#));
}

#[test]
fn test_p437() {
    let regex = Regex::xpath(r#"\((.*), (.*)\)"#, "i");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"(A, B)"#));
}

#[test]
fn test_p438() {
    let regex = Regex::xpath(r#"[k]"#, "i");
    // n
    let regex = regex.unwrap();
    assert!(!regex.is_match(r#"AB"#));
}

#[test]
fn test_p439() {
    let regex = Regex::xpath(r#"abcd"#, "i");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"ABCD"#));
}

#[test]
fn test_p440() {
    let regex = Regex::xpath(r#"a(bc)d"#, "i");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"ABCD"#));
}

#[test]
fn test_p441() {
    let regex = Regex::xpath(r#"a[-]?c"#, "i");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"AC"#));
}

#[test]
fn test_p442() {
    let regex = Regex::xpath(r#"(abc)\1"#, "i");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"ABCABC"#));
}

#[test]
fn test_p443() {
    let regex = Regex::xpath(r#"([a-c]*)\1"#, "i");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"ABCABC"#));
}

#[test]
fn test_p444() {
    let regex = Regex::xpath(r#"a(?!b)."#, "");
    // p
}

#[test]
fn test_p445() {
    let regex = Regex::xpath(r#"(?=)a"#, "");
    // p
}

#[test]
fn test_p446() {
    let regex = Regex::xpath(r#"a(?=d)."#, "");
    // p
}

#[test]
fn test_p447() {
    let regex = Regex::xpath(r#"a(?=c|d)."#, "");
    // p
}

#[test]
fn test_p448() {
    let regex = Regex::xpath(r#"a(?:b|c|d)(.)"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"ace"#));
}

#[test]
fn test_p449() {
    let regex = Regex::xpath(r#"a(?:b|c|d)*(.)"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"ace"#));
}

#[test]
fn test_p450() {
    let regex = Regex::xpath(r#"a(?:b|c|d)+?(.)"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"ace"#));
}

#[test]
fn test_p451() {
    let regex = Regex::xpath(r#"a(?:b|c|d)+?(.)"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"acdbcdbe"#));
}

#[test]
fn test_p452() {
    let regex = Regex::xpath(r#"a(?:b|c|d)+(.)"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"acdbcdbe"#));
}

#[test]
fn test_p453() {
    let regex = Regex::xpath(r#"a(?:b|c|d){2}(.)"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"acdbcdbe"#));
}

#[test]
fn test_p454() {
    let regex = Regex::xpath(r#"a(?:b|c|d){4,5}(.)"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"acdbcdbe"#));
}

#[test]
fn test_p455() {
    let regex = Regex::xpath(r#"a(?:b|c|d){4,5}?(.)"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"acdbcdbe"#));
}

#[test]
fn test_p456() {
    let regex = Regex::xpath(r#"((foo)|(bar))*"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"foobar"#));
}

#[test]
fn test_p457() {
    let regex = Regex::xpath(r#":(?:"#, "");
    // c
}

#[test]
fn test_p458() {
    let regex = Regex::xpath(r#"a(?:b|c|d){6,7}(.)"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"acdbcdbe"#));
}

#[test]
fn test_p459() {
    let regex = Regex::xpath(r#"a(?:b|c|d){6,7}?(.)"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"acdbcdbe"#));
}

#[test]
fn test_p460() {
    let regex = Regex::xpath(r#"a(?:b|c|d){5,6}(.)"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"acdbcdbe"#));
}

#[test]
fn test_p461() {
    let regex = Regex::xpath(r#"a(?:b|c|d){5,6}?(.)"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"acdbcdbe"#));
}

#[test]
fn test_p462() {
    let regex = Regex::xpath(r#"a(?:b|c|d){5,7}(.)"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"acdbcdbe"#));
}

#[test]
fn test_p463() {
    let regex = Regex::xpath(r#"a(?:b|c|d){5,7}?(.)"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"acdbcdbe"#));
}

#[test]
fn test_p464() {
    let regex = Regex::xpath(r#"a(?:b|(c|e){1,2}?|d)+?(.)"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"ace"#));
}

#[test]
fn test_p465() {
    let regex = Regex::xpath(r#"^(.+)?B"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"AB"#));
}

#[test]
fn test_p466() {
    let regex = Regex::xpath(r#"^([^a-z])|(\^)$"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"."#));
}

#[test]
fn test_p467() {
    let regex = Regex::xpath(r#"^[<>]&"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"<&OUT"#));
}

#[test]
fn test_p468() {
    let regex = Regex::xpath(r#"^(a\1?){4}$"#, "");
    // p
}

#[test]
fn test_p469() {
    let regex = Regex::xpath(r#"^(a\1?){4}$"#, "");
    // p
}

#[test]
fn test_p470() {
    let regex = Regex::xpath(r#"^(a\1?){4}$"#, "");
    // p
}

#[test]
fn test_p471() {
    let regex = Regex::xpath(r#"^(a(?(1)\1)){4}$"#, "");
    // p
}

#[test]
fn test_p472() {
    let regex = Regex::xpath(r#"^(a(?(1)\1)){4}$"#, "");
    // p
}

#[test]
fn test_p473() {
    let regex = Regex::xpath(r#"^(a(?(1)\1)){4}$"#, "");
    // p
}

#[test]
fn test_p474() {
    let regex = Regex::xpath(r#"((a{4})+)"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"aaaaaaaaa"#));
}

#[test]
fn test_p475() {
    let regex = Regex::xpath(r#"(((aa){2})+)"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"aaaaaaaaaa"#));
}

#[test]
fn test_p476() {
    let regex = Regex::xpath(r#"(((a{2}){2})+)"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"aaaaaaaaaa"#));
}

#[test]
fn test_p477() {
    let regex = Regex::xpath(r#"(?:(f)(o)(o)|(b)(a)(r))*"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"foobar"#));
}

#[test]
fn test_p478() {
    let regex = Regex::xpath(r#"(?<=a)b"#, "");
    // p
}

#[test]
fn test_p479() {
    let regex = Regex::xpath(r#"(?<=a)b"#, "");
    // p
}

#[test]
fn test_p480() {
    let regex = Regex::xpath(r#"(?<=a)b"#, "");
    // p
}

#[test]
fn test_p481() {
    let regex = Regex::xpath(r#"(?<!c)b"#, "");
    // p
}

#[test]
fn test_p482() {
    let regex = Regex::xpath(r#"(?<!c)b"#, "");
    // p
}

#[test]
fn test_p483() {
    let regex = Regex::xpath(r#"(?<!c)b"#, "");
    // p
}

#[test]
fn test_p484() {
    let regex = Regex::xpath(r#"(?<!c)b"#, "");
    // p
}

#[test]
fn test_p485() {
    let regex = Regex::xpath(r#"(?<%)b"#, "");
    // p
}

#[test]
fn test_p486() {
    let regex = Regex::xpath(r#"(?:..)*a"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"aba"#));
}

#[test]
fn test_p487() {
    let regex = Regex::xpath(r#"(?:..)*?a"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"aba"#));
}

#[test]
fn test_p488() {
    let regex = Regex::xpath(r#"^(?:b|a(?=(.)))*\1"#, "");
    // p
}

#[test]
fn test_p489() {
    let regex = Regex::xpath(r#"^(){3,5}"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"abc"#));
}

#[test]
fn test_p490() {
    let regex = Regex::xpath(r#"^(a+)*ax"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"aax"#));
}

#[test]
fn test_p491() {
    let regex = Regex::xpath(r#"^((a|b)+)*ax"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"aax"#));
}

#[test]
fn test_p492() {
    let regex = Regex::xpath(r#"^((a|bc)+)*ax"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"aax"#));
}

#[test]
fn test_p493() {
    let regex = Regex::xpath(r#"(a|x)*ab"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"cab"#));
}

#[test]
fn test_p494() {
    let regex = Regex::xpath(r#"(a)*ab"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"cab"#));
}

#[test]
fn test_p495() {
    let regex = Regex::xpath(r#"(?:(?i)a)b"#, "");
    // p
}

#[test]
fn test_p496() {
    let regex = Regex::xpath(r#"((?i)a)b"#, "");
    // p
}

#[test]
fn test_p497() {
    let regex = Regex::xpath(r#"(?:(?i)a)b"#, "");
    // p
}

#[test]
fn test_p498() {
    let regex = Regex::xpath(r#"((?i)a)b"#, "");
    // p
}

#[test]
fn test_p499() {
    let regex = Regex::xpath(r#"(?:(?i)a)b"#, "");
    // p
}

#[test]
fn test_p500() {
    let regex = Regex::xpath(r#"((?i)a)b"#, "");
    // p
}

#[test]
fn test_p501() {
    let regex = Regex::xpath(r#"(?i:a)b"#, "");
    // p
}

#[test]
fn test_p502() {
    let regex = Regex::xpath(r#"((?i:a))b"#, "");
    // p
}

#[test]
fn test_p503() {
    let regex = Regex::xpath(r#"(?i:a)b"#, "");
    // p
}

#[test]
fn test_p504() {
    let regex = Regex::xpath(r#"((?i:a))b"#, "");
    // p
}

#[test]
fn test_p505() {
    let regex = Regex::xpath(r#"(?i:a)b"#, "");
    // p
}

#[test]
fn test_p506() {
    let regex = Regex::xpath(r#"((?i:a))b"#, "");
    // p
}

#[test]
fn test_p507() {
    let regex = Regex::xpath(r#"(?:(?-i)a)b"#, "i");
    // p
}

#[test]
fn test_p508() {
    let regex = Regex::xpath(r#"((?-i)a)b"#, "i");
    // p
}

#[test]
fn test_p509() {
    let regex = Regex::xpath(r#"(?:(?-i)a)b"#, "i");
    // p
}

#[test]
fn test_p510() {
    let regex = Regex::xpath(r#"((?-i)a)b"#, "i");
    // p
}

#[test]
fn test_p511() {
    let regex = Regex::xpath(r#"(?:(?-i)a)b"#, "i");
    // p
}

#[test]
fn test_p512() {
    let regex = Regex::xpath(r#"((?-i)a)b"#, "i");
    // p
}

#[test]
fn test_p513() {
    let regex = Regex::xpath(r#"(?:(?-i)a)b"#, "i");
    // p
}

#[test]
fn test_p514() {
    let regex = Regex::xpath(r#"((?-i)a)b"#, "i");
    // p
}

#[test]
fn test_p515() {
    let regex = Regex::xpath(r#"(?:(?-i)a)b"#, "i");
    // p
}

#[test]
fn test_p516() {
    let regex = Regex::xpath(r#"((?-i)a)b"#, "i");
    // p
}

#[test]
fn test_p517() {
    let regex = Regex::xpath(r#"(?-i:a)b"#, "i");
    // p
}

#[test]
fn test_p518() {
    let regex = Regex::xpath(r#"((?-i:a))b"#, "i");
    // p
}

#[test]
fn test_p519() {
    let regex = Regex::xpath(r#"(?-i:a)b"#, "i");
    // p
}

#[test]
fn test_p520() {
    let regex = Regex::xpath(r#"((?-i:a))b"#, "i");
    // p
}

#[test]
fn test_p521() {
    let regex = Regex::xpath(r#"(?-i:a)b"#, "i");
    // p
}

#[test]
fn test_p522() {
    let regex = Regex::xpath(r#"((?-i:a))b"#, "i");
    // p
}

#[test]
fn test_p523() {
    let regex = Regex::xpath(r#"(?-i:a)b"#, "i");
    // p
}

#[test]
fn test_p524() {
    let regex = Regex::xpath(r#"((?-i:a))b"#, "i");
    // p
}

#[test]
fn test_p525() {
    let regex = Regex::xpath(r#"(?-i:a)b"#, "i");
    // p
}

#[test]
fn test_p526() {
    let regex = Regex::xpath(r#"((?-i:a))b"#, "i");
    // p
}

#[test]
fn test_p527() {
    let regex = Regex::xpath(r#"((?-i:a.))b"#, "i");
    // p
}

#[test]
fn test_p528() {
    let regex = Regex::xpath(r#"((?-i:a\N))b"#, "i");
    // p
}

#[test]
fn test_p529() {
    let regex = Regex::xpath(r#"((?s-i:a.))b"#, "i");
    // p
}

#[test]
fn test_p530() {
    let regex = Regex::xpath(r#"((?s-i:a\N))b"#, "i");
    // p
}

#[test]
fn test_p531() {
    let regex = Regex::xpath(r#"((?s-i:a.))b"#, "i");
    // p
}

#[test]
fn test_p532() {
    let regex = Regex::xpath(r#"((?s-i:a\N))b"#, "i");
    // p
}

#[test]
fn test_p533() {
    let regex = Regex::xpath(r#"(?:c|d)(?:)(?:a(?:)(?:b)(?:b(?:))(?:b(?:)(?:b)))"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"cabbbb"#));
}

#[test]
fn test_p534() {
    let regex = Regex::xpath(
        r#"(?:c|d)(?:)(?:aaaaaaaa(?:)(?:bbbbbbbb)(?:bbbbbbbb(?:))(?:bbbbbbbb(?:)(?:bbbbbbbb)))"#,
        "",
    );
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"caaaaaaaabbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb"#));
}

#[test]
fn test_p535() {
    let regex = Regex::xpath(r#"(ab)\d\1"#, "i");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"Ab4ab"#));
}

#[test]
fn test_p536() {
    let regex = Regex::xpath(r#"(ab)\d\1"#, "i");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"ab4Ab"#));
}

#[test]
fn test_p537() {
    let regex = Regex::xpath(r#"foo\w*\d{4}baz"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"foobar1234baz"#));
}

#[test]
fn test_p538() {
    let regex = Regex::xpath(r#"a(?{})b"#, "");
    // p
}

#[test]
fn test_p539() {
    let regex = Regex::xpath(r#"a(?{f()+"#, "");
    // c
}

#[test]
fn test_p540() {
    let regex = Regex::xpath(r#"a(?{{1}+"#, "");
    // c
}

#[test]
fn test_p541() {
    let regex = Regex::xpath(r#"a(?{}})b"#, "");
    // c
}

#[test]
fn test_p542() {
    let regex = Regex::xpath(r#"a(?{"{"})b"#, "");
    // p
}

#[test]
fn test_p543() {
    let regex = Regex::xpath(r#"a(?{"\{"})b"#, "");
    // p
}

#[test]
fn test_p544() {
    let regex = Regex::xpath(r#"a(?{"{"}})b"#, "");
    // c
}

#[test]
fn test_p545() {
    let regex = Regex::xpath(r#"a(?{$::bl="\{"}).b"#, "");
    // p
}

#[test]
fn test_p546() {
    let regex = Regex::xpath(r#"x(~~)*(?:(?:F)?)?"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"x~~"#));
}

#[test]
fn test_p547() {
    let regex = Regex::xpath(r#"^a(?#xxx){3}c"#, "");
    // p
}

#[test]
fn test_p548() {
    let regex = Regex::xpath(r#"^a (?#xxx) (?#yyy) {3}c"#, "x");
    // p
}

#[test]
fn test_p549() {
    let regex = Regex::xpath(r#"(?<![cd])b"#, "");
    // p
}

#[test]
fn test_p550() {
    let regex = Regex::xpath(r#"(?<![cd])[ab]"#, "");
    // p
}

#[test]
fn test_p551() {
    let regex = Regex::xpath(r#"(?<!(c|d))b"#, "");
    // p
}

#[test]
fn test_p552() {
    let regex = Regex::xpath(r#"(?<!(c|d))[ab]"#, "");
    // p
}

#[test]
fn test_p553() {
    let regex = Regex::xpath(r#"(?<!cd)[ab]"#, "");
    // p
}

#[test]
fn test_p554() {
    let regex = Regex::xpath(r#"^(?:a?b?)*$"#, "");
    // n
    let regex = regex.unwrap();
    assert!(!regex.is_match(r#"a--"#));
}

#[test]
fn test_p555() {
    let regex = Regex::xpath(r#"((?s)^a(.))((?m)^b$)"#, "");
    // p
}

#[test]
fn test_p556() {
    let regex = Regex::xpath(r#"((?m)^b$)"#, "");
    // p
}

#[test]
fn test_p557() {
    let regex = Regex::xpath(r#"(?m)^b"#, "");
    // p
}

#[test]
fn test_p558() {
    let regex = Regex::xpath(r#"(?m)^(b)"#, "");
    // p
}

#[test]
fn test_p559() {
    let regex = Regex::xpath(r#"((?m)^b)"#, "");
    // p
}

#[test]
fn test_p560() {
    let regex = Regex::xpath(r#"\n((?m)^b)"#, "");
    // p
}

#[test]
fn test_p561() {
    let regex = Regex::xpath(r#"((?s).)c(?!.)"#, "");
    // p
}

#[test]
fn test_p562() {
    let regex = Regex::xpath(r#"((?s).)c(?!.)"#, "");
    // p
}

#[test]
fn test_p563() {
    let regex = Regex::xpath(r#"((?s)b.)c(?!.)"#, "");
    // p
}

#[test]
fn test_p564() {
    let regex = Regex::xpath(r#"((?s)b.)c(?!.)"#, "");
    // p
}

#[test]
fn test_p565() {
    let regex = Regex::xpath(r#"((?s)b.)c(?!\N)"#, "");
    // p
}

#[test]
fn test_p566() {
    let regex = Regex::xpath(r#"(b.)c(?!\N)"#, "s");
    // p
}

#[test]
fn test_p567() {
    let regex = Regex::xpath(r#"^b"#, "");
    // n
    let regex = regex.unwrap();
    assert!(!regex.is_match(r#"a\nb\nc\n"#));
}

#[test]
fn test_p568() {
    let regex = Regex::xpath(r#"()^b"#, "");
    // n
    let regex = regex.unwrap();
    assert!(!regex.is_match(r#"a\nb\nc\n"#));
}

#[test]
fn test_p569() {
    let regex = Regex::xpath(r#"((?m)^b)"#, "");
    // p
}

#[test]
fn test_p570() {
    let regex = Regex::xpath(r#"(?(1)a|b)"#, "");
    // p
}

#[test]
fn test_p571() {
    let regex = Regex::xpath(r#"(?(1)b|a)"#, "");
    // p
}

#[test]
fn test_p572() {
    let regex = Regex::xpath(r#"(x)?(?(1)a|b)"#, "");
    // p
}

#[test]
fn test_p573() {
    let regex = Regex::xpath(r#"(x)?(?(1)b|a)"#, "");
    // p
}

#[test]
fn test_p574() {
    let regex = Regex::xpath(r#"()?(?(1)b|a)"#, "");
    // p
}

#[test]
fn test_p575() {
    let regex = Regex::xpath(r#"()(?(1)b|a)"#, "");
    // p
}

#[test]
fn test_p576() {
    let regex = Regex::xpath(r#"()?(?(1)a|b)"#, "");
    // p
}

#[test]
fn test_p577() {
    let regex = Regex::xpath(r#"^(\()?blah(?(1)(\)))$"#, "");
    // p
}

#[test]
fn test_p578() {
    let regex = Regex::xpath(r#"^(\()?blah(?(1)(\)))$"#, "");
    // p
}

#[test]
fn test_p579() {
    let regex = Regex::xpath(r#"^(\()?blah(?(1)(\)))$"#, "");
    // p
}

#[test]
fn test_p580() {
    let regex = Regex::xpath(r#"^(\()?blah(?(1)(\)))$"#, "");
    // p
}

#[test]
fn test_p581() {
    let regex = Regex::xpath(r#"^(\(+)?blah(?(1)(\)))$"#, "");
    // p
}

#[test]
fn test_p582() {
    let regex = Regex::xpath(r#"^(\(+)?blah(?(1)(\)))$"#, "");
    // p
}

#[test]
fn test_p583() {
    let regex = Regex::xpath(r#"^(\(+)?blah(?(1)(\)))$"#, "");
    // p
}

#[test]
fn test_p584() {
    let regex = Regex::xpath(r#"^(\(+)?blah(?(1)(\)))$"#, "");
    // p
}

#[test]
fn test_p585() {
    let regex = Regex::xpath(r#"(?(1?)a|b)"#, "");
    // c
}

#[test]
fn test_p586() {
    let regex = Regex::xpath(r#"(?(1)a|b|c)"#, "");
    // c
}

#[test]
fn test_p587() {
    let regex = Regex::xpath(r#"(?(?{0})a|b)"#, "");
    // p
}

#[test]
fn test_p588() {
    let regex = Regex::xpath(r#"(?(?{0})b|a)"#, "");
    // p
}

#[test]
fn test_p589() {
    let regex = Regex::xpath(r#"(?(?{1})b|a)"#, "");
    // p
}

#[test]
fn test_p590() {
    let regex = Regex::xpath(r#"(?(?{1})a|b)"#, "");
    // p
}

#[test]
fn test_p591() {
    let regex = Regex::xpath(r#"(?(?!a)a|b)"#, "");
    // p
}

#[test]
fn test_p592() {
    let regex = Regex::xpath(r#"(?(?!a)b|a)"#, "");
    // p
}

#[test]
fn test_p593() {
    let regex = Regex::xpath(r#"(?(?=a)b|a)"#, "");
    // p
}

#[test]
fn test_p594() {
    let regex = Regex::xpath(r#"(?(?=a)a|b)"#, "");
    // p
}

#[test]
fn test_p595() {
    let regex = Regex::xpath(r#"(?(?!\x{100})\x{100}|b)"#, "");
    // p
}

#[test]
fn test_p596() {
    let regex = Regex::xpath(r#"(?(?!\x{100})b|\x{100})"#, "");
    // p
}

#[test]
fn test_p597() {
    let regex = Regex::xpath(r#"(?(?=\x{100})b|\x{100})"#, "");
    // p
}

#[test]
fn test_p598() {
    let regex = Regex::xpath(r#"(?(?=\x{100})\x{100}|b)"#, "");
    // p
}

#[test]
fn test_p599() {
    let regex = Regex::xpath(r#"(?=(a+?))(\1ab)"#, "");
    // p
}

#[test]
fn test_p600() {
    let regex = Regex::xpath(r#"^(?=(a+?))\1ab"#, "");
    // p
}

#[test]
fn test_p601() {
    let regex = Regex::xpath(r#"(\w+:)+"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"one:"#));
}

#[test]
fn test_p602() {
    let regex = Regex::xpath(r#"$(?<=^(a))"#, "");
    // p
}

#[test]
fn test_p603() {
    let regex = Regex::xpath(r#"(?=(a+?))(\1ab)"#, "");
    // p
}

#[test]
fn test_p604() {
    let regex = Regex::xpath(r#"^(?=(a+?))\1ab"#, "");
    // p
}

#[test]
fn test_p605() {
    let regex = Regex::xpath(r#"([\w:]+::)?(\w+)$"#, "");
    // n
    let regex = regex.unwrap();
    assert!(!regex.is_match(r#"abcd:"#));
}

#[test]
fn test_p606() {
    let regex = Regex::xpath(r#"([\w:]+::)?(\w+)$"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"abcd"#));
}

#[test]
fn test_p607() {
    let regex = Regex::xpath(r#"([\w:]+::)?(\w+)$"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"xy:z:::abcd"#));
}

#[test]
fn test_p608() {
    let regex = Regex::xpath(r#"^[^bcd]*(c+)"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"aexycd"#));
}

#[test]
fn test_p609() {
    let regex = Regex::xpath(r#"(a*)b+"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"caab"#));
}

#[test]
fn test_p610() {
    let regex = Regex::xpath(r#"([\w:]+::)?(\w+)$"#, "");
    // n
    let regex = regex.unwrap();
    assert!(!regex.is_match(r#"abcd:"#));
}

#[test]
fn test_p611() {
    let regex = Regex::xpath(r#"([\w:]+::)?(\w+)$"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"abcd"#));
}

#[test]
fn test_p612() {
    let regex = Regex::xpath(r#"([\w:]+::)?(\w+)$"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"xy:z:::abcd"#));
}

#[test]
fn test_p613() {
    let regex = Regex::xpath(r#"^[^bcd]*(c+)"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"aexycd"#));
}

#[test]
fn test_p614() {
    let regex = Regex::xpath(r#"(?{$a=2})a*aa(?{local$a=$a+1})k*c(?{$b=$a})"#, "");
    // p
}

#[test]
fn test_p615() {
    let regex = Regex::xpath(r#"(?{$a=2})(a(?{local$a=$a+1}))*aak*c(?{$b=$a})"#, "");
    // p
}

#[test]
fn test_p617() {
    let regex = Regex::xpath(r#"^(a(?{ "x" =~ m{x}})b)(??{ $1 })"#, "");
    // p
}

#[test]
fn test_p618() {
    let regex = Regex::xpath(r#"(>a+)ab"#, "");
    // n
    let regex = regex.unwrap();
    assert!(!regex.is_match(r#"aaab"#));
}

#[test]
fn test_p619() {
    let regex = Regex::xpath(r#"(?>a+)b"#, "");
    // p
}

#[test]
fn test_p620() {
    let regex = Regex::xpath(r#"([[:]+)"#, "");
    // p
}

#[test]
fn test_p621() {
    let regex = Regex::xpath(r#"([[=]+)"#, "");
    // p
}

#[test]
fn test_p622() {
    let regex = Regex::xpath(r#"([[.]+)"#, "");
    // p
}

#[test]
fn test_p623() {
    let regex = Regex::xpath(r#"[a[:xyz:"#, "");
    // c
}

#[test]
fn test_p624() {
    let regex = Regex::xpath(r#"[a[:xyz:]"#, "");
    // c
}

#[test]
fn test_p625() {
    let regex = Regex::xpath(r#"[a[:]b[:c]"#, "");
    // p
}

#[test]
fn test_p626() {
    let regex = Regex::xpath(r#"([a[:xyz:]b]+)"#, "");
    // c
}

#[test]
fn test_p653() {
    let regex = Regex::xpath(r#"[[:foo:]]"#, "");
    // c
}

#[test]
fn test_p654() {
    let regex = Regex::xpath(r#"[[:^foo:]]"#, "");
    // c
}

#[test]
fn test_p655() {
    let regex = Regex::xpath(r#"((?>a+)b)"#, "");
    // p
}

#[test]
fn test_p656() {
    let regex = Regex::xpath(r#"(?>(a+))b"#, "");
    // p
}

#[test]
fn test_p657() {
    let regex = Regex::xpath(r#"((?>[^()]+)|\([^()]*\))+"#, "");
    // p
}

#[test]
fn test_p658() {
    let regex = Regex::xpath(r#"(?<=x+)y"#, "");
    // c
}

#[test]
fn test_p659() {
    let regex = Regex::xpath(r#"((def){37,17})?ABC"#, "");
    // p
}

#[test]
fn test_p660() {
    let regex = Regex::xpath(r#"\Z"#, "");
    // p
}

#[test]
fn test_p661() {
    let regex = Regex::xpath(r#"\z"#, "");
    // p
}

#[test]
fn test_p662() {
    let regex = Regex::xpath(r#"$"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"a\nb\n"#));
}

#[test]
fn test_p663() {
    let regex = Regex::xpath(r#"\Z"#, "");
    // p
}

#[test]
fn test_p664() {
    let regex = Regex::xpath(r#"\z"#, "");
    // p
}

#[test]
fn test_p665() {
    let regex = Regex::xpath(r#"$"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"b\na\n"#));
}

#[test]
fn test_p666() {
    let regex = Regex::xpath(r#"\Z"#, "");
    // p
}

#[test]
fn test_p667() {
    let regex = Regex::xpath(r#"\z"#, "");
    // p
}

#[test]
fn test_p668() {
    let regex = Regex::xpath(r#"$"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"b\na"#));
}

#[test]
fn test_p669() {
    let regex = Regex::xpath(r#"\Z"#, "m");
    // p
}

#[test]
fn test_p670() {
    let regex = Regex::xpath(r#"\z"#, "m");
    // p
}

#[test]
fn test_p671() {
    let regex = Regex::xpath(r#"$"#, "m");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(
        r#"a
b
"#
    ));
}

#[test]
fn test_p672() {
    let regex = Regex::xpath(r#"\Z"#, "m");
    // p
}

#[test]
fn test_p673() {
    let regex = Regex::xpath(r#"\z"#, "m");
    // p
}

#[test]
fn test_p674() {
    let regex = Regex::xpath(r#"$"#, "m");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(
        r#"b
a
"#
    ));
}

#[test]
fn test_p675() {
    let regex = Regex::xpath(r#"\Z"#, "m");
    // p
}

#[test]
fn test_p676() {
    let regex = Regex::xpath(r#"\z"#, "m");
    // p
}

#[test]
fn test_p677() {
    let regex = Regex::xpath(r#"$"#, "m");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(
        r#"b
a"#
    ));
}

#[test]
fn test_p678() {
    let regex = Regex::xpath(r#"a\Z"#, "");
    // p
}

#[test]
fn test_p679() {
    let regex = Regex::xpath(r#"a\z"#, "");
    // p
}

#[test]
fn test_p680() {
    let regex = Regex::xpath(r#"a$"#, "");
    // n
    let regex = regex.unwrap();
    assert!(!regex.is_match(
        r#"a
b
"#
    ));
}

#[test]
fn test_p681() {
    let regex = Regex::xpath(r#"a\Z"#, "");
    // p
}

#[test]
fn test_p682() {
    let regex = Regex::xpath(r#"a\z"#, "");
    // p
}

#[test]
fn test_p683() {
    let regex = Regex::xpath(r#"a$"#, "");
    // n
    let regex = regex.unwrap();
    assert!(!regex.is_match(
        r#"b
a
"#
    ));
}

#[test]
fn test_p684() {
    let regex = Regex::xpath(r#"a\Z"#, "");
    // p
}

#[test]
fn test_p685() {
    let regex = Regex::xpath(r#"a\z"#, "");
    // p
}

#[test]
fn test_p686() {
    let regex = Regex::xpath(r#"a$"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(
        r#"b
a"#
    ));
}

#[test]
fn test_p687() {
    let regex = Regex::xpath(r#"a\Z"#, "m");
    // p
}

#[test]
fn test_p688() {
    let regex = Regex::xpath(r#"a\z"#, "m");
    // p
}

#[test]
fn test_p689() {
    let regex = Regex::xpath(r#"a$"#, "m");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(
        r#"a
b
"#
    ));
}

#[test]
fn test_p690() {
    let regex = Regex::xpath(r#"a\Z"#, "m");
    // p
}

#[test]
fn test_p691() {
    let regex = Regex::xpath(r#"a\z"#, "m");
    // p
}

#[test]
fn test_p692() {
    let regex = Regex::xpath(r#"a$"#, "m");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(
        r#"b
a
"#
    ));
}

#[test]
fn test_p693() {
    let regex = Regex::xpath(r#"a\Z"#, "m");
    // p
}

#[test]
fn test_p694() {
    let regex = Regex::xpath(r#"a\z"#, "m");
    // p
}

#[test]
fn test_p695() {
    let regex = Regex::xpath(r#"a$"#, "m");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(
        r#"b
a"#
    ));
}

#[test]
fn test_p696() {
    let regex = Regex::xpath(r#"aa\Z"#, "");
    // p
}

#[test]
fn test_p697() {
    let regex = Regex::xpath(r#"aa\z"#, "");
    // p
}

#[test]
fn test_p698() {
    let regex = Regex::xpath(r#"aa$"#, "");
    // n
    let regex = regex.unwrap();
    assert!(!regex.is_match(
        r#"aa
b
"#
    ));
}

#[test]
fn test_p699() {
    let regex = Regex::xpath(r#"aa\Z"#, "");
    // p
}

#[test]
fn test_p700() {
    let regex = Regex::xpath(r#"aa\z"#, "");
    // p
}

#[test]
fn test_p701() {
    let regex = Regex::xpath(r#"aa$"#, "");
    // n
    let regex = regex.unwrap();
    assert!(!regex.is_match(
        r#"b
aa
"#
    ));
}

#[test]
fn test_p702() {
    let regex = Regex::xpath(r#"aa\Z"#, "");
    // p
}

#[test]
fn test_p703() {
    let regex = Regex::xpath(r#"aa\z"#, "");
    // p
}

#[test]
fn test_p704() {
    let regex = Regex::xpath(r#"aa$"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(
        r#"b
aa"#
    ));
}

#[test]
fn test_p705() {
    let regex = Regex::xpath(r#"aa\Z"#, "m");
    // p
}

#[test]
fn test_p706() {
    let regex = Regex::xpath(r#"aa\z"#, "m");
    // p
}

#[test]
fn test_p707() {
    let regex = Regex::xpath(r#"aa$"#, "m");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(
        r#"aa
b
"#
    ));
}

#[test]
fn test_p708() {
    let regex = Regex::xpath(r#"aa\Z"#, "m");
    // p
}

#[test]
fn test_p709() {
    let regex = Regex::xpath(r#"aa\z"#, "m");
    // p
}

#[test]
fn test_p710() {
    let regex = Regex::xpath(r#"aa$"#, "m");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(
        r#"b
aa
"#
    ));
}

#[test]
fn test_p711() {
    let regex = Regex::xpath(r#"aa\Z"#, "m");
    // p
}

#[test]
fn test_p712() {
    let regex = Regex::xpath(r#"aa\z"#, "m");
    // p
}

#[test]
fn test_p713() {
    let regex = Regex::xpath(r#"aa$"#, "m");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(
        r#"b
aa"#
    ));
}

#[test]
fn test_p714() {
    let regex = Regex::xpath(r#"aa\Z"#, "");
    // p
}

#[test]
fn test_p715() {
    let regex = Regex::xpath(r#"aa\z"#, "");
    // p
}

#[test]
fn test_p716() {
    let regex = Regex::xpath(r#"aa$"#, "");
    // n
    let regex = regex.unwrap();
    assert!(!regex.is_match(
        r#"ac
b
"#
    ));
}

#[test]
fn test_p717() {
    let regex = Regex::xpath(r#"aa\Z"#, "");
    // p
}

#[test]
fn test_p718() {
    let regex = Regex::xpath(r#"aa\z"#, "");
    // p
}

#[test]
fn test_p719() {
    let regex = Regex::xpath(r#"aa$"#, "");
    // n
    let regex = regex.unwrap();
    assert!(!regex.is_match(
        r#"b
ac
"#
    ));
}

#[test]
fn test_p720() {
    let regex = Regex::xpath(r#"aa\Z"#, "");
    // p
}

#[test]
fn test_p721() {
    let regex = Regex::xpath(r#"aa\z"#, "");
    // p
}

#[test]
fn test_p722() {
    let regex = Regex::xpath(r#"aa$"#, "");
    // n
    let regex = regex.unwrap();
    assert!(!regex.is_match(
        r#"b
ac"#
    ));
}

#[test]
fn test_p723() {
    let regex = Regex::xpath(r#"aa\Z"#, "m");
    // p
}

#[test]
fn test_p724() {
    let regex = Regex::xpath(r#"aa\z"#, "m");
    // p
}

#[test]
fn test_p725() {
    let regex = Regex::xpath(r#"aa$"#, "m");
    // n
    let regex = regex.unwrap();
    assert!(!regex.is_match(
        r#"ac
b
"#
    ));
}

#[test]
fn test_p726() {
    let regex = Regex::xpath(r#"aa\Z"#, "m");
    // p
}

#[test]
fn test_p727() {
    let regex = Regex::xpath(r#"aa\z"#, "m");
    // p
}

#[test]
fn test_p728() {
    let regex = Regex::xpath(r#"aa$"#, "m");
    // n
    let regex = regex.unwrap();
    assert!(!regex.is_match(
        r#"b
ac
"#
    ));
}

#[test]
fn test_p729() {
    let regex = Regex::xpath(r#"aa\Z"#, "m");
    // p
}

#[test]
fn test_p730() {
    let regex = Regex::xpath(r#"aa\z"#, "m");
    // p
}

#[test]
fn test_p731() {
    let regex = Regex::xpath(r#"aa$"#, "m");
    // n
    let regex = regex.unwrap();
    assert!(!regex.is_match(
        r#"b
ac"#
    ));
}

#[test]
fn test_p732() {
    let regex = Regex::xpath(r#"aa\Z"#, "");
    // p
}

#[test]
fn test_p733() {
    let regex = Regex::xpath(r#"aa\z"#, "");
    // p
}

#[test]
fn test_p734() {
    let regex = Regex::xpath(r#"aa$"#, "");
    // n
    let regex = regex.unwrap();
    assert!(!regex.is_match(
        r#"ca
b
"#
    ));
}

#[test]
fn test_p735() {
    let regex = Regex::xpath(r#"aa\Z"#, "");
    // p
}

#[test]
fn test_p736() {
    let regex = Regex::xpath(r#"aa\z"#, "");
    // p
}

#[test]
fn test_p737() {
    let regex = Regex::xpath(r#"aa$"#, "");
    // n
    let regex = regex.unwrap();
    assert!(!regex.is_match(
        r#"b
ca
"#
    ));
}

#[test]
fn test_p738() {
    let regex = Regex::xpath(r#"aa\Z"#, "");
    // p
}

#[test]
fn test_p739() {
    let regex = Regex::xpath(r#"aa\z"#, "");
    // p
}

#[test]
fn test_p740() {
    let regex = Regex::xpath(r#"aa$"#, "");
    // n
    let regex = regex.unwrap();
    assert!(!regex.is_match(
        r#"b
ca"#
    ));
}

#[test]
fn test_p741() {
    let regex = Regex::xpath(r#"aa\Z"#, "m");
    // p
}

#[test]
fn test_p742() {
    let regex = Regex::xpath(r#"aa\z"#, "m");
    // p
}

#[test]
fn test_p743() {
    let regex = Regex::xpath(r#"aa$"#, "m");
    // n
    let regex = regex.unwrap();
    assert!(!regex.is_match(
        r#"ca
b
"#
    ));
}

#[test]
fn test_p744() {
    let regex = Regex::xpath(r#"aa\Z"#, "m");
    // p
}

#[test]
fn test_p745() {
    let regex = Regex::xpath(r#"aa\z"#, "m");
    // p
}

#[test]
fn test_p746() {
    let regex = Regex::xpath(r#"aa$"#, "m");
    // n
    let regex = regex.unwrap();
    assert!(!regex.is_match(
        r#"b
ca
"#
    ));
}

#[test]
fn test_p747() {
    let regex = Regex::xpath(r#"aa\Z"#, "m");
    // p
}

#[test]
fn test_p748() {
    let regex = Regex::xpath(r#"aa\z"#, "m");
    // p
}

#[test]
fn test_p749() {
    let regex = Regex::xpath(r#"aa$"#, "m");
    // n
    let regex = regex.unwrap();
    assert!(!regex.is_match(
        r#"b
ca"#
    ));
}

#[test]
fn test_p750() {
    let regex = Regex::xpath(r#"ab\Z"#, "");
    // p
}

#[test]
fn test_p751() {
    let regex = Regex::xpath(r#"ab\z"#, "");
    // p
}

#[test]
fn test_p752() {
    let regex = Regex::xpath(r#"ab$"#, "");
    // n
    let regex = regex.unwrap();
    assert!(!regex.is_match(
        r#"ab
b
"#
    ));
}

#[test]
fn test_p753() {
    let regex = Regex::xpath(r#"ab\Z"#, "");
    // p
}

#[test]
fn test_p754() {
    let regex = Regex::xpath(r#"ab\z"#, "");
    // p
}

#[test]
fn test_p755() {
    let regex = Regex::xpath(r#"ab$"#, "");
    // n
    let regex = regex.unwrap();
    assert!(!regex.is_match(
        r#"b
ab
"#
    ));
}

#[test]
fn test_p756() {
    let regex = Regex::xpath(r#"ab\Z"#, "");
    // p
}

#[test]
fn test_p757() {
    let regex = Regex::xpath(r#"ab\z"#, "");
    // p
}

#[test]
fn test_p758() {
    let regex = Regex::xpath(r#"ab$"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(
        r#"b
ab"#
    ));
}

#[test]
fn test_p759() {
    let regex = Regex::xpath(r#"ab\Z"#, "m");
    // p
}

#[test]
fn test_p760() {
    let regex = Regex::xpath(r#"ab\z"#, "m");
    // p
}

#[test]
fn test_p761() {
    let regex = Regex::xpath(r#"ab$"#, "m");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(
        r#"ab
b
"#
    ));
}

#[test]
fn test_p762() {
    let regex = Regex::xpath(r#"ab\Z"#, "m");
    // p
}

#[test]
fn test_p763() {
    let regex = Regex::xpath(r#"ab\z"#, "m");
    // p
}

#[test]
fn test_p764() {
    let regex = Regex::xpath(r#"ab$"#, "m");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(
        r#"b
ab
"#
    ));
}

#[test]
fn test_p765() {
    let regex = Regex::xpath(r#"ab\Z"#, "m");
    // p
}

#[test]
fn test_p766() {
    let regex = Regex::xpath(r#"ab\z"#, "m");
    // p
}

#[test]
fn test_p767() {
    let regex = Regex::xpath(r#"ab$"#, "m");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(
        r#"b
ab"#
    ));
}

#[test]
fn test_p768() {
    let regex = Regex::xpath(r#"ab\Z"#, "");
    // p
}

#[test]
fn test_p769() {
    let regex = Regex::xpath(r#"ab\z"#, "");
    // p
}

#[test]
fn test_p770() {
    let regex = Regex::xpath(r#"ab$"#, "");
    // n
    let regex = regex.unwrap();
    assert!(!regex.is_match(
        r#"ac
b
"#
    ));
}

#[test]
fn test_p771() {
    let regex = Regex::xpath(r#"ab\Z"#, "");
    // p
}

#[test]
fn test_p772() {
    let regex = Regex::xpath(r#"ab\z"#, "");
    // p
}

#[test]
fn test_p773() {
    let regex = Regex::xpath(r#"ab$"#, "");
    // n
    let regex = regex.unwrap();
    assert!(!regex.is_match(
        r#"b
ac
"#
    ));
}

#[test]
fn test_p774() {
    let regex = Regex::xpath(r#"ab\Z"#, "");
    // p
}

#[test]
fn test_p775() {
    let regex = Regex::xpath(r#"ab\z"#, "");
    // p
}

#[test]
fn test_p776() {
    let regex = Regex::xpath(r#"ab$"#, "");
    // n
    let regex = regex.unwrap();
    assert!(!regex.is_match(
        r#"b
ac"#
    ));
}

#[test]
fn test_p777() {
    let regex = Regex::xpath(r#"ab\Z"#, "m");
    // p
}

#[test]
fn test_p778() {
    let regex = Regex::xpath(r#"ab\z"#, "m");
    // p
}

#[test]
fn test_p779() {
    let regex = Regex::xpath(r#"ab$"#, "m");
    // n
    let regex = regex.unwrap();
    assert!(!regex.is_match(
        r#"ac
b
"#
    ));
}

#[test]
fn test_p780() {
    let regex = Regex::xpath(r#"ab\Z"#, "m");
    // p
}

#[test]
fn test_p781() {
    let regex = Regex::xpath(r#"ab\z"#, "m");
    // p
}

#[test]
fn test_p782() {
    let regex = Regex::xpath(r#"ab$"#, "m");
    // n
    let regex = regex.unwrap();
    assert!(!regex.is_match(
        r#"b
ac
"#
    ));
}

#[test]
fn test_p783() {
    let regex = Regex::xpath(r#"ab\Z"#, "m");
    // p
}

#[test]
fn test_p784() {
    let regex = Regex::xpath(r#"ab\z"#, "m");
    // p
}

#[test]
fn test_p785() {
    let regex = Regex::xpath(r#"ab$"#, "m");
    // n
    let regex = regex.unwrap();
    assert!(!regex.is_match(
        r#"b
ac"#
    ));
}

#[test]
fn test_p786() {
    let regex = Regex::xpath(r#"ab\Z"#, "");
    // p
}

#[test]
fn test_p787() {
    let regex = Regex::xpath(r#"ab\z"#, "");
    // p
}

#[test]
fn test_p788() {
    let regex = Regex::xpath(r#"ab$"#, "");
    // n
    let regex = regex.unwrap();
    assert!(!regex.is_match(
        r#"ca
b
"#
    ));
}

#[test]
fn test_p789() {
    let regex = Regex::xpath(r#"ab\Z"#, "");
    // p
}

#[test]
fn test_p790() {
    let regex = Regex::xpath(r#"ab\z"#, "");
    // p
}

#[test]
fn test_p791() {
    let regex = Regex::xpath(r#"ab$"#, "");
    // n
    let regex = regex.unwrap();
    assert!(!regex.is_match(
        r#"b
ca
"#
    ));
}

#[test]
fn test_p792() {
    let regex = Regex::xpath(r#"ab\Z"#, "");
    // p
}

#[test]
fn test_p793() {
    let regex = Regex::xpath(r#"ab\z"#, "");
    // p
}

#[test]
fn test_p794() {
    let regex = Regex::xpath(r#"ab$"#, "");
    // n
    let regex = regex.unwrap();
    assert!(!regex.is_match(
        r#"b
ca"#
    ));
}

#[test]
fn test_p795() {
    let regex = Regex::xpath(r#"ab\Z"#, "m");
    // p
}

#[test]
fn test_p796() {
    let regex = Regex::xpath(r#"ab\z"#, "m");
    // p
}

#[test]
fn test_p797() {
    let regex = Regex::xpath(r#"ab$"#, "m");
    // n
    let regex = regex.unwrap();
    assert!(!regex.is_match(
        r#"ca
b
"#
    ));
}

#[test]
fn test_p798() {
    let regex = Regex::xpath(r#"ab\Z"#, "m");
    // p
}

#[test]
fn test_p799() {
    let regex = Regex::xpath(r#"ab\z"#, "m");
    // p
}

#[test]
fn test_p800() {
    let regex = Regex::xpath(r#"ab$"#, "m");
    // n
    let regex = regex.unwrap();
    assert!(!regex.is_match(
        r#"b
ca
"#
    ));
}

#[test]
fn test_p801() {
    let regex = Regex::xpath(r#"ab\Z"#, "m");
    // p
}

#[test]
fn test_p802() {
    let regex = Regex::xpath(r#"ab\z"#, "m");
    // p
}

#[test]
fn test_p803() {
    let regex = Regex::xpath(r#"ab$"#, "m");
    // n
    let regex = regex.unwrap();
    assert!(!regex.is_match(
        r#"b
ca"#
    ));
}

#[test]
fn test_p804() {
    let regex = Regex::xpath(r#"abb\Z"#, "");
    // p
}

#[test]
fn test_p805() {
    let regex = Regex::xpath(r#"abb\z"#, "");
    // p
}

#[test]
fn test_p806() {
    let regex = Regex::xpath(r#"abb$"#, "");
    // n
    let regex = regex.unwrap();
    assert!(!regex.is_match(
        r#"abb
b
"#
    ));
}

#[test]
fn test_p807() {
    let regex = Regex::xpath(r#"abb\Z"#, "");
    // p
}

#[test]
fn test_p808() {
    let regex = Regex::xpath(r#"abb\z"#, "");
    // p
}

#[test]
fn test_p809() {
    let regex = Regex::xpath(r#"abb$"#, "");
    // n
    let regex = regex.unwrap();
    assert!(!regex.is_match(
        r#"b
abb
"#
    ));
}

#[test]
fn test_p810() {
    let regex = Regex::xpath(r#"abb\Z"#, "");
    // p
}

#[test]
fn test_p811() {
    let regex = Regex::xpath(r#"abb\z"#, "");
    // p
}

#[test]
fn test_p812() {
    let regex = Regex::xpath(r#"abb$"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(
        r#"b
abb"#
    ));
}

#[test]
fn test_p813() {
    let regex = Regex::xpath(r#"abb\Z"#, "m");
    // p
}

#[test]
fn test_p814() {
    let regex = Regex::xpath(r#"abb\z"#, "m");
    // p
}

#[test]
fn test_p815() {
    let regex = Regex::xpath(r#"abb$"#, "m");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(
        r#"abb
b
"#
    ));
}

#[test]
fn test_p816() {
    let regex = Regex::xpath(r#"abb\Z"#, "m");
    // p
}

#[test]
fn test_p817() {
    let regex = Regex::xpath(r#"abb\z"#, "m");
    // p
}

#[test]
fn test_p818() {
    let regex = Regex::xpath(r#"abb$"#, "m");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(
        r#"b
abb
"#
    ));
}

#[test]
fn test_p819() {
    let regex = Regex::xpath(r#"abb\Z"#, "m");
    // p
}

#[test]
fn test_p820() {
    let regex = Regex::xpath(r#"abb\z"#, "m");
    // p
}

#[test]
fn test_p821() {
    let regex = Regex::xpath(r#"abb$"#, "m");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(
        r#"b
abb"#
    ));
}

#[test]
fn test_p822() {
    let regex = Regex::xpath(r#"abb\Z"#, "");
    // p
}

#[test]
fn test_p823() {
    let regex = Regex::xpath(r#"abb\z"#, "");
    // p
}

#[test]
fn test_p824() {
    let regex = Regex::xpath(r#"abb$"#, "");
    // n
    let regex = regex.unwrap();
    assert!(!regex.is_match(
        r#"ac
b
"#
    ));
}

#[test]
fn test_p825() {
    let regex = Regex::xpath(r#"abb\Z"#, "");
    // p
}

#[test]
fn test_p826() {
    let regex = Regex::xpath(r#"abb\z"#, "");
    // p
}

#[test]
fn test_p827() {
    let regex = Regex::xpath(r#"abb$"#, "");
    // n
    let regex = regex.unwrap();
    assert!(!regex.is_match(
        r#"b
ac
"#
    ));
}

#[test]
fn test_p828() {
    let regex = Regex::xpath(r#"abb\Z"#, "");
    // p
}

#[test]
fn test_p829() {
    let regex = Regex::xpath(r#"abb\z"#, "");
    // p
}

#[test]
fn test_p830() {
    let regex = Regex::xpath(r#"abb$"#, "");
    // n
    let regex = regex.unwrap();
    assert!(!regex.is_match(
        r#"b
ac"#
    ));
}

#[test]
fn test_p831() {
    let regex = Regex::xpath(r#"abb\Z"#, "m");
    // p
}

#[test]
fn test_p832() {
    let regex = Regex::xpath(r#"abb\z"#, "m");
    // p
}

#[test]
fn test_p833() {
    let regex = Regex::xpath(r#"abb$"#, "m");
    // n
    let regex = regex.unwrap();
    assert!(!regex.is_match(
        r#"ac
b
"#
    ));
}

#[test]
fn test_p834() {
    let regex = Regex::xpath(r#"abb\Z"#, "m");
    // p
}

#[test]
fn test_p835() {
    let regex = Regex::xpath(r#"abb\z"#, "m");
    // p
}

#[test]
fn test_p836() {
    let regex = Regex::xpath(r#"abb$"#, "m");
    // n
    let regex = regex.unwrap();
    assert!(!regex.is_match(
        r#"b
ac
"#
    ));
}

#[test]
fn test_p837() {
    let regex = Regex::xpath(r#"abb\Z"#, "m");
    // p
}

#[test]
fn test_p838() {
    let regex = Regex::xpath(r#"abb\z"#, "m");
    // p
}

#[test]
fn test_p839() {
    let regex = Regex::xpath(r#"abb$"#, "m");
    // n
    let regex = regex.unwrap();
    assert!(!regex.is_match(
        r#"b
ac"#
    ));
}

#[test]
fn test_p840() {
    let regex = Regex::xpath(r#"abb\Z"#, "");
    // p
}

#[test]
fn test_p841() {
    let regex = Regex::xpath(r#"abb\z"#, "");
    // p
}

#[test]
fn test_p842() {
    let regex = Regex::xpath(r#"abb$"#, "");
    // n
    let regex = regex.unwrap();
    assert!(!regex.is_match(
        r#"ca
b
"#
    ));
}

#[test]
fn test_p843() {
    let regex = Regex::xpath(r#"abb\Z"#, "");
    // p
}

#[test]
fn test_p844() {
    let regex = Regex::xpath(r#"abb\z"#, "");
    // p
}

#[test]
fn test_p845() {
    let regex = Regex::xpath(r#"abb$"#, "");
    // n
    let regex = regex.unwrap();
    assert!(!regex.is_match(
        r#"b
ca
"#
    ));
}

#[test]
fn test_p846() {
    let regex = Regex::xpath(r#"abb\Z"#, "");
    // p
}

#[test]
fn test_p847() {
    let regex = Regex::xpath(r#"abb\z"#, "");
    // p
}

#[test]
fn test_p848() {
    let regex = Regex::xpath(r#"abb$"#, "");
    // n
    let regex = regex.unwrap();
    assert!(!regex.is_match(
        r#"b
ca"#
    ));
}

#[test]
fn test_p849() {
    let regex = Regex::xpath(r#"abb\Z"#, "m");
    // p
}

#[test]
fn test_p850() {
    let regex = Regex::xpath(r#"abb\z"#, "m");
    // p
}

#[test]
fn test_p851() {
    let regex = Regex::xpath(r#"abb$"#, "m");
    // n
    let regex = regex.unwrap();
    assert!(!regex.is_match(
        r#"ca
b
"#
    ));
}

#[test]
fn test_p852() {
    let regex = Regex::xpath(r#"abb\Z"#, "m");
    // p
}

#[test]
fn test_p853() {
    let regex = Regex::xpath(r#"abb\z"#, "m");
    // p
}

#[test]
fn test_p854() {
    let regex = Regex::xpath(r#"abb$"#, "m");
    // n
    let regex = regex.unwrap();
    assert!(!regex.is_match(
        r#"b
ca
"#
    ));
}

#[test]
fn test_p855() {
    let regex = Regex::xpath(r#"abb\Z"#, "m");
    // p
}

#[test]
fn test_p856() {
    let regex = Regex::xpath(r#"abb\z"#, "m");
    // p
}

#[test]
fn test_p857() {
    let regex = Regex::xpath(r#"abb$"#, "m");
    // n
    let regex = regex.unwrap();
    assert!(!regex.is_match(
        r#"b
ca"#
    ));
}

#[test]
fn test_p858() {
    let regex = Regex::xpath(r#"\Aa$"#, "m");
    // p
}

#[test]
fn test_p859() {
    let regex = Regex::xpath(r#"(^|x)(c)"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"ca"#));
}

#[test]
fn test_p860() {
    let regex = Regex::xpath(r#"a*abc?xyz+pqr{3}ab{2,}xy{4,5}pq{0,6}AB{0,}zz"#, "");
    // n
    let regex = regex.unwrap();
    assert!(!regex.is_match(r#"x"#));
}

#[test]
fn test_p861() {
    let regex = Regex::xpath(r#"a(?{$a=2;$b=3;($b)=$a})b"#, "");
    // p
}

#[test]
fn test_p862() {
    let regex = Regex::xpath(r#"round\(((?>[^()]+))\)"#, "");
    // p
}

#[test]
fn test_p863() {
    let regex = Regex::xpath(r#"'((?x:.) )'"#, "");
    // p
}

#[test]
fn test_p864() {
    let regex = Regex::xpath(r#"((?-x:.) )"#, "x");
    // p
}

#[test]
fn test_p865() {
    let regex = Regex::xpath(r#"foo.bart"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"foo.bart"#));
}

#[test]
fn test_p866() {
    let regex = Regex::xpath(r#"^d[x][x][x]"#, "m");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(
        r#"abcd
dxxx"#
    ));
}

#[test]
fn test_p885() {
    let regex = Regex::xpath(r#"tt+$"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"xxxtt"#));
}

#[test]
fn test_p886() {
    let regex = Regex::xpath(r#"([a-\d]+)"#, "");
    // Sy
}

#[test]
fn test_p887() {
    let regex = Regex::xpath(r#"([a-\d]+)"#, "");
    // sc
}

#[test]
fn test_p888() {
    let regex = Regex::xpath(r#"([\d-z]+)"#, "");
    // Sy
}

#[test]
fn test_p889() {
    let regex = Regex::xpath(r#"([\d-z]+)"#, "");
    // sc
}

#[test]
fn test_p890() {
    let regex = Regex::xpath(r#"([\d-\s]+)"#, "");
    // Sy
}

#[test]
fn test_p891() {
    let regex = Regex::xpath(r#"([\d-\s]+)"#, "");
    // sc
}

#[test]
fn test_p892() {
    let regex = Regex::xpath(r#"([a-[:digit:]]+)"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"za-9z"#));
}

#[test]
fn test_p893() {
    let regex = Regex::xpath(r#"([a-[:digit:]]+)"#, "");
    // n
    let regex = regex.unwrap();
    assert!(!regex.is_match(r#"-"#));
}

#[test]
fn test_p894() {
    let regex = Regex::xpath(r#"([[:digit:]-z]+)"#, "");
    // Sy
}

#[test]
fn test_p895() {
    let regex = Regex::xpath(r#"([[:digit:]-z]+)"#, "");
    // sc
}

#[test]
fn test_p896() {
    let regex = Regex::xpath(r#"([[:digit:]-[:alpha:]]+)"#, "");
    // Sy
}

#[test]
fn test_p897() {
    let regex = Regex::xpath(r#"([[:digit:]-[:alpha:]]+)"#, "");
    // sc
}

#[test]
fn test_p898() {
    let regex = Regex::xpath(r#"\GX.*X"#, "");
    // p
}

#[test]
fn test_p899() {
    let regex = Regex::xpath(r#"(\d+\.\d+)"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"3.1415926"#));
}

#[test]
fn test_p900() {
    let regex = Regex::xpath(r#"(\ba.{0,10}br)"#, "");
    // p
}

#[test]
fn test_p901() {
    let regex = Regex::xpath(r#"\.c(pp|xx|c)?$"#, "i");
    // n
    let regex = regex.unwrap();
    assert!(!regex.is_match(r#"Changes"#));
}

#[test]
fn test_p902() {
    let regex = Regex::xpath(r#"\.c(pp|xx|c)?$"#, "i");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"IO.c"#));
}

#[test]
fn test_p903() {
    let regex = Regex::xpath(r#"(\.c(pp|xx|c)?$)"#, "i");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"IO.c"#));
}

#[test]
fn test_p904() {
    let regex = Regex::xpath(r#"^([a-z]:)"#, "");
    // n
    let regex = regex.unwrap();
    assert!(!regex.is_match(r#"C:/"#));
}

#[test]
fn test_p905() {
    let regex = Regex::xpath(r#"^\S\s+aa$"#, "m");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(
        r#"
x aa"#
    ));
}

#[test]
fn test_p906() {
    let regex = Regex::xpath(r#"(^|a)b"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"ab"#));
}

#[test]
fn test_p907() {
    let regex = Regex::xpath(r#"^([ab]*?)(b)?(c)$"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"abac"#));
}

#[test]
fn test_p908() {
    let regex = Regex::xpath(r#"(\w)?(abc)\1b"#, "");
    // n
    let regex = regex.unwrap();
    assert!(!regex.is_match(r#"abcab"#));
}

#[test]
fn test_p909() {
    let regex = Regex::xpath(r#"^(?:.,){2}c"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"a,b,c"#));
}

#[test]
fn test_p910() {
    let regex = Regex::xpath(r#"^(.,){2}c"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"a,b,c"#));
}

#[test]
fn test_p911() {
    let regex = Regex::xpath(r#"^(?:[^,]*,){2}c"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"a,b,c"#));
}

#[test]
fn test_p912() {
    let regex = Regex::xpath(r#"^([^,]*,){2}c"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"a,b,c"#));
}

#[test]
fn test_p913() {
    let regex = Regex::xpath(r#"^([^,]*,){3}d"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"aaa,b,c,d"#));
}

#[test]
fn test_p914() {
    let regex = Regex::xpath(r#"^([^,]*,){3,}d"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"aaa,b,c,d"#));
}

#[test]
fn test_p915() {
    let regex = Regex::xpath(r#"^([^,]*,){0,3}d"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"aaa,b,c,d"#));
}

#[test]
fn test_p916() {
    let regex = Regex::xpath(r#"^([^,]{1,3},){3}d"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"aaa,b,c,d"#));
}

#[test]
fn test_p917() {
    let regex = Regex::xpath(r#"^([^,]{1,3},){3,}d"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"aaa,b,c,d"#));
}

#[test]
fn test_p918() {
    let regex = Regex::xpath(r#"^([^,]{1,3},){0,3}d"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"aaa,b,c,d"#));
}

#[test]
fn test_p919() {
    let regex = Regex::xpath(r#"^([^,]{1,},){3}d"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"aaa,b,c,d"#));
}

#[test]
fn test_p920() {
    let regex = Regex::xpath(r#"^([^,]{1,},){3,}d"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"aaa,b,c,d"#));
}

#[test]
fn test_p921() {
    let regex = Regex::xpath(r#"^([^,]{1,},){0,3}d"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"aaa,b,c,d"#));
}

#[test]
fn test_p922() {
    let regex = Regex::xpath(r#"^([^,]{0,3},){3}d"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"aaa,b,c,d"#));
}

#[test]
fn test_p923() {
    let regex = Regex::xpath(r#"^([^,]{0,3},){3,}d"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"aaa,b,c,d"#));
}

#[test]
fn test_p924() {
    let regex = Regex::xpath(r#"^([^,]{0,3},){0,3}d"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"aaa,b,c,d"#));
}

#[test]
fn test_p925() {
    let regex = Regex::xpath(r#"(?i)"#, "");
    // p
}

#[test]
fn test_p926() {
    let regex = Regex::xpath(r#"(?a:((?u)\w)\W)"#, "");
    // p
}

#[test]
fn test_p927() {
    let regex = Regex::xpath(r#"(?!\A)x"#, "m");
    // p
}

#[test]
fn test_p928() {
    let regex = Regex::xpath(r#"^(a(b)?)+$"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"aba"#));
}

#[test]
fn test_p929() {
    let regex = Regex::xpath(r#"^(aa(bb)?)+$"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"aabbaa"#));
}

#[test]
fn test_p930() {
    let regex = Regex::xpath(r#"^.{9}abc.*\n"#, "m");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(
        r#"123
abcabcabcabc
"#
    ));
}

#[test]
fn test_p931() {
    let regex = Regex::xpath(r#"^(a)?a$"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"a"#));
}

#[test]
fn test_p932() {
    let regex = Regex::xpath(r#"^(a)?(?(1)a|b)+$"#, "");
    // p
}

#[test]
fn test_p933() {
    let regex = Regex::xpath(r#"^(a\1?)(a\1?)(a\2?)(a\3?)$"#, "");
    // p
}

#[test]
fn test_p934() {
    let regex = Regex::xpath(r#"^(a\1?){4}$"#, "");
    // p
}

#[test]
fn test_p935() {
    let regex = Regex::xpath(r#"^(0+)?(?:x(1))?"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"x1"#));
}

#[test]
fn test_p936() {
    let regex = Regex::xpath(
        r#"^([0-9a-fA-F]+)(?:x([0-9a-fA-F]+)?)(?:x([0-9a-fA-F]+))?"#,
        "",
    );
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"012cxx0190"#));
}

#[test]
fn test_p937() {
    let regex = Regex::xpath(r#"^(b+?|a){1,2}c"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"bbbac"#));
}

#[test]
fn test_p938() {
    let regex = Regex::xpath(r#"^(b+?|a){1,2}c"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"bbbbac"#));
}

#[test]
fn test_p939() {
    let regex = Regex::xpath(r#"\((\w\. \w+)\)"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"cd. (A. Tw)"#));
}

#[test]
fn test_p940() {
    let regex = Regex::xpath(r#"((?:aaaa|bbbb)cccc)?"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"aaaacccc"#));
}

#[test]
fn test_p941() {
    let regex = Regex::xpath(r#"((?:aaaa|bbbb)cccc)?"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"bbbbcccc"#));
}

#[test]
fn test_p942() {
    let regex = Regex::xpath(r#"(a)?(a)+"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"a"#));
}

#[test]
fn test_p943() {
    let regex = Regex::xpath(r#"(ab)?(ab)+"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"ab"#));
}

#[test]
fn test_p944() {
    let regex = Regex::xpath(r#"(abc)?(abc)+"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"abc"#));
}

#[test]
fn test_p945() {
    let regex = Regex::xpath(r#"b\s^"#, "m");
    // n
    let regex = regex.unwrap();
    assert!(!regex.is_match(r#"a\nb\n"#));
}

#[test]
fn test_p946() {
    let regex = Regex::xpath(r#"\ba"#, "");
    // p
}

#[test]
fn test_p947() {
    let regex = Regex::xpath(r#"^(a(??{"(?!)"})|(a)(?{1}))b"#, "");
    // p
}

#[test]
fn test_p948() {
    let regex = Regex::xpath(r#"ab(?i)cd"#, "");
    // p
}

#[test]
fn test_p949() {
    let regex = Regex::xpath(r#"ab(?i)cd"#, "");
    // p
}

#[test]
fn test_p950() {
    let regex = Regex::xpath(r#"(A|B)*(?(1)(CD)|(CD))"#, "");
    // p
}

#[test]
fn test_p951() {
    let regex = Regex::xpath(r#"(A|B)*(?(1)(CD)|(CD))"#, "");
    // p
}

#[test]
fn test_p952() {
    let regex = Regex::xpath(r#"(A|B)*?(?(1)(CD)|(CD))"#, "");
    // p
}

#[test]
fn test_p953() {
    let regex = Regex::xpath(r#"(A|B)*?(?(1)(CD)|(CD))"#, "");
    // p
}

#[test]
fn test_p954() {
    let regex = Regex::xpath(r#"^(o)(?!.*\1)"#, "i");
    // p
}

#[test]
fn test_p955() {
    let regex = Regex::xpath(r#"(.*)\d+\1"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"abc12bc"#));
}

#[test]
fn test_p956() {
    let regex = Regex::xpath(r#"(?m:(foo\s*$))"#, "");
    // p
}

#[test]
fn test_p957() {
    let regex = Regex::xpath(r#"(.*)c"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"abcd"#));
}

#[test]
fn test_p958() {
    let regex = Regex::xpath(r#"(.*)(?=c)"#, "");
    // p
}

#[test]
fn test_p959() {
    let regex = Regex::xpath(r#"(.*)(?=c)c"#, "");
    // yB
}

#[test]
fn test_p960() {
    let regex = Regex::xpath(r#"(.*)(?=b|c)"#, "");
    // p
}

#[test]
fn test_p961() {
    let regex = Regex::xpath(r#"(.*)(?=b|c)c"#, "");
    // p
}

#[test]
fn test_p962() {
    let regex = Regex::xpath(r#"(.*)(?=c|b)"#, "");
    // p
}

#[test]
fn test_p963() {
    let regex = Regex::xpath(r#"(.*)(?=c|b)c"#, "");
    // p
}

#[test]
fn test_p964() {
    let regex = Regex::xpath(r#"(.*)(?=[bc])"#, "");
    // p
}

#[test]
fn test_p965() {
    let regex = Regex::xpath(r#"(.*)(?=[bc])c"#, "");
    // yB
}

#[test]
fn test_p966() {
    let regex = Regex::xpath(r#"(.*)(?<=b)"#, "");
    // p
}

#[test]
fn test_p967() {
    let regex = Regex::xpath(r#"(.*)(?<=b)c"#, "");
    // p
}

#[test]
fn test_p968() {
    let regex = Regex::xpath(r#"(.*)(?<=b|c)"#, "");
    // p
}

#[test]
fn test_p969() {
    let regex = Regex::xpath(r#"(.*)(?<=b|c)c"#, "");
    // p
}

#[test]
fn test_p970() {
    let regex = Regex::xpath(r#"(.*)(?<=c|b)"#, "");
    // p
}

#[test]
fn test_p971() {
    let regex = Regex::xpath(r#"(.*)(?<=c|b)c"#, "");
    // p
}

#[test]
fn test_p972() {
    let regex = Regex::xpath(r#"(.*)(?<=[bc])"#, "");
    // p
}

#[test]
fn test_p973() {
    let regex = Regex::xpath(r#"(.*)(?<=[bc])c"#, "");
    // p
}

#[test]
fn test_p974() {
    let regex = Regex::xpath(r#"(.*?)c"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"abcd"#));
}

#[test]
fn test_p975() {
    let regex = Regex::xpath(r#"(.*?)(?=c)"#, "");
    // p
}

#[test]
fn test_p976() {
    let regex = Regex::xpath(r#"(.*?)(?=c)c"#, "");
    // yB
}

#[test]
fn test_p977() {
    let regex = Regex::xpath(r#"(.*?)(?=b|c)"#, "");
    // p
}

#[test]
fn test_p978() {
    let regex = Regex::xpath(r#"(.*?)(?=b|c)c"#, "");
    // p
}

#[test]
fn test_p979() {
    let regex = Regex::xpath(r#"(.*?)(?=c|b)"#, "");
    // p
}

#[test]
fn test_p980() {
    let regex = Regex::xpath(r#"(.*?)(?=c|b)c"#, "");
    // p
}

#[test]
fn test_p981() {
    let regex = Regex::xpath(r#"(.*?)(?=[bc])"#, "");
    // p
}

#[test]
fn test_p982() {
    let regex = Regex::xpath(r#"(.*?)(?=[bc])c"#, "");
    // yB
}

#[test]
fn test_p983() {
    let regex = Regex::xpath(r#"(.*?)(?<=b)"#, "");
    // p
}

#[test]
fn test_p984() {
    let regex = Regex::xpath(r#"(.*?)(?<=b)c"#, "");
    // p
}

#[test]
fn test_p985() {
    let regex = Regex::xpath(r#"(.*?)(?<=b|c)"#, "");
    // p
}

#[test]
fn test_p986() {
    let regex = Regex::xpath(r#"(.*?)(?<=b|c)c"#, "");
    // p
}

#[test]
fn test_p987() {
    let regex = Regex::xpath(r#"(.*?)(?<=c|b)"#, "");
    // p
}

#[test]
fn test_p988() {
    let regex = Regex::xpath(r#"(.*?)(?<=c|b)c"#, "");
    // p
}

#[test]
fn test_p989() {
    let regex = Regex::xpath(r#"(.*?)(?<=[bc])"#, "");
    // p
}

#[test]
fn test_p990() {
    let regex = Regex::xpath(r#"(.*?)(?<=[bc])c"#, "");
    // p
}

#[test]
fn test_p991() {
    let regex = Regex::xpath(r#"2(]*)?$\1"#, "");
    // p
}

#[test]
fn test_p992() {
    let regex = Regex::xpath(r#"(??{})"#, "");
    // p
}

#[test]
fn test_p993() {
    let regex = Regex::xpath(r#"a(b)??"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"abc"#));
}

#[test]
fn test_p994() {
    let regex = Regex::xpath(r#"(\d{1,3}\.){3,}"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"128.134.142.8"#));
}

#[test]
fn test_p995() {
    let regex = Regex::xpath(r#"^.{3,4}(.+)\1$"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"foobarbar"#));
}

#[test]
fn test_p996() {
    let regex = Regex::xpath(r#"^(?:f|o|b){3,4}(.+)\1$"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"foobarbar"#));
}

#[test]
fn test_p997() {
    let regex = Regex::xpath(r#"^.{3,4}((?:b|a|r)+)\1$"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"foobarbar"#));
}

#[test]
fn test_p998() {
    let regex = Regex::xpath(r#"^(?:f|o|b){3,4}((?:b|a|r)+)\1$"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"foobarbar"#));
}

#[test]
fn test_p999() {
    let regex = Regex::xpath(r#"^.{3,4}(.+?)\1$"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"foobarbar"#));
}

#[test]
fn test_p1000() {
    let regex = Regex::xpath(r#"^(?:f|o|b){3,4}(.+?)\1$"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"foobarbar"#));
}

#[test]
fn test_p1001() {
    let regex = Regex::xpath(r#"^.{3,4}((?:b|a|r)+?)\1$"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"foobarbar"#));
}

#[test]
fn test_p1002() {
    let regex = Regex::xpath(r#"^(?:f|o|b){3,4}((?:b|a|r)+?)\1$"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"foobarbar"#));
}

#[test]
fn test_p1003() {
    let regex = Regex::xpath(r#"^.{2,3}?(.+)\1$"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"foobarbar"#));
}

#[test]
fn test_p1004() {
    let regex = Regex::xpath(r#"^(?:f|o|b){2,3}?(.+)\1$"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"foobarbar"#));
}

#[test]
fn test_p1005() {
    let regex = Regex::xpath(r#"^.{2,3}?((?:b|a|r)+)\1$"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"foobarbar"#));
}

#[test]
fn test_p1006() {
    let regex = Regex::xpath(r#"^(?:f|o|b){2,3}?((?:b|a|r)+)\1$"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"foobarbar"#));
}

#[test]
fn test_p1007() {
    let regex = Regex::xpath(r#"^.{2,3}?(.+?)\1$"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"foobarbar"#));
}

#[test]
fn test_p1008() {
    let regex = Regex::xpath(r#"^(?:f|o|b){2,3}?(.+?)\1$"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"foobarbar"#));
}

#[test]
fn test_p1009() {
    let regex = Regex::xpath(r#"^.{2,3}?((?:b|a|r)+?)\1$"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"foobarbar"#));
}

#[test]
fn test_p1010() {
    let regex = Regex::xpath(r#"^(?:f|o|b){2,3}?((?:b|a|r)+?)\1$"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"foobarbar"#));
}

#[test]
fn test_p1011() {
    let regex = Regex::xpath(r#".*a(?!(b|cd)*e).*f"#, "");
    // p
}

#[test]
fn test_p1012() {
    let regex = Regex::xpath(r#"x(?#"#, "");
    // c
}

#[test]
fn test_p1013() {
    let regex = Regex::xpath(r#":x(?#:"#, "");
    // c
}

#[test]
fn test_p1014() {
    let regex = Regex::xpath(r#"(WORDS|WORD)S"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"WORDS"#));
}

#[test]
fn test_p1015() {
    let regex = Regex::xpath(r#"(X.|WORDS|X.|WORD)S"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"WORDS"#));
}

#[test]
fn test_p1016() {
    let regex = Regex::xpath(r#"(WORDS|WORLD|WORD)S"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"WORDS"#));
}

#[test]
fn test_p1017() {
    let regex = Regex::xpath(r#"(X.|WORDS|WORD|Y.)S"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"WORDS"#));
}

#[test]
fn test_p1018() {
    let regex = Regex::xpath(r#"(foo|fool|x.|money|parted)$"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"fool"#));
}

#[test]
fn test_p1019() {
    let regex = Regex::xpath(r#"(x.|foo|fool|x.|money|parted|y.)$"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"fool"#));
}

#[test]
fn test_p1020() {
    let regex = Regex::xpath(r#"(foo|fool|money|parted)$"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"fool"#));
}

#[test]
fn test_p1021() {
    let regex = Regex::xpath(r#"(foo|fool|x.|money|parted)$"#, "");
    // n
    let regex = regex.unwrap();
    assert!(!regex.is_match(r#"fools"#));
}

#[test]
fn test_p1022() {
    let regex = Regex::xpath(r#"(x.|foo|fool|x.|money|parted|y.)$"#, "");
    // n
    let regex = regex.unwrap();
    assert!(!regex.is_match(r#"fools"#));
}

#[test]
fn test_p1023() {
    let regex = Regex::xpath(r#"(foo|fool|money|parted)$"#, "");
    // n
    let regex = regex.unwrap();
    assert!(!regex.is_match(r#"fools"#));
}

#[test]
fn test_p1024() {
    let regex = Regex::xpath(r#"(a|aa|aaa||aaaa|aaaaa|aaaaaa)(b|c)"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"aaaaaaaaaaaaaaab"#));
}

#[test]
fn test_p1025() {
    let regex = Regex::xpath(r#"(a|aa|aaa||aaaa|aaaaa|aaaaaa)(??{$1&&""})(b|c)"#, "");
    // p
}

#[test]
fn test_p1026() {
    let regex = Regex::xpath(r#"(a|aa|aaa|aaaa|aaaaa|aaaaaa)(??{$1&&"foo"})(b|c)"#, "");
    // p
}

#[test]
fn test_p1027() {
    let regex = Regex::xpath(r#"^(a*?)(?!(aa|aaaa)*$)"#, "");
    // p
}

#[test]
fn test_p1028() {
    let regex = Regex::xpath(r#"^(a*?)(?!(aa|aaaa)*$)(?=a\z)"#, "");
    // p
}

#[test]
fn test_p1029() {
    let regex = Regex::xpath(r#"^(.)\s+.$(?(1))"#, "");
    // p
}

#[test]
fn test_p1030() {
    let regex = Regex::xpath(r#"(?:r?)*?r|(.{2,4})"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"abcde"#));
}

#[test]
fn test_p1031() {
    let regex = Regex::xpath(r#"(?!)+?|(.{2,4})"#, "");
    // p
}

#[test]
fn test_p1032() {
    let regex = Regex::xpath(r#"^(a*?)(?!(a{6}|a{5})*$)"#, "");
    // p
}

#[test]
fn test_p1033() {
    let regex = Regex::xpath(r#"^((?>(?:aa)?b)?)"#, "");
    // p
}

#[test]
fn test_p1034() {
    let regex = Regex::xpath(r#"^((?:aa)*)(?:X+((?:\d+|-)(?:X+(.+))?))?$"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"aaaaX5"#));
}

#[test]
fn test_p1035() {
    let regex = Regex::xpath(r#"X(A|B||C|D)Y"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"XXXYYY"#));
}

#[test]
fn test_p1036() {
    let regex = Regex::xpath(r#"(?i:X([A]|[B]|y[Y]y|[D]|)Y)"#, "");
    // p
}

#[test]
fn test_p1037() {
    let regex = Regex::xpath(r#"^([a]{1})*$"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"aa"#));
}

#[test]
fn test_p1038() {
    let regex = Regex::xpath(r#"a(?!b(?!c))(..)"#, "");
    // p
}

#[test]
fn test_p1039() {
    let regex = Regex::xpath(r#"a(?!b(?=a))(..)"#, "");
    // p
}

#[test]
fn test_p1040() {
    let regex = Regex::xpath(r#"a(?!b(?!c(?!d(?!e))))...(.)"#, "");
    // p
}

#[test]
fn test_p1041() {
    let regex = Regex::xpath(r#"X(?!b+(?!(c+)*(?!(c+)*d))).*X"#, "");
    // p
}

#[test]
fn test_p1042() {
    let regex = Regex::xpath(r#"^(XXXXXXXXXX|YYYYYYYYYY|Z.Q*X|Z[TE]Q*P):"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"ZEQQQQQQQQQQQQQQQQQQP:"#));
}

#[test]
fn test_p1043() {
    let regex = Regex::xpath(r#"^(XXXXXXXXXX|YYYYYYYYYY|Z.Q*X|Z[TE]Q*P):"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"ZEQQQX:"#));
}

#[test]
fn test_p1044() {
    let regex = Regex::xpath(r#"^([TUV]+|XXXXXXXXXX|YYYYYYYYYY|Z.Q*X|Z[TE]Q*P):"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"ZEQQQQQQQQQQQQQQQQQQP:"#));
}

#[test]
fn test_p1045() {
    let regex = Regex::xpath(r#"^([TUV]+|XXXXXXXXXX|YYYYYYYYYY|Z.Q*X|Z[TE]Q*P):"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"ZEQQQX:"#));
}

#[test]
fn test_p1046() {
    let regex = Regex::xpath(
        r#"^([TUV]+|XXXXXXXXXX|YYYYYYYYYY|Z.Q*X|Z[TE]Q*P|[MKJ]):"#,
        "",
    );
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"ZEQQQQQQQQQQQQQQQQQQP:"#));
}

#[test]
fn test_p1047() {
    let regex = Regex::xpath(
        r#"^([TUV]+|XXXXXXXXXX|YYYYYYYYYY|Z.Q*X|Z[TE]Q*P|[MKJ]):"#,
        "",
    );
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"ZEQQQX:"#));
}

#[test]
fn test_p1048() {
    let regex = Regex::xpath(r#"^(XXX|YYY|Z.Q*X|Z[TE]Q*P):"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"ZEQQQQQQQQQQQQQQQQQQP:"#));
}

#[test]
fn test_p1049() {
    let regex = Regex::xpath(r#"^(XXX|YYY|Z.Q*X|Z[TE]Q*P):"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"ZEQQQX:"#));
}

#[test]
fn test_p1050() {
    let regex = Regex::xpath(r#"^([TUV]+|XXX|YYY|Z.Q*X|Z[TE]Q*P):"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"ZEQQQQQQQQQQQQQQQQQQP:"#));
}

#[test]
fn test_p1051() {
    let regex = Regex::xpath(r#"^([TUV]+|XXX|YYY|Z.Q*X|Z[TE]Q*P):"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"ZEQQQX:"#));
}

#[test]
fn test_p1052() {
    let regex = Regex::xpath(r#"^([TUV]+|XXX|YYY|Z.Q*X|Z[TE]Q*P|[MKJ]):"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"ZEQQQQQQQQQQQQQQQQQQP:"#));
}

#[test]
fn test_p1053() {
    let regex = Regex::xpath(r#"^([TUV]+|XXX|YYY|Z.Q*X|Z[TE]Q*P|[MKJ]):"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"ZEQQQX:"#));
}

#[test]
fn test_p1054() {
    let regex = Regex::xpath(r#"X(?:ABCF[cC]x*|ABCD|ABCF):(?:DIT|DID|DIM)"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"XABCFCxxxxxxxxxx:DIM"#));
}

#[test]
fn test_p1055() {
    let regex = Regex::xpath(r#"(((ABCD|ABCE|ABCF)))(A|B|C[xy]*):"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"ABCFCxxxxxxxxxx:DIM"#));
}

#[test]
fn test_p1056() {
    let regex = Regex::xpath(r#"(?=foo)"#, "");
    // p
}

#[test]
fn test_p1057() {
    let regex = Regex::xpath(r#"(?=foo)"#, "");
    // p
}

#[test]
fn test_p1058() {
    let regex = Regex::xpath(r#".*(?=foo)"#, "");
    // p
}

#[test]
fn test_p1059() {
    let regex = Regex::xpath(r#"(?<=foo)"#, "");
    // p
}

#[test]
fn test_p1060() {
    let regex = Regex::xpath(r#"(?<=foo)"#, "");
    // p
}

#[test]
fn test_p1061() {
    let regex = Regex::xpath(r#".*(?<=foo)"#, "");
    // p
}

#[test]
fn test_p1062() {
    let regex = Regex::xpath(r#".*(?<=foo)"#, "");
    // p
}

#[test]
fn test_p1063() {
    let regex = Regex::xpath(r#"(?<=foo)Y"#, "");
    // p
}

#[test]
fn test_p1064() {
    let regex = Regex::xpath(r#"o(?<=foo)Y"#, "");
    // p
}

#[test]
fn test_p1065() {
    let regex = Regex::xpath(r#"X(?=foo)f"#, "");
    // p
}

#[test]
fn test_p1066() {
    let regex = Regex::xpath(r#"X(?=foo)"#, "");
    // p
}

#[test]
fn test_p1067() {
    let regex = Regex::xpath(r#"X(?<=foo.)[YZ]"#, "");
    // p
}

#[test]
fn test_p1068() {
    let regex = Regex::xpath(r#"(?=XY*foo)"#, "");
    // p
}

#[test]
fn test_p1069() {
    let regex = Regex::xpath(r#"^(?=XY*foo)"#, "");
    // p
}

#[test]
fn test_p1070() {
    let regex = Regex::xpath(r#"^(??{"a+"})a"#, "");
    // p
}

#[test]
fn test_p1071() {
    let regex = Regex::xpath(r#"^(?:(??{"a+"})|b)a"#, "");
    // p
}

#[test]
fn test_p1072() {
    let regex = Regex::xpath(r#"^(??{chr 0x100}).$"#, "");
    // p
}

#[test]
fn test_p1073() {
    let regex = Regex::xpath(r#"^(??{q(\x{100})})."#, "");
    // p
}

#[test]
fn test_p1074() {
    let regex = Regex::xpath(r#"^(??{q(.+)})\x{100}"#, "");
    // p
}

#[test]
fn test_p1075() {
    let regex = Regex::xpath(r#"^(??{q(.)})\x{100}"#, "");
    // p
}

#[test]
fn test_p1076() {
    let regex = Regex::xpath(r#"^(??{chr 0x100})\xbb"#, "");
    // p
}

#[test]
fn test_p1077() {
    let regex = Regex::xpath(r#"^(.)(??{"(.)(.)"})(.)$"#, "");
    // p
}

#[test]
fn test_p1078() {
    let regex = Regex::xpath(r#"^(.)(??{"(bz+|.)(.)"})(.)$"#, "");
    // p
}

#[test]
fn test_p1079() {
    let regex = Regex::xpath(r#"^(.)((??{"(.)(cz+)"})|.)"#, "");
    // p
}

#[test]
fn test_p1080() {
    let regex = Regex::xpath(r#"^a(?>(??{q(b)}))(??{q(c)})d"#, "");
    // p
}

#[test]
fn test_p1081() {
    let regex = Regex::xpath(r#"^x(??{""})+$"#, "");
    // p
}

#[test]
fn test_p1082() {
    let regex = Regex::xpath(r#"^(<(?:[^<>]+|(?3)|(?1))*>)()(!>!>!>)$"#, "");
    // p
}

#[test]
fn test_p1083() {
    let regex = Regex::xpath(r#"^(<(?:[^<>]+|(?1))*>)$"#, "");
    // p
}

#[test]
fn test_p1084() {
    let regex = Regex::xpath(r#"((?2)*)([fF]o+)"#, "");
    // p
}

#[test]
fn test_p1085() {
    let regex = Regex::xpath(r#"(<(?:[^<>]+|(?R))*>)"#, "");
    // p
}

#[test]
fn test_p1086() {
    let regex = Regex::xpath(r#"(?<n>foo|bar|baz)"#, "");
    // p
}

#[test]
fn test_p1087() {
    let regex = Regex::xpath(r#"(?<n>foo|bar|baz)"#, "");
    // yM
}

#[test]
fn test_p1088() {
    let regex = Regex::xpath(r#"(?<n>foo|bar|baz)(?<m>[ew]+)"#, "");
    // yM
}

#[test]
fn test_p1089() {
    let regex = Regex::xpath(r#"(?<n>foo|bar|baz)(?<m>[ew]+)"#, "");
    // yM
}

#[test]
fn test_p1090() {
    let regex = Regex::xpath(r#"(?<n>foo)|(?<n>bar)|(?<n>baz)"#, "");
    // yM
}

#[test]
fn test_p1091() {
    let regex = Regex::xpath(r#"(?<n>foo)(??{ $+{n} })"#, "");
    // yM
}

#[test]
fn test_p1092() {
    let regex = Regex::xpath(r#"(?P<n>foo|bar|baz)"#, "");
    // p
}

#[test]
fn test_p1093() {
    let regex = Regex::xpath(r#"(?P<n>foo|bar|baz)"#, "");
    // yM
}

#[test]
fn test_p1094() {
    let regex = Regex::xpath(r#"(?P<n>foo|bar|baz)(?P<m>[ew]+)"#, "");
    // yM
}

#[test]
fn test_p1095() {
    let regex = Regex::xpath(r#"(?P<n>foo|bar|baz)(?P<m>[ew]+)"#, "");
    // yM
}

#[test]
fn test_p1096() {
    let regex = Regex::xpath(r#"(?P<n>foo)|(?P<n>bar)|(?P<n>baz)"#, "");
    // yM
}

#[test]
fn test_p1097() {
    let regex = Regex::xpath(r#"(?P<n>foo)(??{ $+{n} })"#, "");
    // yM
}

#[test]
fn test_p1098() {
    let regex = Regex::xpath(r#"(?P<=n>foo|bar|baz)"#, "");
    // c
}

#[test]
fn test_p1099() {
    let regex = Regex::xpath(r#"(?P<!n>foo|bar|baz)"#, "");
    // c
}

#[test]
fn test_p1100() {
    let regex = Regex::xpath(r#"(?PX<n>foo|bar|baz)"#, "");
    // c
}

#[test]
fn test_p1101() {
    let regex = Regex::xpath(r#"/(?'n'foo|bar|baz)/"#, "");
    // p
}

#[test]
fn test_p1102() {
    let regex = Regex::xpath(r#"/(?'n'foo|bar|baz)/"#, "");
    // yM
}

#[test]
fn test_p1103() {
    let regex = Regex::xpath(r#"/(?n'foo|bar|baz)(?'[ew]+)/"#, "/(?m'[ew]+)/");
    // yM
}

#[test]
fn test_p1104() {
    let regex = Regex::xpath(r#"/(?n'foo|bar|baz)(?'[ew]+)/"#, "/(?m'[ew]+)/");
    // yM
}

#[test]
fn test_p1105() {
    let regex = Regex::xpath(r#"/(?'n'foo)|(?'n'bar)|(?<n>baz)/"#, "");
    // yM
}

#[test]
fn test_p1106() {
    let regex = Regex::xpath(r#"/(?'n'foo)(??{ $+{n} })/"#, "");
    // yM
}

#[test]
fn test_p1107() {
    let regex = Regex::xpath(r#"/(?'n'foo)\k<n>/"#, "");
    // p
}

#[test]
fn test_p1108() {
    let regex = Regex::xpath(r#"/(?'n'foo)\k<n>/"#, "");
    // yM
}

#[test]
fn test_p1109() {
    let regex = Regex::xpath(r#"/(?<n>foo)\k'n'/"#, "");
    // p
}

#[test]
fn test_p1110() {
    let regex = Regex::xpath(r#"/(?<n>foo)\k'n'/"#, "");
    // yM
}

#[test]
fn test_p1111() {
    let regex = Regex::xpath(r#"/(?:(?<n>foo)|(?<n>bar))\k<n>/"#, "");
    // yM
}

#[test]
fn test_p1112() {
    let regex = Regex::xpath(
        r#"/^(?'main'<(?:[^<>]+|(?&crap)|(?&main))*>)(?'empty')(?'crap'!>!>!>)$/"#,
        "",
    );
    // yM
}

#[test]
fn test_p1113() {
    let regex = Regex::xpath(r#"/^(?'main'<(?:[^<>]+|(?&main))*>)$/"#, "");
    // p
}

#[test]
fn test_p1114() {
    let regex = Regex::xpath(
        r#"/(?first'(?&second)*)(?econd'[fF]o+)/"#,
        "/(?second'[fF]o+)/",
    );
    // yM
}

#[test]
fn test_p1115() {
    let regex = Regex::xpath(r#"(?<A>foo)?(?(<A>)bar|nada)"#, "");
    // yM
}

#[test]
fn test_p1116() {
    let regex = Regex::xpath(r#"(?<A>foo)?(?(<A>)bar|nada)"#, "");
    // p
}

#[test]
fn test_p1117() {
    let regex = Regex::xpath(r#"(?<A>foo)?(?(1)bar|nada)"#, "");
    // p
}

#[test]
fn test_p1118() {
    let regex = Regex::xpath(r#"(?<A>foo(?(R)bar))?(?1)"#, "");
    // p
}

#[test]
fn test_p1119() {
    let regex = Regex::xpath(r#"(?<A>foo(?(R)bar))?(?1)"#, "");
    // p
}

#[test]
fn test_p1120() {
    let regex = Regex::xpath(r#"(x)(?<A>foo(?(R&A)bar))?(?&A)"#, "");
    // p
}

#[test]
fn test_p1121() {
    let regex = Regex::xpath(r#"(x)(?<A>foo(?(R&A)bar))?(?&A)"#, "");
    // p
}

#[test]
fn test_p1122() {
    let regex = Regex::xpath(r#"(x)(?<A>foo(?(R2)bar))?(?&A)"#, "");
    // p
}

#[test]
fn test_p1123() {
    let regex = Regex::xpath(r#"(x)(?<A>foo(?(R2)bar))?(?&A)"#, "");
    // p
}

#[test]
fn test_p1124() {
    let regex = Regex::xpath(r#"(?1)(?(DEFINE)(blah))"#, "");
    // p
}

#[test]
fn test_p1125() {
    let regex = Regex::xpath(r#"/^(?<PAL>(?<CHAR>.)((?&PAL)|.?)\k<CHAR>)$/"#, "");
    // p
}

#[test]
fn test_p1126() {
    let regex = Regex::xpath(r#"/^(?<PAL>(?<CHAR>.)((?&PAL)|.?)\k<CHAR>)$/"#, "");
    // p
}

#[test]
fn test_p1127() {
    let regex = Regex::xpath(r#"/(a)?((?1))(fox)/"#, "");
    // p
}

#[test]
fn test_p1128() {
    let regex = Regex::xpath(r#"/(a)*((?1))(fox)/"#, "");
    // p
}

#[test]
fn test_p1129() {
    let regex = Regex::xpath(r#"/(a)+((?1))(fox)/"#, "");
    // p
}

#[test]
fn test_p1130() {
    let regex = Regex::xpath(r#"/(a){1,100}((?1))(fox)/"#, "");
    // p
}

#[test]
fn test_p1131() {
    let regex = Regex::xpath(r#"/(a){0,100}((?1))(fox)/"#, "");
    // p
}

#[test]
fn test_p1132() {
    let regex = Regex::xpath(r#"/(ab)?((?1))(fox)/"#, "");
    // p
}

#[test]
fn test_p1133() {
    let regex = Regex::xpath(r#"/(ab)*((?1))(fox)/"#, "");
    // p
}

#[test]
fn test_p1134() {
    let regex = Regex::xpath(r#"/(ab)+((?1))(fox)/"#, "");
    // p
}

#[test]
fn test_p1135() {
    let regex = Regex::xpath(r#"/(ab){1,100}((?1))(fox)/"#, "");
    // p
}

#[test]
fn test_p1136() {
    let regex = Regex::xpath(r#"/(ab){0,100}((?1))(fox)/"#, "");
    // p
}

#[test]
fn test_p1138() {
    let regex = Regex::xpath(r#"a++a"#, "");
    // p
}

#[test]
fn test_p1139() {
    let regex = Regex::xpath(r#"a*+a"#, "");
    // p
}

#[test]
fn test_p1140() {
    let regex = Regex::xpath(r#"a{1,5}+a"#, "");
    // p
}

#[test]
fn test_p1141() {
    let regex = Regex::xpath(r#"a?+a"#, "");
    // p
}

#[test]
fn test_p1142() {
    let regex = Regex::xpath(r#"a++b"#, "");
    // p
}

#[test]
fn test_p1143() {
    let regex = Regex::xpath(r#"a*+b"#, "");
    // p
}

#[test]
fn test_p1144() {
    let regex = Regex::xpath(r#"a{1,5}+b"#, "");
    // p
}

#[test]
fn test_p1145() {
    let regex = Regex::xpath(r#"a?+b"#, "");
    // p
}

#[test]
fn test_p1146() {
    let regex = Regex::xpath(r#"fooa++a"#, "");
    // p
}

#[test]
fn test_p1147() {
    let regex = Regex::xpath(r#"fooa*+a"#, "");
    // p
}

#[test]
fn test_p1148() {
    let regex = Regex::xpath(r#"fooa{1,5}+a"#, "");
    // p
}

#[test]
fn test_p1149() {
    let regex = Regex::xpath(r#"fooa?+a"#, "");
    // p
}

#[test]
fn test_p1150() {
    let regex = Regex::xpath(r#"fooa++b"#, "");
    // p
}

#[test]
fn test_p1151() {
    let regex = Regex::xpath(r#"fooa*+b"#, "");
    // p
}

#[test]
fn test_p1152() {
    let regex = Regex::xpath(r#"fooa{1,5}+b"#, "");
    // p
}

#[test]
fn test_p1153() {
    let regex = Regex::xpath(r#"fooa?+b"#, "");
    // p
}

#[test]
fn test_p1154() {
    let regex = Regex::xpath(r#"(?:aA)++(?:aA)"#, "");
    // p
}

#[test]
fn test_p1155() {
    let regex = Regex::xpath(r#"(aA)++(aA)"#, "");
    // p
}

#[test]
fn test_p1156() {
    let regex = Regex::xpath(r#"(aA|bB)++(aA|bB)"#, "");
    // p
}

#[test]
fn test_p1157() {
    let regex = Regex::xpath(r#"(?:aA|bB)++(?:aA|bB)"#, "");
    // p
}

#[test]
fn test_p1158() {
    let regex = Regex::xpath(r#"(?:aA)*+(?:aA)"#, "");
    // p
}

#[test]
fn test_p1159() {
    let regex = Regex::xpath(r#"(aA)*+(aA)"#, "");
    // p
}

#[test]
fn test_p1160() {
    let regex = Regex::xpath(r#"(aA|bB)*+(aA|bB)"#, "");
    // p
}

#[test]
fn test_p1161() {
    let regex = Regex::xpath(r#"(?:aA|bB)*+(?:aA|bB)"#, "");
    // p
}

#[test]
fn test_p1162() {
    let regex = Regex::xpath(r#"(?:aA){1,5}+(?:aA)"#, "");
    // p
}

#[test]
fn test_p1163() {
    let regex = Regex::xpath(r#"(aA){1,5}+(aA)"#, "");
    // p
}

#[test]
fn test_p1164() {
    let regex = Regex::xpath(r#"(aA|bB){1,5}+(aA|bB)"#, "");
    // p
}

#[test]
fn test_p1165() {
    let regex = Regex::xpath(r#"(?:aA|bB){1,5}+(?:aA|bB)"#, "");
    // p
}

#[test]
fn test_p1166() {
    let regex = Regex::xpath(r#"(?:aA)?+(?:aA)"#, "");
    // p
}

#[test]
fn test_p1167() {
    let regex = Regex::xpath(r#"(aA)?+(aA)"#, "");
    // p
}

#[test]
fn test_p1168() {
    let regex = Regex::xpath(r#"(aA|bB)?+(aA|bB)"#, "");
    // p
}

#[test]
fn test_p1169() {
    let regex = Regex::xpath(r#"(?:aA|bB)?+(?:aA|bB)"#, "");
    // p
}

#[test]
fn test_p1170() {
    let regex = Regex::xpath(r#"(?:aA)++b"#, "");
    // p
}

#[test]
fn test_p1171() {
    let regex = Regex::xpath(r#"(aA)++b"#, "");
    // p
}

#[test]
fn test_p1172() {
    let regex = Regex::xpath(r#"(aA|bB)++b"#, "");
    // p
}

#[test]
fn test_p1173() {
    let regex = Regex::xpath(r#"(?:aA|bB)++b"#, "");
    // p
}

#[test]
fn test_p1174() {
    let regex = Regex::xpath(r#"(?:aA)*+b"#, "");
    // p
}

#[test]
fn test_p1175() {
    let regex = Regex::xpath(r#"(aA)*+b"#, "");
    // p
}

#[test]
fn test_p1176() {
    let regex = Regex::xpath(r#"(aA|bB)*+b"#, "");
    // p
}

#[test]
fn test_p1177() {
    let regex = Regex::xpath(r#"(?:aA|bB)*+b"#, "");
    // p
}

#[test]
fn test_p1178() {
    let regex = Regex::xpath(r#"(?:aA){1,5}+b"#, "");
    // p
}

#[test]
fn test_p1179() {
    let regex = Regex::xpath(r#"(aA){1,5}+b"#, "");
    // p
}

#[test]
fn test_p1180() {
    let regex = Regex::xpath(r#"(aA|bB){1,5}+b"#, "");
    // p
}

#[test]
fn test_p1181() {
    let regex = Regex::xpath(r#"(?:aA|bB){1,5}+b"#, "");
    // p
}

#[test]
fn test_p1182() {
    let regex = Regex::xpath(r#"(?:aA)?+b"#, "");
    // p
}

#[test]
fn test_p1183() {
    let regex = Regex::xpath(r#"(aA)?+b"#, "");
    // p
}

#[test]
fn test_p1184() {
    let regex = Regex::xpath(r#"(aA|bB)?+b"#, "");
    // p
}

#[test]
fn test_p1185() {
    let regex = Regex::xpath(r#"(?:aA|bB)?+b"#, "");
    // p
}

#[test]
fn test_p1186() {
    let regex = Regex::xpath(r#"foo(?:aA)++(?:aA)"#, "");
    // p
}

#[test]
fn test_p1187() {
    let regex = Regex::xpath(r#"foo(aA)++(aA)"#, "");
    // p
}

#[test]
fn test_p1188() {
    let regex = Regex::xpath(r#"foo(aA|bB)++(aA|bB)"#, "");
    // p
}

#[test]
fn test_p1189() {
    let regex = Regex::xpath(r#"foo(?:aA|bB)++(?:aA|bB)"#, "");
    // p
}

#[test]
fn test_p1190() {
    let regex = Regex::xpath(r#"foo(?:aA)*+(?:aA)"#, "");
    // p
}

#[test]
fn test_p1191() {
    let regex = Regex::xpath(r#"foo(aA)*+(aA)"#, "");
    // p
}

#[test]
fn test_p1192() {
    let regex = Regex::xpath(r#"foo(aA|bB)*+(aA|bB)"#, "");
    // p
}

#[test]
fn test_p1193() {
    let regex = Regex::xpath(r#"foo(?:aA|bB)*+(?:aA|bB)"#, "");
    // p
}

#[test]
fn test_p1194() {
    let regex = Regex::xpath(r#"foo(?:aA){1,5}+(?:aA)"#, "");
    // p
}

#[test]
fn test_p1195() {
    let regex = Regex::xpath(r#"foo(aA){1,5}+(aA)"#, "");
    // p
}

#[test]
fn test_p1196() {
    let regex = Regex::xpath(r#"foo(aA|bB){1,5}+(aA|bB)"#, "");
    // p
}

#[test]
fn test_p1197() {
    let regex = Regex::xpath(r#"foo(?:aA|bB){1,5}+(?:aA|bB)"#, "");
    // p
}

#[test]
fn test_p1198() {
    let regex = Regex::xpath(r#"foo(?:aA)?+(?:aA)"#, "");
    // p
}

#[test]
fn test_p1199() {
    let regex = Regex::xpath(r#"foo(aA)?+(aA)"#, "");
    // p
}

#[test]
fn test_p1200() {
    let regex = Regex::xpath(r#"foo(aA|bB)?+(aA|bB)"#, "");
    // p
}

#[test]
fn test_p1201() {
    let regex = Regex::xpath(r#"foo(?:aA|bB)?+(?:aA|bB)"#, "");
    // p
}

#[test]
fn test_p1202() {
    let regex = Regex::xpath(r#"foo(?:aA)++b"#, "");
    // p
}

#[test]
fn test_p1203() {
    let regex = Regex::xpath(r#"foo(aA)++b"#, "");
    // p
}

#[test]
fn test_p1204() {
    let regex = Regex::xpath(r#"foo(aA|bB)++b"#, "");
    // p
}

#[test]
fn test_p1205() {
    let regex = Regex::xpath(r#"foo(?:aA|bB)++b"#, "");
    // p
}

#[test]
fn test_p1206() {
    let regex = Regex::xpath(r#"foo(?:aA)*+b"#, "");
    // p
}

#[test]
fn test_p1207() {
    let regex = Regex::xpath(r#"foo(aA)*+b"#, "");
    // p
}

#[test]
fn test_p1208() {
    let regex = Regex::xpath(r#"foo(aA|bB)*+b"#, "");
    // p
}

#[test]
fn test_p1209() {
    let regex = Regex::xpath(r#"foo(?:aA|bB)*+b"#, "");
    // p
}

#[test]
fn test_p1210() {
    let regex = Regex::xpath(r#"foo(?:aA){1,5}+b"#, "");
    // p
}

#[test]
fn test_p1211() {
    let regex = Regex::xpath(r#"foo(aA){1,5}+b"#, "");
    // p
}

#[test]
fn test_p1212() {
    let regex = Regex::xpath(r#"foo(aA|bB){1,5}+b"#, "");
    // p
}

#[test]
fn test_p1213() {
    let regex = Regex::xpath(r#"foo(?:aA|bB){1,5}+b"#, "");
    // p
}

#[test]
fn test_p1214() {
    let regex = Regex::xpath(r#"foo(?:aA)?+b"#, "");
    // p
}

#[test]
fn test_p1215() {
    let regex = Regex::xpath(r#"foo(aA)?+b"#, "");
    // p
}

#[test]
fn test_p1216() {
    let regex = Regex::xpath(r#"foo(aA|bB)?+b"#, "");
    // p
}

#[test]
fn test_p1217() {
    let regex = Regex::xpath(r#"foo(?:aA|bB)?+b"#, "");
    // p
}

#[test]
fn test_p1219() {
    let regex = Regex::xpath(r#"([^()]++|\([^()]*\))+"#, "");
    // p
}

#[test]
fn test_p1220() {
    let regex = Regex::xpath(r#"round\(([^()]++)\)"#, "");
    // p
}

#[test]
fn test_p1222() {
    let regex = Regex::xpath(r#"(foo[1x]|bar[2x]|baz[3x])+y"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"foo1bar2baz3y"#));
}

#[test]
fn test_p1223() {
    let regex = Regex::xpath(r#"(foo[1x]|bar[2x]|baz[3x])+y"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"foo1bar2baz3y"#));
}

#[test]
fn test_p1224() {
    let regex = Regex::xpath(r#"(foo[1x]|bar[2x]|baz[3x])*y"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"foo1bar2baz3y"#));
}

#[test]
fn test_p1225() {
    let regex = Regex::xpath(r#"(foo[1x]|bar[2x]|baz[3x])*y"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"foo1bar2baz3y"#));
}

#[test]
fn test_p1227() {
    let regex = Regex::xpath(r#"([yX].|WORDS|[yX].|WORD)S"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"WORDS"#));
}

#[test]
fn test_p1228() {
    let regex = Regex::xpath(r#"(WORDS|WORLD|WORD)S"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"WORDS"#));
}

#[test]
fn test_p1229() {
    let regex = Regex::xpath(r#"([yX].|WORDS|WORD|[xY].)S"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"WORDS"#));
}

#[test]
fn test_p1230() {
    let regex = Regex::xpath(r#"(foo|fool|[zx].|money|parted)$"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"fool"#));
}

#[test]
fn test_p1231() {
    let regex = Regex::xpath(r#"([zx].|foo|fool|[zq].|money|parted|[yx].)$"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"fool"#));
}

#[test]
fn test_p1232() {
    let regex = Regex::xpath(r#"(foo|fool|[zx].|money|parted)$"#, "");
    // n
    let regex = regex.unwrap();
    assert!(!regex.is_match(r#"fools"#));
}

#[test]
fn test_p1233() {
    let regex = Regex::xpath(r#"([zx].|foo|fool|[qx].|money|parted|[py].)$"#, "");
    // n
    let regex = regex.unwrap();
    assert!(!regex.is_match(r#"fools"#));
}

#[test]
fn test_p1235() {
    let regex = Regex::xpath(r#"([yX].|WORDS|[yX].|WORD)+S"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"WORDS"#));
}

#[test]
fn test_p1236() {
    let regex = Regex::xpath(r#"(WORDS|WORLD|WORD)+S"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"WORDS"#));
}

#[test]
fn test_p1237() {
    let regex = Regex::xpath(r#"([yX].|WORDS|WORD|[xY].)+S"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"WORDS"#));
}

#[test]
fn test_p1238() {
    let regex = Regex::xpath(r#"(foo|fool|[zx].|money|parted)+$"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"fool"#));
}

#[test]
fn test_p1239() {
    let regex = Regex::xpath(r#"([zx].|foo|fool|[zq].|money|parted|[yx].)+$"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"fool"#));
}

#[test]
fn test_p1240() {
    let regex = Regex::xpath(r#"(foo|fool|[zx].|money|parted)+$"#, "");
    // n
    let regex = regex.unwrap();
    assert!(!regex.is_match(r#"fools"#));
}

#[test]
fn test_p1241() {
    let regex = Regex::xpath(r#"([zx].|foo|fool|[qx].|money|parted|[py].)+$"#, "");
    // n
    let regex = regex.unwrap();
    assert!(!regex.is_match(r#"fools"#));
}

#[test]
fn test_p1243() {
    let regex = Regex::xpath(
        r#"(x|y|z[QW])+(longish|loquatious|excessive|overblown[QW])+"#,
        "",
    );
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"xyzQzWlongishoverblownW"#));
}

#[test]
fn test_p1244() {
    let regex = Regex::xpath(
        r#"(x|y|z[QW])*(longish|loquatious|excessive|overblown[QW])*"#,
        "",
    );
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"xyzQzWlongishoverblownW"#));
}

#[test]
fn test_p1245() {
    let regex = Regex::xpath(
        r#"(x|y|z[QW]){1,5}(longish|loquatious|excessive|overblown[QW]){1,5}"#,
        "",
    );
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"xyzQzWlongishoverblownW"#));
}

#[test]
fn test_p1247() {
    let regex = Regex::xpath(
        r#"(x|y|z[QW])++(longish|loquatious|excessive|overblown[QW])++"#,
        "",
    );
    // p
}

#[test]
fn test_p1248() {
    let regex = Regex::xpath(
        r#"(x|y|z[QW])*+(longish|loquatious|excessive|overblown[QW])*+"#,
        "",
    );
    // p
}

#[test]
fn test_p1249() {
    let regex = Regex::xpath(
        r#"(x|y|z[QW]){1,5}+(longish|loquatious|excessive|overblown[QW]){1,5}+"#,
        "",
    );
    // p
}

#[test]
fn test_p1251() {
    let regex = Regex::xpath(r#"a*(?!)"#, "");
    // p
}

#[test]
fn test_p1252() {
    let regex = Regex::xpath(r#"a*(*FAIL)"#, "");
    // p
}

#[test]
fn test_p1253() {
    let regex = Regex::xpath(r#"a*(*F)"#, "");
    // p
}

#[test]
fn test_p1255() {
    let regex = Regex::xpath(r#"(A(A|B(*ACCEPT)|C)D)(E)"#, "");
    // p
}

#[test]
fn test_p1256() {
    let regex = Regex::xpath(r#"(A(A|B(*ACCEPT)|C)D)(E)"#, "");
    // p
}

#[test]
fn test_p1258() {
    let regex = Regex::xpath(r#"(a)(?:(?-1)|(?+1))(b)"#, "");
    // p
}

#[test]
fn test_p1259() {
    let regex = Regex::xpath(r#"(a)(?:(?-1)|(?+1))(b)"#, "");
    // p
}

#[test]
fn test_p1260() {
    let regex = Regex::xpath(r#"(a)(?:(?-1)|(?+1))(b)"#, "");
    // p
}

#[test]
fn test_p1262() {
    let regex = Regex::xpath(r#"(foo)(\g-2)"#, "");
    // p
}

#[test]
fn test_p1263() {
    let regex = Regex::xpath(r#"(foo)(\g-2)(foo)(\g-2)"#, "");
    // p
}

#[test]
fn test_p1264() {
    let regex = Regex::xpath(r#"(([abc]+) \g-1)(([abc]+) \g{-1})"#, "");
    // p
}

#[test]
fn test_p1265() {
    let regex = Regex::xpath(r#"(a)(b)(c)\g1\g2\g3"#, "");
    // p
}

#[test]
fn test_p1268() {
    let regex = Regex::xpath(r#"/(?'n'foo) \k<n>/"#, "");
    // p
}

#[test]
fn test_p1269() {
    let regex = Regex::xpath(r#"/(?'n'foo) \k<n>/"#, "");
    // yM
}

#[test]
fn test_p1270() {
    let regex = Regex::xpath(r#"/(?<n>foo) \k'n'/"#, "");
    // p
}

#[test]
fn test_p1271() {
    let regex = Regex::xpath(r#"/(?<n>foo) \k'n'/"#, "");
    // yM
}

#[test]
fn test_p1272() {
    let regex = Regex::xpath(r#"/(?'a1'foo) \k'a1'/"#, "");
    // yM
}

#[test]
fn test_p1273() {
    let regex = Regex::xpath(r#"/(?<a1>foo) \k<a1>/"#, "");
    // yM
}

#[test]
fn test_p1274() {
    let regex = Regex::xpath(r#"/(?'_'foo) \k'_'/"#, "");
    // yM
}

#[test]
fn test_p1275() {
    let regex = Regex::xpath(r#"/(?<_>foo) \k<_>/"#, "");
    // yM
}

#[test]
fn test_p1276() {
    let regex = Regex::xpath(r#"/(?'_0_'foo) \k'_0_'/"#, "");
    // yM
}

#[test]
fn test_p1277() {
    let regex = Regex::xpath(r#"/(?<_0_>foo) \k<_0_>/"#, "");
    // yM
}

#[test]
fn test_p1278() {
    let regex = Regex::xpath(r#"/(?'0'foo) bar/"#, "");
    // c
}

#[test]
fn test_p1279() {
    let regex = Regex::xpath(r#"/(?<0>foo) bar/"#, "");
    // c
}

#[test]
fn test_p1280() {
    let regex = Regex::xpath(r#"/(?'12'foo) bar/"#, "");
    // c
}

#[test]
fn test_p1281() {
    let regex = Regex::xpath(r#"/(?<12>foo) bar/"#, "");
    // c
}

#[test]
fn test_p1282() {
    let regex = Regex::xpath(r#"/(?'1a'foo) bar/"#, "");
    // c
}

#[test]
fn test_p1283() {
    let regex = Regex::xpath(r#"/(?<1a>foo) bar/"#, "");
    // c
}

#[test]
fn test_p1284() {
    let regex = Regex::xpath(r#"/(?''foo) bar/"#, "");
    // c
}

#[test]
fn test_p1285() {
    let regex = Regex::xpath(r#"/(?<>foo) bar/"#, "");
    // c
}

#[test]
fn test_p1286() {
    let regex = Regex::xpath(r#"/foo \k'n'/"#, "");
    // c
}

#[test]
fn test_p1287() {
    let regex = Regex::xpath(r#"/foo \k<n>/"#, "");
    // c
}

#[test]
fn test_p1288() {
    let regex = Regex::xpath(r#"/foo \k'a1'/"#, "");
    // c
}

#[test]
fn test_p1289() {
    let regex = Regex::xpath(r#"/foo \k<a1>/"#, "");
    // c
}

#[test]
fn test_p1290() {
    let regex = Regex::xpath(r#"/foo \k'_'/"#, "");
    // c
}

#[test]
fn test_p1291() {
    let regex = Regex::xpath(r#"/foo \k<_>/"#, "");
    // c
}

#[test]
fn test_p1292() {
    let regex = Regex::xpath(r#"/foo \k'_0_'/"#, "");
    // c
}

#[test]
fn test_p1293() {
    let regex = Regex::xpath(r#"/foo \k<_0_>/"#, "");
    // c
}

#[test]
fn test_p1294() {
    let regex = Regex::xpath(r#"/foo \k'0'/"#, "");
    // c
}

#[test]
fn test_p1295() {
    let regex = Regex::xpath(r#"/foo \k<0>/"#, "");
    // c
}

#[test]
fn test_p1296() {
    let regex = Regex::xpath(r#"/foo \k'12'/"#, "");
    // c
}

#[test]
fn test_p1297() {
    let regex = Regex::xpath(r#"/foo \k<12>/"#, "");
    // c
}

#[test]
fn test_p1298() {
    let regex = Regex::xpath(r#"/foo \k'1a'/"#, "");
    // c
}

#[test]
fn test_p1299() {
    let regex = Regex::xpath(r#"/foo \k<1a>/"#, "");
    // c
}

#[test]
fn test_p1300() {
    let regex = Regex::xpath(r#"/foo \k''/"#, "");
    // c
}

#[test]
fn test_p1301() {
    let regex = Regex::xpath(r#"/foo \k<>/"#, "");
    // c
}

#[test]
fn test_p1302() {
    let regex = Regex::xpath(r#"/(?<as>as) (\w+) \k<as> (\w+)/"#, "");
    // p
}

#[test]
fn test_p1305() {
    let regex = Regex::xpath(r#"/(?'n'foo) \g{n}/"#, "");
    // p
}

#[test]
fn test_p1306() {
    let regex = Regex::xpath(r#"/(?'n'foo) \g{n}/"#, "");
    // yM
}

#[test]
fn test_p1307() {
    let regex = Regex::xpath(r#"/(?<n>foo) \g{n}/"#, "");
    // p
}

#[test]
fn test_p1308() {
    let regex = Regex::xpath(r#"/(?<n>foo) \g{n}/"#, "");
    // yM
}

#[test]
fn test_p1309() {
    let regex = Regex::xpath(r#"/(?<as>as) (\w+) \g{as} (\w+)/"#, "");
    // p
}

#[test]
fn test_p1312() {
    let regex = Regex::xpath(r#"/(?P<n>foo)(?P=n)/"#, "");
    // p
}

#[test]
fn test_p1313() {
    let regex = Regex::xpath(r#"/(?P<n>foo)(?P=n)/"#, "");
    // yM
}

#[test]
fn test_p1314() {
    let regex = Regex::xpath(r#"/(?:(?P<n>foo)|(?P<n>bar))(?P=n)/"#, "");
    // yM
}

#[test]
fn test_p1315() {
    let regex = Regex::xpath(r#"/^(?P<PAL>(?P<CHAR>.)((?P>PAL)|.?)(?P=CHAR))$/"#, "");
    // p
}

#[test]
fn test_p1316() {
    let regex = Regex::xpath(r#"/^(?P<PAL>(?P<CHAR>.)((?P>PAL)|.?)(?P=CHAR))$/"#, "");
    // p
}

#[test]
fn test_p1317() {
    let regex = Regex::xpath(r#"/(?P<n>foo) (?P=n)/"#, "");
    // p
}

#[test]
fn test_p1318() {
    let regex = Regex::xpath(r#"/(?P<n>foo) (?P=n)/"#, "");
    // yM
}

#[test]
fn test_p1319() {
    let regex = Regex::xpath(r#"/(?P<as>as) (\w+) (?P=as) (\w+)/"#, "");
    // p
}

#[test]
fn test_p1322() {
    let regex = Regex::xpath(r#"(?<=bar>)foo"#, "");
    // p
}

#[test]
fn test_p1323() {
    let regex = Regex::xpath(r#"(?<!bar>)foo"#, "");
    // p
}

#[test]
fn test_p1324() {
    let regex = Regex::xpath(r#"(?<=bar>ABC)foo"#, "");
    // p
}

#[test]
fn test_p1325() {
    let regex = Regex::xpath(r#"(?<!bar>ABC)foo"#, "");
    // p
}

#[test]
fn test_p1326() {
    let regex = Regex::xpath(r#"(?<bar>)foo"#, "");
    // p
}

#[test]
fn test_p1327() {
    let regex = Regex::xpath(r#"(?<bar>ABC)foo"#, "");
    // p
}

#[test]
fn test_p1329() {
    let regex = Regex::xpath(r#"(?<=abcd(?<=(aaaabcd)))"#, "");
    // p
}

#[test]
fn test_p1330() {
    let regex = Regex::xpath(r#"(?=xy(?<=(aaxy)))"#, "");
    // p
}

#[test]
fn test_p1332() {
    let regex = Regex::xpath(r#"X(\w+)(?=\s)|X(\w+)"#, "");
    // p
}

#[test]
fn test_p1335() {
    let regex = Regex::xpath(r#"(?|(a))"#, "");
    // p
}

#[test]
fn test_p1336() {
    let regex = Regex::xpath(r#"(?|a(.)b|d(.(o).)d|i(.)(.)j)(.)"#, "");
    // p
}

#[test]
fn test_p1337() {
    let regex = Regex::xpath(r#"(?|a(.)b|d(.(o).)d|i(.)(.)j)(.)"#, "");
    // p
}

#[test]
fn test_p1338() {
    let regex = Regex::xpath(r#"(?|a(.)b|d(.(o).)d|i(.)(.)j)(.)"#, "");
    // p
}

#[test]
fn test_p1339() {
    let regex = Regex::xpath(r#"(?|(?|(a)|(b))|(?|(c)|(d)))"#, "");
    // p
}

#[test]
fn test_p1340() {
    let regex = Regex::xpath(r#"(?|(?|(a)|(b))|(?|(c)|(d)))"#, "");
    // p
}

#[test]
fn test_p1341() {
    let regex = Regex::xpath(r#"(?|(?|(a)|(b))|(?|(c)|(d)))"#, "");
    // p
}

#[test]
fn test_p1342() {
    let regex = Regex::xpath(r#"(?|(?|(a)|(b))|(?|(c)|(d)))"#, "");
    // p
}

#[test]
fn test_p1343() {
    let regex = Regex::xpath(r#"(.)(?|(.)(.)x|(.)d)(.)"#, "");
    // p
}

#[test]
fn test_p1344() {
    let regex = Regex::xpath(r#"(\N)(?|(\N)(\N)x|(\N)d)(\N)"#, "");
    // p
}

#[test]
fn test_p1345() {
    let regex = Regex::xpath(r#"(?|(?<foo>x))"#, "");
    // yM
}

#[test]
fn test_p1346() {
    let regex = Regex::xpath(r#"(?|(?<foo>x)|(?<bar>y))"#, "");
    // yM
}

#[test]
fn test_p1347() {
    let regex = Regex::xpath(r#"(?|(?<bar>y)|(?<foo>x))"#, "");
    // yM
}

#[test]
fn test_p1348() {
    let regex = Regex::xpath(r#"(?<bar>)(?|(?<foo>x))"#, "");
    // yM
}

#[test]
fn test_p1351() {
    let regex = Regex::xpath(
        r#"(?|(b)|()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()(a))"#,
        "",
    );
    // p
}

#[test]
fn test_p1354() {
    let regex = Regex::xpath(r#"(?(DEFINE)(?<A>(?&B)+)(?<B>a))(?&A)"#, "");
    // p
}

#[test]
fn test_p1355() {
    let regex = Regex::xpath(r#"(?(DEFINE)(?<A>(?&B)+)(?<B>a))(?&A)"#, "");
    // p
}

#[test]
fn test_p1356() {
    let regex = Regex::xpath(r#"\x{100}?(??{""})xxx"#, "");
    // p
}

#[test]
fn test_p1358() {
    let regex = Regex::xpath(r#"foo(\R)bar"#, "");
    // p
}

#[test]
fn test_p1359() {
    let regex = Regex::xpath(r#"foo(\R)bar"#, "");
    // p
}

#[test]
fn test_p1360() {
    let regex = Regex::xpath(r#"foo(\R)bar"#, "");
    // p
}

#[test]
fn test_p1362() {
    let regex = Regex::xpath(r#"foo(\R+)bar"#, "");
    // p
}

#[test]
fn test_p1363() {
    let regex = Regex::xpath(r#"(\V+)(\R)"#, "");
    // p
}

#[test]
fn test_p1364() {
    let regex = Regex::xpath(r#"(\R+)(\V)"#, "");
    // p
}

#[test]
fn test_p1365() {
    let regex = Regex::xpath(r#"foo(\R)bar"#, "");
    // p
}

#[test]
fn test_p1366() {
    let regex = Regex::xpath(r#"(\V)(\R)"#, "");
    // p
}

#[test]
fn test_p1367() {
    let regex = Regex::xpath(r#"(\R)(\V)"#, "");
    // p
}

#[test]
fn test_p1368() {
    let regex = Regex::xpath(r#"foo(\R)bar"#, "");
    // p
}

#[test]
fn test_p1369() {
    let regex = Regex::xpath(r#"(\V)(\R)"#, "");
    // p
}

#[test]
fn test_p1370() {
    let regex = Regex::xpath(r#"(\R)(\V)"#, "");
    // p
}

#[test]
fn test_p1371() {
    let regex = Regex::xpath(r#"foo(\R)bar"#, "");
    // p
}

#[test]
fn test_p1372() {
    let regex = Regex::xpath(r#"(\V)(\R)"#, "");
    // p
}

#[test]
fn test_p1373() {
    let regex = Regex::xpath(r#"(\R)(\V)"#, "");
    // p
}

#[test]
fn test_p1374() {
    let regex = Regex::xpath(r#"foo(\R)bar"#, "");
    // p
}

#[test]
fn test_p1375() {
    let regex = Regex::xpath(r#"(\V)(\R)"#, "");
    // p
}

#[test]
fn test_p1376() {
    let regex = Regex::xpath(r#"(\R)(\V)"#, "");
    // p
}

#[test]
fn test_p1378() {
    let regex = Regex::xpath(r#"foo(\v+)bar"#, "");
    // p
}

#[test]
fn test_p1379() {
    let regex = Regex::xpath(r#"(\V+)(\v)"#, "");
    // p
}

#[test]
fn test_p1380() {
    let regex = Regex::xpath(r#"(\v+)(\V)"#, "");
    // p
}

#[test]
fn test_p1381() {
    let regex = Regex::xpath(r#"foo(\v)bar"#, "");
    // p
}

#[test]
fn test_p1382() {
    let regex = Regex::xpath(r#"(\V)(\v)"#, "");
    // p
}

#[test]
fn test_p1383() {
    let regex = Regex::xpath(r#"(\v)(\V)"#, "");
    // p
}

#[test]
fn test_p1384() {
    let regex = Regex::xpath(r#"foo(\v)bar"#, "");
    // p
}

#[test]
fn test_p1385() {
    let regex = Regex::xpath(r#"(\V)(\v)"#, "");
    // p
}

#[test]
fn test_p1386() {
    let regex = Regex::xpath(r#"(\v)(\V)"#, "");
    // p
}

#[test]
fn test_p1389() {
    let regex = Regex::xpath(r#"foo(\h+)bar"#, "");
    // p
}

#[test]
fn test_p1390() {
    let regex = Regex::xpath(r#"(\H+)(\h)"#, "");
    // p
}

#[test]
fn test_p1391() {
    let regex = Regex::xpath(r#"(\h+)(\H)"#, "");
    // p
}

#[test]
fn test_p1392() {
    let regex = Regex::xpath(r#"foo(\h)bar"#, "");
    // p
}

#[test]
fn test_p1393() {
    let regex = Regex::xpath(r#"(\H)(\h)"#, "");
    // p
}

#[test]
fn test_p1394() {
    let regex = Regex::xpath(r#"(\h)(\H)"#, "");
    // p
}

#[test]
fn test_p1395() {
    let regex = Regex::xpath(r#"foo(\h)bar"#, "");
    // p
}

#[test]
fn test_p1396() {
    let regex = Regex::xpath(r#"(\H)(\h)"#, "");
    // p
}

#[test]
fn test_p1397() {
    let regex = Regex::xpath(r#"(\h)(\H)"#, "");
    // p
}

#[test]
fn test_p1399() {
    let regex = Regex::xpath(r#".*\z"#, "");
    // p
}

#[test]
fn test_p1400() {
    let regex = Regex::xpath(r#"\N*\z"#, "");
    // p
}

#[test]
fn test_p1401() {
    let regex = Regex::xpath(r#".*\Z"#, "");
    // p
}

#[test]
fn test_p1402() {
    let regex = Regex::xpath(r#"\N*\Z"#, "");
    // p
}

#[test]
fn test_p1403() {
    let regex = Regex::xpath(r#"^(?:(\d)x)?\d$"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"1"#));
}

#[test]
fn test_p1404() {
    let regex = Regex::xpath(r#".*?(?:(\w)|(\w))x"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"abx"#));
}

#[test]
fn test_p1406() {
    let regex = Regex::xpath(r#"0{50}"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"000000000000000000000000000000000000000000000000000"#));
}

#[test]
fn test_p1407() {
    let regex = Regex::xpath(r#"^a?(?=b)b"#, "");
    // p
}

#[test]
fn test_p1408() {
    let regex = Regex::xpath(r#"^a*(?=b)b"#, "");
    // p
}

#[test]
fn test_p1409() {
    let regex = Regex::xpath(r#"/>\d+$ \n/ix"#, "");
    // n
    let regex = regex.unwrap();
    assert!(!regex.is_match(r#">10\n"#));
}

#[test]
fn test_p1410() {
    let regex = Regex::xpath(r#"/>\d+$ \n/ix"#, "");
    // n
    let regex = regex.unwrap();
    assert!(!regex.is_match(r#">1\n"#));
}

#[test]
fn test_p1411() {
    let regex = Regex::xpath(r#"/\d+$ \n/ix"#, "");
    // n
    let regex = regex.unwrap();
    assert!(!regex.is_match(r#">10\n"#));
}

#[test]
fn test_p1412() {
    let regex = Regex::xpath(r#"/>\d\d$ \n/ix"#, "");
    // n
    let regex = regex.unwrap();
    assert!(!regex.is_match(r#">10\n"#));
}

#[test]
fn test_p1413() {
    let regex = Regex::xpath(r#"/>\d+$ \n/x"#, "");
    // n
    let regex = regex.unwrap();
    assert!(!regex.is_match(r#">10\n"#));
}

#[test]
fn test_p1417() {
    let regex = Regex::xpath(r#"/^\s*i.*?o\s*$/s"#, "");
    // n
    let regex = regex.unwrap();
    assert!(!regex.is_match(r#"io\n io"#));
}

#[test]
fn test_p1419() {
    let regex = Regex::xpath(r#"/(.*?)a(?!(a+)b\2c)/"#, "");
    // p
}

#[test]
fn test_p1421() {
    let regex = Regex::xpath(r#"/\A(?(?=db2)db2|\D+)(?<!processed)\.csv\z/xms"#, "");
    // p
}

#[test]
fn test_p1422() {
    let regex = Regex::xpath(r#"/\N{U+0100}/"#, "");
    // p
}

#[test]
fn test_p1423() {
    let regex = Regex::xpath(r#"/[a\N{U+0100}]/"#, "");
    // p
}

#[test]
fn test_p1424() {
    let regex = Regex::xpath(r#"/[a\N{U+0100}]/"#, "");
    // p
}

#[test]
fn test_p1427() {
    let regex = Regex::xpath(r#"/\N{U+41}\x{c1}/i"#, "");
    // p
}

#[test]
fn test_p1428() {
    let regex = Regex::xpath(r#"/[\N{U+41}\x{c1}]/i"#, "");
    // p
}

#[test]
fn test_p1430() {
    let regex = Regex::xpath(r#"[\s][\S]"#, "");
    // n
    let regex = regex.unwrap();
    assert!(!regex.is_match(r#"\x{a0}\x{a0}"#));
}

#[test]
fn test_p1433() {
    let regex = Regex::xpath(r#"[\x{100}\xff]"#, "i");
    // p
}

#[test]
fn test_p1435() {
    let regex = Regex::xpath(r#"((??{ "(?:|)" }))\s"#, "");
    // p
}

#[test]
fn test_p1438() {
    let regex = Regex::xpath(r#"abc\N\{U+BEEF}"#, "");
    // p
}

#[test]
fn test_p1439() {
    let regex = Regex::xpath(r#"abc\N\{U+BEEF}"#, "");
    // p
}

#[test]
fn test_p1440() {
    let regex = Regex::xpath(r#"[abc\N\{U+BEEF}]"#, "");
    // c
}

#[test]
fn test_p1443() {
    let regex = Regex::xpath(r#"abc\N"#, "");
    // p
}

#[test]
fn test_p1444() {
    let regex = Regex::xpath(r#"abc\N"#, "");
    // p
}

#[test]
fn test_p1448() {
    let regex = Regex::xpath(r#"/\N{U+}/"#, "");
    // c
}

#[test]
fn test_p1450() {
    let regex = Regex::xpath(r#"/[\N{U+}]/"#, "");
    // Sc
}

#[test]
fn test_p1451() {
    let regex = Regex::xpath(r#"/[\N{U+}]/"#, "");
    // sc
}

#[test]
fn test_p1452() {
    let regex = Regex::xpath(r#"/abc\N{def/"#, "");
    // c
}

#[test]
fn test_p1453() {
    let regex = Regex::xpath(r#"/\N{U+4AG3}/"#, "");
    // c
}

#[test]
fn test_p1454() {
    let regex = Regex::xpath(r#"/[\N{U+4AG3}]/"#, "");
    // c
}

#[test]
fn test_p1458() {
    let regex = Regex::xpath(r#"\N{U+}"#, "");
    // c
}

#[test]
fn test_p1459() {
    let regex = Regex::xpath(r#"[\N{U+}]"#, "");
    // c
}

#[test]
fn test_p1460() {
    let regex = Regex::xpath(r#"\N{U+4AG3}"#, "");
    // c
}

#[test]
fn test_p1461() {
    let regex = Regex::xpath(r#"[\N{U+4AG3}]"#, "");
    // c
}

#[test]
fn test_p1462() {
    let regex = Regex::xpath(r#"abc\N{def"#, "");
    // c
}

#[test]
fn test_p1465() {
    let regex = Regex::xpath(r#"/abc\N {U+41}/x"#, "");
    // c
}

#[test]
fn test_p1466() {
    let regex = Regex::xpath(r#"/abc\N {SPACE}/x"#, "");
    // c
}

#[test]
fn test_p1469() {
    let regex = Regex::xpath(r#"/\N{U+0xBEEF}/"#, "");
    // c
}

#[test]
fn test_p1470() {
    let regex = Regex::xpath(r#"/\N{U+BEEF.BEAD}/"#, "");
    // c
}

#[test]
fn test_p1474() {
    let regex = Regex::xpath(r#"\N{U+0xBEEF}"#, "");
    // c
}

#[test]
fn test_p1475() {
    let regex = Regex::xpath(r#"\c`"#, "");
    // n
    let regex = regex.unwrap();
    assert!(!regex.is_match(r#"-"#));
}

#[test]
fn test_p1476() {
    let regex = Regex::xpath(r#"\c1"#, "");
    // n
    let regex = regex.unwrap();
    assert!(!regex.is_match(r#"-"#));
}

#[test]
fn test_p1477() {
    let regex = Regex::xpath(r#"\cA"#, "");
    // n
    let regex = regex.unwrap();
    assert!(!regex.is_match(r#"\001"#));
}

#[test]
fn test_p1479() {
    let regex = Regex::xpath(r#"\400"#, "");
    // p
}

#[test]
fn test_p1480() {
    let regex = Regex::xpath(r#"\600"#, "");
    // p
}

#[test]
fn test_p1481() {
    let regex = Regex::xpath(r#"\777"#, "");
    // p
}

#[test]
fn test_p1482() {
    let regex = Regex::xpath(r#"[a\400]"#, "");
    // p
}

#[test]
fn test_p1483() {
    let regex = Regex::xpath(r#"[b\600]"#, "");
    // p
}

#[test]
fn test_p1484() {
    let regex = Regex::xpath(r#"[c\777]"#, "");
    // p
}

#[test]
fn test_p1485() {
    let regex = Regex::xpath(r#"\o{120}"#, "");
    // p
}

#[test]
fn test_p1486() {
    let regex = Regex::xpath(r#"\o{400}"#, "");
    // p
}

#[test]
fn test_p1487() {
    let regex = Regex::xpath(r#"\o{1000}"#, "");
    // p
}

#[test]
fn test_p1488() {
    let regex = Regex::xpath(r#"[a\o{120}]"#, "");
    // p
}

#[test]
fn test_p1489() {
    let regex = Regex::xpath(r#"[a\o{400}]"#, "");
    // p
}

#[test]
fn test_p1490() {
    let regex = Regex::xpath(r#"[a\o{1000}]"#, "");
    // p
}

#[test]
fn test_p1493() {
    let regex = Regex::xpath(r#"\87"#, "");
    // p
}

#[test]
fn test_p1494() {
    let regex = Regex::xpath(r#"a\87"#, "");
    // c
}

#[test]
fn test_p1495() {
    let regex = Regex::xpath(r#"a\97"#, "");
    // c
}

#[test]
fn test_p1499() {
    let regex = Regex::xpath(r#"(.)\g2147483648}"#, "");
    // c
}

#[test]
fn test_p1500() {
    let regex = Regex::xpath(r#"(.)\g2147483649}"#, "");
    // c
}

#[test]
fn test_p1501() {
    let regex = Regex::xpath(r#"(.)\g2147483650}"#, "");
    // c
}

#[test]
fn test_p1502() {
    let regex = Regex::xpath(r#"(.)\g4294967296}"#, "");
    // c
}

#[test]
fn test_p1503() {
    let regex = Regex::xpath(r#"(.)\g4294967297}"#, "");
    // c
}

#[test]
fn test_p1504() {
    let regex = Regex::xpath(r#"(.)\g4294967298}"#, "");
    // c
}

#[test]
fn test_p1505() {
    let regex = Regex::xpath(r#"a(.)\g2147483648}"#, "");
    // c
}

#[test]
fn test_p1506() {
    let regex = Regex::xpath(r#"a(.)\g2147483649}"#, "");
    // c
}

#[test]
fn test_p1507() {
    let regex = Regex::xpath(r#"a(.)\g2147483650}"#, "");
    // c
}

#[test]
fn test_p1508() {
    let regex = Regex::xpath(r#"a(.)\g4294967296}"#, "");
    // c
}

#[test]
fn test_p1509() {
    let regex = Regex::xpath(r#"a(.)\g4294967297}"#, "");
    // c
}

#[test]
fn test_p1510() {
    let regex = Regex::xpath(r#"a(.)\g4294967298}"#, "");
    // c
}

#[test]
fn test_p1512() {
    let regex = Regex::xpath(r#"(.)\g{2147483648}"#, "");
    // c
}

#[test]
fn test_p1513() {
    let regex = Regex::xpath(r#"(.)\g{2147483649}"#, "");
    // c
}

#[test]
fn test_p1514() {
    let regex = Regex::xpath(r#"(.)\g{2147483650}"#, "");
    // c
}

#[test]
fn test_p1515() {
    let regex = Regex::xpath(r#"(.)\g{4294967296}"#, "");
    // c
}

#[test]
fn test_p1516() {
    let regex = Regex::xpath(r#"(.)\g{4294967297}"#, "");
    // c
}

#[test]
fn test_p1517() {
    let regex = Regex::xpath(r#"(.)\g{4294967298}"#, "");
    // c
}

#[test]
fn test_p1518() {
    let regex = Regex::xpath(r#"a(.)\g{2147483648}"#, "");
    // c
}

#[test]
fn test_p1519() {
    let regex = Regex::xpath(r#"a(.)\g{2147483649}"#, "");
    // c
}

#[test]
fn test_p1520() {
    let regex = Regex::xpath(r#"a(.)\g{2147483650}"#, "");
    // c
}

#[test]
fn test_p1521() {
    let regex = Regex::xpath(r#"a(.)\g{4294967296}"#, "");
    // c
}

#[test]
fn test_p1522() {
    let regex = Regex::xpath(r#"a(.)\g{4294967297}"#, "");
    // c
}

#[test]
fn test_p1523() {
    let regex = Regex::xpath(r#"a(.)\g{4294967298}"#, "");
    // c
}

#[test]
fn test_p1525() {
    let regex = Regex::xpath(r#"(.)\2147483648"#, "");
    // p
}

#[test]
fn test_p1526() {
    let regex = Regex::xpath(r#"(.)\2147483649"#, "");
    // p
}

#[test]
fn test_p1527() {
    let regex = Regex::xpath(r#"(.)\2147483650"#, "");
    // p
}

#[test]
fn test_p1528() {
    let regex = Regex::xpath(r#"(.)\4294967296"#, "");
    // p
}

#[test]
fn test_p1529() {
    let regex = Regex::xpath(r#"(.)\4294967297"#, "");
    // p
}

#[test]
fn test_p1530() {
    let regex = Regex::xpath(r#"(.)\4294967298"#, "");
    // p
}

#[test]
fn test_p1531() {
    let regex = Regex::xpath(r#"a(.)\2147483648"#, "");
    // p
}

#[test]
fn test_p1532() {
    let regex = Regex::xpath(r#"a(.)\2147483649"#, "");
    // p
}

#[test]
fn test_p1533() {
    let regex = Regex::xpath(r#"a(.)\2147483650"#, "");
    // p
}

#[test]
fn test_p1534() {
    let regex = Regex::xpath(r#"a(.)\4294967296"#, "");
    // p
}

#[test]
fn test_p1535() {
    let regex = Regex::xpath(r#"a(.)\4294967297"#, "");
    // p
}

#[test]
fn test_p1536() {
    let regex = Regex::xpath(r#"a(.)\4294967298"#, "");
    // p
}

#[test]
fn test_p1539() {
    let regex = Regex::xpath(r#"[\8\9]"#, "");
    // Sn
}

#[test]
fn test_p1540() {
    let regex = Regex::xpath(r#"[\8\9]"#, "");
    // sc
}

#[test]
fn test_p1541() {
    let regex = Regex::xpath(r#"[\8\9]"#, "");
    // Sy
}

#[test]
fn test_p1542() {
    let regex = Regex::xpath(r#"[\8\9]"#, "");
    // Sy
}

#[test]
fn test_p1545() {
    let regex = Regex::xpath(r#"[\0]"#, "");
    // Sy
}

#[test]
fn test_p1546() {
    let regex = Regex::xpath(r#"[\0]"#, "");
    // sc
}

#[test]
fn test_p1547() {
    let regex = Regex::xpath(r#"[\07]"#, "");
    // Sy
}

#[test]
fn test_p1548() {
    let regex = Regex::xpath(r#"[\07]"#, "");
    // sc
}

#[test]
fn test_p1549() {
    let regex = Regex::xpath(r#"[\07]"#, "");
    // Sn
}

#[test]
fn test_p1550() {
    let regex = Regex::xpath(r#"[\07]"#, "");
    // sc
}

#[test]
fn test_p1551() {
    let regex = Regex::xpath(r#"[\006]"#, "");
    // p
}

#[test]
fn test_p1552() {
    let regex = Regex::xpath(r#"[\006]"#, "");
    // p
}

#[test]
fn test_p1553() {
    let regex = Regex::xpath(r#"[\0005]"#, "");
    // p
}

#[test]
fn test_p1554() {
    let regex = Regex::xpath(r#"[\0005]"#, "");
    // p
}

#[test]
fn test_p1555() {
    let regex = Regex::xpath(r#"[\_]"#, "");
    // p
}

#[test]
fn test_p1558() {
    let regex = Regex::xpath(r#"(q1|.)*(q2|.)*(x(a|bc)*y){2,}"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"xayxay"#));
}

#[test]
fn test_p1559() {
    let regex = Regex::xpath(r#"(q1|.)*(q2|.)*(x(a|bc)*y){2,3}"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"xayxay"#));
}

#[test]
fn test_p1560() {
    let regex = Regex::xpath(r#"(q1|z)*(q2|z)*z{15}-.*?(x(a|bc)*y){2,3}Z"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"zzzzzzzzzzzzzzzz-xayxayxayxayZ"#));
}

#[test]
fn test_p1562() {
    let regex = Regex::xpath(r#"(?:(?:)foo|bar|zot|rt78356)"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"foo"#));
}

#[test]
fn test_p1563() {
    let regex = Regex::xpath(r#"/\xe0\pL/i"#, "");
    // p
}

#[test]
fn test_p1566() {
    let regex = Regex::xpath(r#"(?{})[\x{100}]"#, "");
    // p
}

#[test]
fn test_p1569() {
    let regex = Regex::xpath(r#"^m?(\S)(.*)\1$"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"aba"#));
}

#[test]
fn test_p1570() {
    let regex = Regex::xpath(r#"^m?(\S)(.*)\1$"#, "");
    // n
    let regex = regex.unwrap();
    assert!(!regex.is_match(r#"\tb\t"#));
}

#[test]
fn test_p1571() {
    let regex = Regex::xpath(r#"^m?(\s)(.*)\1$"#, "");
    // n
    let regex = regex.unwrap();
    assert!(!regex.is_match(r#"\tb\t"#));
}

#[test]
fn test_p1572() {
    let regex = Regex::xpath(r#"^m?(\s)(.*)\1$"#, "");
    // n
    let regex = regex.unwrap();
    assert!(!regex.is_match(r#"aba"#));
}

#[test]
fn test_p1573() {
    let regex = Regex::xpath(r#"^m?(\W)(.*)\1$"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#":b:"#));
}

#[test]
fn test_p1574() {
    let regex = Regex::xpath(r#"^m?(\W)(.*)\1$"#, "");
    // n
    let regex = regex.unwrap();
    assert!(!regex.is_match(r#"aba"#));
}

#[test]
fn test_p1575() {
    let regex = Regex::xpath(r#"^m?(\w)(.*)\1$"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"aba"#));
}

#[test]
fn test_p1576() {
    let regex = Regex::xpath(r#"^m?(\w)(.*)\1$"#, "");
    // n
    let regex = regex.unwrap();
    assert!(!regex.is_match(r#":b:"#));
}

#[test]
fn test_p1577() {
    let regex = Regex::xpath(r#"^m?(\D)(.*)\1$"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"aba"#));
}

#[test]
fn test_p1578() {
    let regex = Regex::xpath(r#"^m?(\D)(.*)\1$"#, "");
    // n
    let regex = regex.unwrap();
    assert!(!regex.is_match(r#"5b5"#));
}

#[test]
fn test_p1579() {
    let regex = Regex::xpath(r#"^m?(\d)(.*)\1$"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"5b5"#));
}

#[test]
fn test_p1580() {
    let regex = Regex::xpath(r#"^m?(\d)(.*)\1$"#, "");
    // n
    let regex = regex.unwrap();
    assert!(!regex.is_match(r#"aba"#));
}

#[test]
fn test_p1583() {
    let regex = Regex::xpath(r#"/s/ai"#, "");
    // n
    let regex = regex.unwrap();
    assert!(!regex.is_match(r#"ſ"#));
}

#[test]
fn test_p1584() {
    let regex = Regex::xpath(r#"/s/aia"#, "");
    // n
    let regex = regex.unwrap();
    assert!(!regex.is_match(r#"ſ"#));
}

#[test]
fn test_p1585() {
    let regex = Regex::xpath(r#"/s/aia"#, "");
    // n
    let regex = regex.unwrap();
    assert!(!regex.is_match(r#"S"#));
}

#[test]
fn test_p1586() {
    let regex = Regex::xpath(r#"(?aia:s)"#, "");
    // p
}

#[test]
fn test_p1587() {
    let regex = Regex::xpath(r#"(?aia:s)"#, "");
    // p
}

#[test]
fn test_p1592() {
    let regex = Regex::xpath(r#"[^\x{1E9E}]/i"#, "");
    // Sn
}

#[test]
fn test_p1595() {
    let regex = Regex::xpath(r#"^.*\d\H"#, "");
    // p
}

#[test]
fn test_p1596() {
    let regex = Regex::xpath(r#"^.*\d\V"#, "");
    // p
}

#[test]
fn test_p1600() {
    let regex = Regex::xpath(r#"^\p{L_}"#, "");
    // p
}

#[test]
fn test_p1601() {
    let regex = Regex::xpath(r#"^\p{L}"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"㐀"#));
}

#[test]
fn test_p1604() {
    let regex = Regex::xpath(r#"[s\xDF]a/ui"#, "");
    // Sy
}

#[test]
fn test_p1605() {
    let regex = Regex::xpath(r#"[s\xDF]a/ui"#, "");
    // p
}

#[test]
fn test_p1608() {
    let regex = Regex::xpath(r#"^\R\x0A$"#, "");
    // p
}

#[test]
fn test_p1610() {
    let regex = Regex::xpath(r#"/ff/i"#, "");
    // n
    let regex = regex.unwrap();
    assert!(!regex.is_match(r#"\x{FB00}\x{FB01}"#));
}

#[test]
fn test_p1611() {
    let regex = Regex::xpath(r#"/ff/i"#, "");
    // n
    let regex = regex.unwrap();
    assert!(!regex.is_match(r#"\x{FB01}\x{FB00}"#));
}

#[test]
fn test_p1612() {
    let regex = Regex::xpath(r#"/fi/i"#, "");
    // n
    let regex = regex.unwrap();
    assert!(!regex.is_match(r#"\x{FB01}\x{FB00}"#));
}

#[test]
fn test_p1613() {
    let regex = Regex::xpath(r#"/fi/i"#, "");
    // n
    let regex = regex.unwrap();
    assert!(!regex.is_match(r#"\x{FB00}\x{FB01}"#));
}

#[test]
fn test_p1616() {
    let regex = Regex::xpath(r#"(?#( (?{1+)a"#, "");
    // p
}

#[test]
fn test_p1617() {
    let regex = Regex::xpath(r#"a# (?{1+"#, "x");
    // p
}

#[test]
fn test_p1618() {
    let regex = Regex::xpath(r#"ab[(?{1]"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"ab1"#));
}

#[test]
fn test_p1619() {
    let regex = Regex::xpath(r#"ab[(?{1\](?{2]"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"ab2"#));
}

#[test]
fn test_p1620() {
    let regex = Regex::xpath(r#"ab(?{"["})cd"#, "");
    // p
}

#[test]
fn test_p1621() {
    let regex = Regex::xpath(r#"ab(??{"[x]"})cd"#, "");
    // p
}

#[test]
fn test_p1622() {
    let regex = Regex::xpath(r#"ab\[(??{1})c"#, "");
    // p
}

#[test]
fn test_p1623() {
    let regex = Regex::xpath(r#"ab\\[(??{1;})]c"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"ab\;c"#));
}

#[test]
fn test_p1624() {
    let regex = Regex::xpath(r#"ab\\\[(??{1})c"#, "");
    // p
}

#[test]
fn test_p1625() {
    let regex = Regex::xpath(r#"ab[c\](??{"]d"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"abcd"#));
}

#[test]
fn test_p1626() {
    let regex = Regex::xpath(r#"ab[c\\](??{"[x]"})d"#, "");
    // p
}

#[test]
fn test_p1627() {
    let regex = Regex::xpath(r#"ab[c\\\](??{"x"})]{3}d"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"ab\](d"#));
}

#[test]
fn test_p1631() {
    let regex = Regex::xpath(r#"/ffiffl/i"#, "");
    // n
    let regex = regex.unwrap();
    assert!(!regex.is_match(r#"abcdef\x{FB03}\x{FB04}"#));
}

#[test]
fn test_p1632() {
    let regex = Regex::xpath(r#"/\xdf\xdf/ui"#, "");
    // p
}

#[test]
fn test_p1634() {
    let regex = Regex::xpath(r#"/st/i"#, "");
    // n
    let regex = regex.unwrap();
    assert!(!regex.is_match(r#"\x{DF}\x{FB05}"#));
}

#[test]
fn test_p1635() {
    let regex = Regex::xpath(r#"/ssst/i"#, "");
    // n
    let regex = regex.unwrap();
    assert!(!regex.is_match(r#"\x{DF}\x{FB05}"#));
}

#[test]
fn test_p1636() {
    let regex = Regex::xpath(r#"/[s]s/i"#, "");
    // n
    let regex = regex.unwrap();
    assert!(!regex.is_match(r#"\x{DF}"#));
}

#[test]
fn test_p1637() {
    let regex = Regex::xpath(r#"/s[s]/i"#, "");
    // n
    let regex = regex.unwrap();
    assert!(!regex.is_match(r#"\x{DF}"#));
}

#[test]
fn test_p1640() {
    let regex = Regex::xpath(r#"/[[:lower:]]/i"#, "");
    // p
}

#[test]
fn test_p1641() {
    let regex = Regex::xpath(r#"/[[:upper:]]/i"#, "");
    // p
}

#[test]
fn test_p1645() {
    let regex = Regex::xpath(r#"/s\xDF/ui"#, "");
    // p
}

#[test]
fn test_p1646() {
    let regex = Regex::xpath(r#"/sst/ui"#, "");
    // n
    let regex = regex.unwrap();
    assert!(!regex.is_match(r#"s\N{LATIN SMALL LIGATURE ST}"#));
}

#[test]
fn test_p1647() {
    let regex = Regex::xpath(r#"/sst/ui"#, "");
    // n
    let regex = regex.unwrap();
    assert!(!regex.is_match(r#"s\N{LATIN SMALL LIGATURE LONG S T}"#));
}

#[test]
fn test_p1650() {
    let regex = Regex::xpath(r#"/[[:ascii:]]/i"#, "");
    // p
}

#[test]
fn test_p1654() {
    let regex = Regex::xpath(r#"/[[:lower:]]/i"#, "");
    // p
}

#[test]
fn test_p1655() {
    let regex = Regex::xpath(r#"/[[:upper:]]/i"#, "");
    // p
}

#[test]
fn test_p1658() {
    let regex = Regex::xpath(r#"[^\p{Alphabetic}]"#, "");
    // p
}

#[test]
fn test_p1661() {
    let regex = Regex::xpath(r#"/[[:alnum:]]/"#, "");
    // p
}

#[test]
fn test_p1662() {
    let regex = Regex::xpath(r#"/[[:alnum:]]/"#, "");
    // p
}

#[test]
fn test_p1663() {
    let regex = Regex::xpath(r#"/[[:alpha:]]/"#, "");
    // p
}

#[test]
fn test_p1664() {
    let regex = Regex::xpath(r#"/[[:alpha:]]/"#, "");
    // p
}

#[test]
fn test_p1665() {
    let regex = Regex::xpath(r#"/[[:graph:]]/"#, "");
    // p
}

#[test]
fn test_p1666() {
    let regex = Regex::xpath(r#"/[[:graph:]]/"#, "");
    // p
}

#[test]
fn test_p1667() {
    let regex = Regex::xpath(r#"/[[:lower:]]/"#, "");
    // p
}

#[test]
fn test_p1668() {
    let regex = Regex::xpath(r#"/[[:lower:]]/"#, "");
    // p
}

#[test]
fn test_p1669() {
    let regex = Regex::xpath(r#"/[[:lower:]]/"#, "");
    // p
}

#[test]
fn test_p1670() {
    let regex = Regex::xpath(r#"/[[:print:]]/"#, "");
    // p
}

#[test]
fn test_p1671() {
    let regex = Regex::xpath(r#"/[[:print:]]/"#, "");
    // p
}

#[test]
fn test_p1672() {
    let regex = Regex::xpath(r#"/[[:punct:]]/"#, "");
    // p
}

#[test]
fn test_p1673() {
    let regex = Regex::xpath(r#"/[[:punct:]]/"#, "");
    // p
}

#[test]
fn test_p1674() {
    let regex = Regex::xpath(r#"/[[:punct:]]/"#, "");
    // p
}

#[test]
fn test_p1675() {
    let regex = Regex::xpath(r#"/[[:upper:]]/"#, "");
    // p
}

#[test]
fn test_p1676() {
    let regex = Regex::xpath(r#"/[[:upper:]]/"#, "");
    // p
}

#[test]
fn test_p1677() {
    let regex = Regex::xpath(r#"/[[:word:]]/"#, "");
    // p
}

#[test]
fn test_p1678() {
    let regex = Regex::xpath(r#"/[[:word:]]/"#, "");
    // p
}

#[test]
fn test_p1681() {
    let regex = Regex::xpath(r#"/syntax OK\s+\z/si"#, "");
    // p
}

#[test]
fn test_p1683() {
    let regex = Regex::xpath(r#"^(.*?)\s*\|\s*(?:\/\s*|)'(.+)'$"#, "");
    // p
}

#[test]
fn test_p1684() {
    let regex = Regex::xpath(r#"^(foo|)bar$"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"bar"#));
}

#[test]
fn test_p1685() {
    let regex = Regex::xpath(r#"^(foo||baz)bar$"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"bar"#));
}

#[test]
fn test_p1686() {
    let regex = Regex::xpath(r#"^(foo||baz)bar$"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"bazbar"#));
}

#[test]
fn test_p1687() {
    let regex = Regex::xpath(r#"^(foo||baz)bar$"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"foobar"#));
}

#[test]
fn test_p1689() {
    let regex = Regex::xpath(r#"^(?:foo|)bar$"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"bar"#));
}

#[test]
fn test_p1690() {
    let regex = Regex::xpath(r#"^(?:foo||baz)bar$"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"bar"#));
}

#[test]
fn test_p1691() {
    let regex = Regex::xpath(r#"^(?:foo||baz)bar$"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"bazbar"#));
}

#[test]
fn test_p1692() {
    let regex = Regex::xpath(r#"^(?:foo||baz)bar$"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"foobar"#));
}

#[test]
fn test_p1694() {
    let regex = Regex::xpath(r#"^(?i:foo|)bar$"#, "");
    // p
}

#[test]
fn test_p1695() {
    let regex = Regex::xpath(r#"^(?i:foo||baz)bar$"#, "");
    // p
}

#[test]
fn test_p1696() {
    let regex = Regex::xpath(r#"^(?i:foo||baz)bar$"#, "");
    // p
}

#[test]
fn test_p1697() {
    let regex = Regex::xpath(r#"^(?i:foo||baz)bar$"#, "");
    // p
}

#[test]
fn test_p1701() {
    let regex = Regex::xpath(r#"^(.)(?:(..)|B)[CX]"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"ABCDE"#));
}

#[test]
fn test_p1703() {
    let regex = Regex::xpath(r#"^(.)(?:BC(.)|B)[CX]"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"ABCDE"#));
}

#[test]
fn test_p1705() {
    let regex = Regex::xpath(r#"^(.)(?:(.)+)*[BX]"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"ABCDE"#));
}

#[test]
fn test_p1707() {
    let regex = Regex::xpath(r#"^(.)(BC)*"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"ABCDE"#));
}

#[test]
fn test_p1708() {
    let regex = Regex::xpath(r#"^(.)(BC)*[BX]"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"ABCDE"#));
}

#[test]
fn test_p1710() {
    let regex = Regex::xpath(r#"^(.)(B)*.[DX]"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"ABCDE"#));
}

#[test]
fn test_p1711() {
    let regex = Regex::xpath(r#"^(.)(B)*.[CX]"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"ABCDE"#));
}

#[test]
fn test_p1714() {
    let regex = Regex::xpath(r#"^(A)(?{"xyz"})B$"#, "");
    // p
}

#[test]
fn test_p1715() {
    let regex = Regex::xpath(r#"^(A)(?{return "xyz"})B$"#, "");
    // p
}

#[test]
fn test_p1716() {
    let regex = Regex::xpath(r#"^(A)((??{"xyz"}))$"#, "");
    // p
}

#[test]
fn test_p1717() {
    let regex = Regex::xpath(r#"^(A)((??{return "xyz"}))$"#, "");
    // p
}

#[test]
fn test_p1718() {
    let regex = Regex::xpath(r#"^(A)((?(?{1})abc|xyz))$"#, "");
    // p
}

#[test]
fn test_p1719() {
    let regex = Regex::xpath(r#"^(A)((?(?{0})abc|xyz))$"#, "");
    // p
}

#[test]
fn test_p1720() {
    let regex = Regex::xpath(r#"^(A)((?(?{return 1})abc|xyz))$"#, "");
    // p
}

#[test]
fn test_p1721() {
    let regex = Regex::xpath(r#"^(A)((?(?{return 0})abc|xyz))$"#, "");
    // p
}

#[test]
fn test_p1726() {
    let regex = Regex::xpath(r#"/^(a)((??{"b"}))$/i"#, "");
    // p
}

#[test]
fn test_p1727() {
    let regex = Regex::xpath(r#"/^(A)((??{'B$'}))(\nC)$/m"#, "");
    // p
}

#[test]
fn test_p1728() {
    let regex = Regex::xpath(r#"/^(A)((??{'.'}))(B)$/s"#, "");
    // p
}

#[test]
fn test_p1729() {
    let regex = Regex::xpath(r#"/^(A) ((??{' .'}))(B)$/x"#, "");
    // p
}

#[test]
fn test_p1730() {
    let regex = Regex::xpath(r#"/^((??{'\d'}))$/a"#, "");
    // p
}

#[test]
fn test_p1731() {
    let regex = Regex::xpath(r#"/^(??{"s"})$/i"#, "");
    // p
}

#[test]
fn test_p1732() {
    let regex = Regex::xpath(r#"/^(??{"s"})$/ia"#, "");
    // p
}

#[test]
fn test_p1733() {
    let regex = Regex::xpath(r#"/^(??{"s"})$/iaa"#, "");
    // p
}

#[test]
fn test_p1734() {
    let regex = Regex::xpath(r#"/^(??{'\w'})$/u"#, "");
    // p
}

#[test]
fn test_p1739() {
    let regex = Regex::xpath(r#"^(?:(X)?(\d)|(X)?(\d\d))$"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"X12"#));
}

#[test]
fn test_p1740() {
    let regex = Regex::xpath(r#"^(?:(XX)?(\d)|(XX)?(\d\d))$"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"XX12"#));
}

#[test]
fn test_p1743() {
    let regex = Regex::xpath(r#"\A(?>\[(?:(?:)(?:R){1}|T|V?|A)\])\z"#, "");
    // p
}

#[test]
fn test_p1745() {
    let regex = Regex::xpath(r#"( [^z] $ [^z]+)"#, "xm");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(
        r#"as
bb
cc
"#
    ));
}

#[test]
fn test_p1748() {
    let regex = Regex::xpath(r#"[\h]"#, "");
    // p
}

#[test]
fn test_p1749() {
    let regex = Regex::xpath(r#"[\H]"#, "");
    // p
}

#[test]
fn test_p1750() {
    let regex = Regex::xpath(r#"[\H]"#, "");
    // p
}

#[test]
fn test_p1751() {
    let regex = Regex::xpath(r#"[\H]"#, "");
    // p
}

#[test]
fn test_p1753() {
    let regex = Regex::xpath(r#"[^\n]+"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"\nb"#));
}

#[test]
fn test_p1754() {
    let regex = Regex::xpath(r#"[^\n]+"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"a\n"#));
}

#[test]
fn test_p1757() {
    let regex = Regex::xpath(r#"(?a:\p{Any})"#, "");
    // p
}

#[test]
fn test_p1758() {
    let regex = Regex::xpath(r#"(?aa:\p{Any})"#, "");
    // p
}

#[test]
fn test_p1760() {
    let regex = Regex::xpath(r#"\w"#, "");
    // n
    let regex = regex.unwrap();
    assert!(!regex.is_match(r#"‌"#));
}

#[test]
fn test_p1761() {
    let regex = Regex::xpath(r#"\W"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"‌"#));
}

#[test]
fn test_p1762() {
    let regex = Regex::xpath(r#"\w"#, "");
    // n
    let regex = regex.unwrap();
    assert!(!regex.is_match(r#"‍"#));
}

#[test]
fn test_p1763() {
    let regex = Regex::xpath(r#"\W"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"‍"#));
}

#[test]
fn test_p1765() {
    let regex = Regex::xpath(r#"/^(?d:\xdf|_)*_/i"#, "");
    // p
}

#[test]
fn test_p1770() {
    let regex = Regex::xpath(r#"(\x{100})"#, "");
    // p
}

#[test]
fn test_p1772() {
    let regex = Regex::xpath(r#"^\R{2}$"#, "");
    // p
}

#[test]
fn test_p1774() {
    let regex = Regex::xpath(r#"/^\D{11}/a"#, "");
    // n
    let regex = regex.unwrap();
    assert!(!regex.is_match(r#"\x{10FFFF}\x{10FFFF}\x{10FFFF}\x{10FFFF}\x{10FFFF}\x{10FFFF}\x{10FFFF}\x{10FFFF}\x{10FFFF}\x{10FFFF}"#));
}

#[test]
fn test_p1775() {
    let regex = Regex::xpath(r#"/^\S{11}/a"#, "");
    // n
    let regex = regex.unwrap();
    assert!(!regex.is_match(r#"\x{10FFFF}\x{10FFFF}\x{10FFFF}\x{10FFFF}\x{10FFFF}\x{10FFFF}\x{10FFFF}\x{10FFFF}\x{10FFFF}\x{10FFFF}"#));
}

#[test]
fn test_p1776() {
    let regex = Regex::xpath(r#"/^\W{11}/a"#, "");
    // n
    let regex = regex.unwrap();
    assert!(!regex.is_match(r#"\x{10FFFF}\x{10FFFF}\x{10FFFF}\x{10FFFF}\x{10FFFF}\x{10FFFF}\x{10FFFF}\x{10FFFF}\x{10FFFF}\x{10FFFF}"#));
}

#[test]
fn test_p1779() {
    let regex = Regex::xpath(r#"\Vn"#, "");
    // p
}

#[test]
fn test_p1782() {
    let regex = Regex::xpath(r#"/(?l:a?\w)/"#, "");
    // p
}

#[test]
fn test_p1783() {
    let regex = Regex::xpath(r#"/(?l:a?\D)/"#, "");
    // p
}

#[test]
fn test_p1784() {
    let regex = Regex::xpath(r#"^_?[^\S_0-9]\w*\z"#, "");
    // p
}

#[test]
fn test_p1785() {
    let regex = Regex::xpath(r#"m?^xy\?$?"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"xy?"#));
}

#[test]
fn test_p1786() {
    let regex = Regex::xpath(r#"a?\X"#, "");
    // p
}

#[test]
fn test_p1787() {
    let regex = Regex::xpath(r#"a?\R"#, "");
    // p
}

#[test]
fn test_p1788() {
    let regex = Regex::xpath(r#"^a?\N$"#, "");
    // p
}

#[test]
fn test_p1789() {
    let regex = Regex::xpath(r#"\N?a"#, "");
    // p
}

#[test]
fn test_p1790() {
    let regex = Regex::xpath(r#"\s?\s"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"	"#));
}

#[test]
fn test_p1791() {
    let regex = Regex::xpath(r#"\s?\d"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"3"#));
}

#[test]
fn test_p1792() {
    let regex = Regex::xpath(r#"\s?\S"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"A"#));
}

#[test]
fn test_p1796() {
    let regex = Regex::xpath(r#"^(\x{100}|a)(??{ qr/.?\xF7/d})"#, "");
    // p
}

#[test]
fn test_p1799() {
    let regex = Regex::xpath(r#"(a|(bc)){0,0}?xyz"#, "");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"xyz"#));
}

#[test]
fn test_p1800() {
    let regex = Regex::xpath(r#"( a | ( bc ) ) {0,0} ? xyz"#, "x");
    // y
    let regex = regex.unwrap();
    assert!(regex.is_match(r#"xyz"#));
}

// #[test]
// fn test_p1802() {
//     let regex = Regex::xpath(r#"(a|(bc)){0,0}+xyz"#, "");
//     // p
// }

// #[test]
// fn test_p1803() {
//     let regex = Regex::xpath(r#"(( a | ( bc ) ) {0,0} )+ xyz"#, "x");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"xyz"#));
// }

// #[test]
// fn test_p1805() {
//     let regex = Regex::xpath(r#"(A(*PRUNE)B|A(*PRUNE)C)"#, "");
//     // p
// }

// #[test]
// fn test_p1806() {
//     let regex = Regex::xpath(r#"(A(*PRUNE)B|A(*PRUNE)D|A(*PRUNE)C)"#, "");
//     // p
// }

// #[test]
// fn test_p1807() {
//     let regex = Regex::xpath(r#"(A(*PRUNE)B|A(*PRUNE)C|A(*PRUNE)D)"#, "");
//     // p
// }

// #[test]
// fn test_p1808() {
//     let regex = Regex::xpath(r#"((A(*PRUNE)B|A(*PRUNE)C))"#, "");
//     // p
// }

// #[test]
// fn test_p1809() {
//     let regex = Regex::xpath(r#"((A(*PRUNE)B|A(*PRUNE)D|A(*PRUNE)C))"#, "");
//     // p
// }

// #[test]
// fn test_p1810() {
//     let regex = Regex::xpath(r#"((A(*PRUNE)B|A(*PRUNE)C|A(*PRUNE)D))"#, "");
//     // p
// }

// #[test]
// fn test_p1812() {
//     let regex = Regex::xpath(r#"A+?(*THEN)BC"#, "");
//     // p
// }

// #[test]
// fn test_p1813() {
//     let regex = Regex::xpath(r#"A+?(*PRUNE)BC"#, "");
//     // p
// }

// #[test]
// fn test_p1814() {
//     let regex = Regex::xpath(r#"A+(*THEN)BC"#, "");
//     // p
// }

// #[test]
// fn test_p1815() {
//     let regex = Regex::xpath(r#"A+(*PRUNE)BC"#, "");
//     // p
// }

// #[test]
// fn test_p1816() {
//     let regex = Regex::xpath(r#"A+?(*THEN)BC(?{})"#, "");
//     // p
// }

// #[test]
// fn test_p1817() {
//     let regex = Regex::xpath(r#"A+?(*PRUNE)BC(?{})"#, "");
//     // p
// }

// #[test]
// fn test_p1818() {
//     let regex = Regex::xpath(r#"A+(*THEN)BC(?{})"#, "");
//     // p
// }

// #[test]
// fn test_p1819() {
//     let regex = Regex::xpath(r#"A+(*PRUNE)BC(?{})"#, "");
//     // p
// }

// #[test]
// fn test_p1820() {
//     let regex = Regex::xpath(r#"[#]"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"a#b"#));
// }

// #[test]
// fn test_p1821() {
//     let regex = Regex::xpath(r#"[#]b"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"a#b"#));
// }

// #[test]
// fn test_p1822() {
//     let regex = Regex::xpath(r#"[#]"#, "x");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"a#b"#));
// }

// #[test]
// fn test_p1823() {
//     let regex = Regex::xpath(r#"[#]b"#, "x");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"a#b"#));
// }

// #[test]
// fn test_p1824() {
//     let regex = Regex::xpath(r#"[#](?{})"#, "x");
//     // p
// }

// #[test]
// fn test_p1825() {
//     let regex = Regex::xpath(r#"[#](??{'b'})"#, "x");
//     // p
// }

// #[test]
// fn test_p1826() {
//     let regex = Regex::xpath(r#"(?#)(?{})b"#, "");
//     // p
// }

// #[test]
// fn test_p1827() {
//     let regex = Regex::xpath(r#"(?#)(??{'b'})"#, "");
//     // p
// }

// #[test]
// fn test_p1828() {
//     let regex = Regex::xpath(r#"[(?#](?{})b"#, "");
//     // p
// }

// #[test]
// fn test_p1829() {
//     let regex = Regex::xpath(r#"[(?#](??{'b'})"#, "");
//     // p
// }

// #[test]
// fn test_p1830() {
//     let regex = Regex::xpath(r#"(?#)(?{})b"#, "x");
//     // p
// }

// #[test]
// fn test_p1831() {
//     let regex = Regex::xpath(r#"(?#)(??{'b'})"#, "x");
//     // p
// }

// #[test]
// fn test_p1834() {
//     let regex = Regex::xpath(r#"^(?=(a)){0}b(?1)"#, "");
//     // p
// }

// #[test]
// fn test_p1836() {
//     let regex = Regex::xpath(r#"(?:(a(*SKIP)b)){0}(?:(?1)|ac)"#, "");
//     // p
// }

// #[test]
// fn test_p1838() {
//     let regex = Regex::xpath(r#"(?1)(?:(b)){0}"#, "");
//     // p
// }

// #[test]
// fn test_p1840() {
//     let regex = Regex::xpath(r#"^A*\z"#, "");
//     // p
// }

// #[test]
// fn test_p1841() {
//     let regex = Regex::xpath(r#"\N* "#, "x");
//     // p
// }

// #[test]
// fn test_p1842() {
//     let regex = Regex::xpath(r#"\N (?#comment) * "#, "x");
//     // p
// }

// #[test]
// fn test_p1845() {
//     let regex = Regex::xpath(r#"(?<W>a)(?<BB>(?=(?&W))(?<=(?&W)))(?&BB)"#, "");
//     // p
// }

// #[test]
// fn test_p1848() {
//     let regex = Regex::xpath(r#"^\S+="#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"Σ=Π"#));
// }

// #[test]
// fn test_p1852() {
//     let regex = Regex::xpath(r#"\x{100}[xy]\x{100}{2}"#, "");
//     // p
// }

// #[test]
// fn test_p1853() {
//     let regex = Regex::xpath(r#"\x{100}a{2,3}"#, "");
//     // p
// }

// #[test]
// fn test_p1854() {
//     let regex = Regex::xpath(r#"^x?abc?de"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"abcde"#));
// }

// #[test]
// fn test_p1856() {
//     let regex = Regex::xpath(r#"(?-m:^abc)"#, "m");
//     // p
// }

// #[test]
// fn test_p1857() {
//     let regex = Regex::xpath(r#"(?-m:^abc)"#, "m");
//     // p
// }

// #[test]
// fn test_p1860() {
//     let regex = Regex::xpath(r#"/^[+]([^(]+)$/mi"#, "");
//     // n
//     let regex = regex.unwrap();
//     assert!(!regex.is_match(r#"li"#));
// }

// #[test]
// fn test_p1863() {
//     let regex = Regex::xpath(r#"/(.)((o)\1)(?2)/"#, "");
//     // p
// }

// #[test]
// fn test_p1864() {
//     let regex = Regex::xpath(r#"/(.)(?2)((\1)(?4)(\1))/"#, "");
//     // p
// }

// #[test]
// fn test_p1865() {
//     let regex = Regex::xpath(r#"/(.)(?2)((.)(?4)(\1))/"#, "");
//     // p
// }

// #[test]
// fn test_p1866() {
//     let regex = Regex::xpath(r#"/^(.\2?)(.)(?1)$/"#, "");
//     // p
// }

// #[test]
// fn test_p1867() {
//     let regex = Regex::xpath(r#"/^(.\1?)(?1)$/"#, "");
//     // p
// }

// #[test]
// fn test_p1868() {
//     let regex = Regex::xpath(r#"/^ (\3(?2)\3)? ((.)) (?1) $/x"#, "");
//     // p
// }

// #[test]
// fn test_p1869() {
//     let regex = Regex::xpath(r#"/^ (a|\3(?1)\2|(?2)) ((b|c)(?4)?) (?1) (d(?1)) $/x"#, "");
//     // p
// }

// #[test]
// fn test_p1872() {
//     let regex = Regex::xpath(r#"(a)\2/"#, "");
//     // c
// }

// #[test]
// fn test_p1873() {
//     let regex = Regex::xpath(r#"(a)(b)\3"#, "");
//     // c
// }

// #[test]
// fn test_p1874() {
//     let regex = Regex::xpath(r#"(a)(b)(c)\4"#, "");
//     // c
// }

// #[test]
// fn test_p1875() {
//     let regex = Regex::xpath(r#"(a)(b)(c)(d)\5"#, "");
//     // c
// }

// #[test]
// fn test_p1876() {
//     let regex = Regex::xpath(r#"(a)(b)(c)(d)(e)\6"#, "");
//     // c
// }

// #[test]
// fn test_p1877() {
//     let regex = Regex::xpath(r#"(a)(b)(c)(d)(e)(f)\7"#, "");
//     // c
// }

// #[test]
// fn test_p1878() {
//     let regex = Regex::xpath(r#"(a)(b)(c)(d)(e)(f)(g)(h)(i)\10"#, "");
//     // n
//     let regex = regex.unwrap();
//     assert!(!regex.is_match(r#"abcdefghi\10"#));
// }

// #[test]
// fn test_p1879() {
//     let regex = Regex::xpath(r#"(a)(b)(c)(d)(e)(f)(g)(h)(i)(j)\11"#, "");
//     // n
//     let regex = regex.unwrap();
//     assert!(!regex.is_match(r#"abcdefghij\11"#));
// }

// #[test]
// fn test_p1880() {
//     let regex = Regex::xpath(r#"(a)(b)(c)(d)(e)(f)(g)(h)(i)(j)(k)\12"#, "");
//     // n
//     let regex = regex.unwrap();
//     assert!(!regex.is_match(r#"abcdefghijk\12"#));
// }

// #[test]
// fn test_p1881() {
//     let regex = Regex::xpath(r#"(a)(b)(c)(d)(e)(f)(g)(h)(i)(j)(k)\12\13\14"#, "");
//     // n
//     let regex = regex.unwrap();
//     assert!(!regex.is_match(r#"abcdefghijk\12\13\14"#));
// }

// #[test]
// fn test_p1883() {
//     let regex = Regex::xpath(r#"\d<(.*?)>"#, "");
//     // n
//     let regex = regex.unwrap();
//     assert!(!regex.is_match(r#"a<>"#));
// }

// #[test]
// fn test_p1884() {
//     let regex = Regex::xpath(r#"[bcd].{2,3}aaaa"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"XbXaaaaa"#));
// }

// #[test]
// fn test_p1885() {
//     let regex = Regex::xpath(r#"[bcd].{2,3}aaaa"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"XbĀaaaaa"#));
// }

// #[test]
// fn test_p1886() {
//     let regex = Regex::xpath(r#"\Awibble\z"#, "m");
//     // p
// }

// #[test]
// fn test_p1887() {
//     let regex = Regex::xpath(r#"(alias|status)es$"#, "i");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"Statuses"#));
// }
