// // This file is generated by regexml-convert-perl-tests
// // Do not edit this file directly (except to auto-format)

// use regexml::Regex;

// #[test]
// fn test_p10() {
//     let regex = Regex::xpath(r#"abc"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"abc"#));
// }

// #[test]
// fn test_p11() {
//     let regex = Regex::xpath(r#"abc"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"abc"#));
// }

// #[test]
// fn test_p12() {
//     let regex = Regex::xpath(r#"abc"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"abc"#));
// }

// #[test]
// fn test_p13() {
//     let regex = Regex::xpath(r#"abc"#, "");
//     // n
//     let regex = regex.unwrap();
//     assert!(!regex.is_match(r#"xbc"#));
// }

// #[test]
// fn test_p14() {
//     let regex = Regex::xpath(r#"abc"#, "");
//     // n
//     let regex = regex.unwrap();
//     assert!(!regex.is_match(r#"axc"#));
// }

// #[test]
// fn test_p15() {
//     let regex = Regex::xpath(r#"abc"#, "");
//     // n
//     let regex = regex.unwrap();
//     assert!(!regex.is_match(r#"abx"#));
// }

// #[test]
// fn test_p16() {
//     let regex = Regex::xpath(r#"abc"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"xabcy"#));
// }

// #[test]
// fn test_p17() {
//     let regex = Regex::xpath(r#"abc"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"xabcy"#));
// }

// #[test]
// fn test_p18() {
//     let regex = Regex::xpath(r#"abc"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"xabcy"#));
// }

// #[test]
// fn test_p19() {
//     let regex = Regex::xpath(r#"abc"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"ababc"#));
// }

// #[test]
// fn test_p20() {
//     let regex = Regex::xpath(r#"abc"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"ababc"#));
// }

// #[test]
// fn test_p21() {
//     let regex = Regex::xpath(r#"abc"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"ababc"#));
// }

// #[test]
// fn test_p22() {
//     let regex = Regex::xpath(r#"ab*c"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"abc"#));
// }

// #[test]
// fn test_p23() {
//     let regex = Regex::xpath(r#"ab*c"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"abc"#));
// }

// #[test]
// fn test_p24() {
//     let regex = Regex::xpath(r#"ab*c"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"abc"#));
// }

// #[test]
// fn test_p25() {
//     let regex = Regex::xpath(r#"ab*bc"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"abc"#));
// }

// #[test]
// fn test_p26() {
//     let regex = Regex::xpath(r#"ab*bc"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"abc"#));
// }

// #[test]
// fn test_p27() {
//     let regex = Regex::xpath(r#"ab*bc"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"abc"#));
// }

// #[test]
// fn test_p28() {
//     let regex = Regex::xpath(r#"ab*bc"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"abbc"#));
// }

// #[test]
// fn test_p29() {
//     let regex = Regex::xpath(r#"ab*bc"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"abbc"#));
// }

// #[test]
// fn test_p30() {
//     let regex = Regex::xpath(r#"ab*bc"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"abbc"#));
// }

// #[test]
// fn test_p31() {
//     let regex = Regex::xpath(r#"ab*bc"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"abbbbc"#));
// }

// #[test]
// fn test_p32() {
//     let regex = Regex::xpath(r#"ab*bc"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"abbbbc"#));
// }

// #[test]
// fn test_p33() {
//     let regex = Regex::xpath(r#"ab*bc"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"abbbbc"#));
// }

// #[test]
// fn test_p34() {
//     let regex = Regex::xpath(r#".{1}"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"abbbbc"#));
// }

// #[test]
// fn test_p35() {
//     let regex = Regex::xpath(r#".{1}"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"abbbbc"#));
// }

// #[test]
// fn test_p36() {
//     let regex = Regex::xpath(r#".{1}"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"abbbbc"#));
// }

// #[test]
// fn test_p37() {
//     let regex = Regex::xpath(r#".{3,4}"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"abbbbc"#));
// }

// #[test]
// fn test_p38() {
//     let regex = Regex::xpath(r#".{3,4}"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"abbbbc"#));
// }

// #[test]
// fn test_p39() {
//     let regex = Regex::xpath(r#".{3,4}"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"abbbbc"#));
// }

// #[test]
// fn test_p52() {
//     let regex = Regex::xpath(r#"ab{0,}bc"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"abbbbc"#));
// }

// #[test]
// fn test_p53() {
//     let regex = Regex::xpath(r#"ab{0,}bc"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"abbbbc"#));
// }

// #[test]
// fn test_p54() {
//     let regex = Regex::xpath(r#"ab{0,}bc"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"abbbbc"#));
// }

// #[test]
// fn test_p55() {
//     let regex = Regex::xpath(r#"ab+bc"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"abbc"#));
// }

// #[test]
// fn test_p56() {
//     let regex = Regex::xpath(r#"ab+bc"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"abbc"#));
// }

// #[test]
// fn test_p57() {
//     let regex = Regex::xpath(r#"ab+bc"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"abbc"#));
// }

// #[test]
// fn test_p58() {
//     let regex = Regex::xpath(r#"ab+bc"#, "");
//     // n
//     let regex = regex.unwrap();
//     assert!(!regex.is_match(r#"abc"#));
// }

// #[test]
// fn test_p59() {
//     let regex = Regex::xpath(r#"ab+bc"#, "");
//     // n
//     let regex = regex.unwrap();
//     assert!(!regex.is_match(r#"abq"#));
// }

// #[test]
// fn test_p60() {
//     let regex = Regex::xpath(r#"ab{1,}bc"#, "");
//     // n
//     let regex = regex.unwrap();
//     assert!(!regex.is_match(r#"abq"#));
// }

// #[test]
// fn test_p61() {
//     let regex = Regex::xpath(r#"ab+bc"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"abbbbc"#));
// }

// #[test]
// fn test_p62() {
//     let regex = Regex::xpath(r#"ab+bc"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"abbbbc"#));
// }

// #[test]
// fn test_p63() {
//     let regex = Regex::xpath(r#"ab+bc"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"abbbbc"#));
// }

// #[test]
// fn test_p64() {
//     let regex = Regex::xpath(r#"ab{1,}bc"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"abbbbc"#));
// }

// #[test]
// fn test_p65() {
//     let regex = Regex::xpath(r#"ab{1,}bc"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"abbbbc"#));
// }

// #[test]
// fn test_p66() {
//     let regex = Regex::xpath(r#"ab{1,}bc"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"abbbbc"#));
// }

// #[test]
// fn test_p67() {
//     let regex = Regex::xpath(r#"ab{1,3}bc"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"abbbbc"#));
// }

// #[test]
// fn test_p68() {
//     let regex = Regex::xpath(r#"ab{1,3}bc"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"abbbbc"#));
// }

// #[test]
// fn test_p69() {
//     let regex = Regex::xpath(r#"ab{1,3}bc"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"abbbbc"#));
// }

// #[test]
// fn test_p70() {
//     let regex = Regex::xpath(r#"ab{3,4}bc"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"abbbbc"#));
// }

// #[test]
// fn test_p71() {
//     let regex = Regex::xpath(r#"ab{3,4}bc"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"abbbbc"#));
// }

// #[test]
// fn test_p72() {
//     let regex = Regex::xpath(r#"ab{3,4}bc"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"abbbbc"#));
// }

// #[test]
// fn test_p73() {
//     let regex = Regex::xpath(r#"ab{4,5}bc"#, "");
//     // n
//     let regex = regex.unwrap();
//     assert!(!regex.is_match(r#"abbbbc"#));
// }

// #[test]
// fn test_p74() {
//     let regex = Regex::xpath(r#"ab?bc"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"abbc"#));
// }

// #[test]
// fn test_p75() {
//     let regex = Regex::xpath(r#"ab?bc"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"abc"#));
// }

// #[test]
// fn test_p76() {
//     let regex = Regex::xpath(r#"ab{0,1}bc"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"abc"#));
// }

// #[test]
// fn test_p77() {
//     let regex = Regex::xpath(r#"ab?bc"#, "");
//     // n
//     let regex = regex.unwrap();
//     assert!(!regex.is_match(r#"abbbbc"#));
// }

// #[test]
// fn test_p78() {
//     let regex = Regex::xpath(r#"ab?c"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"abc"#));
// }

// #[test]
// fn test_p79() {
//     let regex = Regex::xpath(r#"ab{0,1}c"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"abc"#));
// }

// #[test]
// fn test_p80() {
//     let regex = Regex::xpath(r#"^abc$"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"abc"#));
// }

// #[test]
// fn test_p81() {
//     let regex = Regex::xpath(r#"^abc$"#, "");
//     // n
//     let regex = regex.unwrap();
//     assert!(!regex.is_match(r#"abcc"#));
// }

// #[test]
// fn test_p82() {
//     let regex = Regex::xpath(r#"^abc"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"abcc"#));
// }

// #[test]
// fn test_p83() {
//     let regex = Regex::xpath(r#"^abc$"#, "");
//     // n
//     let regex = regex.unwrap();
//     assert!(!regex.is_match(r#"aabc"#));
// }

// #[test]
// fn test_p84() {
//     let regex = Regex::xpath(r#"abc$"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"aabc"#));
// }

// #[test]
// fn test_p85() {
//     let regex = Regex::xpath(r#"abc$"#, "");
//     // n
//     let regex = regex.unwrap();
//     assert!(!regex.is_match(r#"aabcd"#));
// }

// #[test]
// fn test_p86() {
//     let regex = Regex::xpath(r#"^"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"abc"#));
// }

// #[test]
// fn test_p87() {
//     let regex = Regex::xpath(r#"$"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"abc"#));
// }

// #[test]
// fn test_p88() {
//     let regex = Regex::xpath(r#"a.c"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"abc"#));
// }

// #[test]
// fn test_p89() {
//     let regex = Regex::xpath(r#"a.c"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"axc"#));
// }

// #[test]
// fn test_p92() {
//     let regex = Regex::xpath(r#"a.*c"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"axyzc"#));
// }

// #[test]
// fn test_p95() {
//     let regex = Regex::xpath(r#"a.*c"#, "");
//     // n
//     let regex = regex.unwrap();
//     assert!(!regex.is_match(r#"axyzd"#));
// }

// #[test]
// fn test_p98() {
//     let regex = Regex::xpath(r#"a[bc]d"#, "");
//     // n
//     let regex = regex.unwrap();
//     assert!(!regex.is_match(r#"abc"#));
// }

// #[test]
// fn test_p99() {
//     let regex = Regex::xpath(r#"a[bc]d"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"abd"#));
// }

// #[test]
// fn test_p100() {
//     let regex = Regex::xpath(r#"a[b]d"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"abd"#));
// }

// #[test]
// fn test_p101() {
//     let regex = Regex::xpath(r#"[a][b][d]"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"abd"#));
// }

// #[test]
// fn test_p102() {
//     let regex = Regex::xpath(r#".[b]."#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"abd"#));
// }

// #[test]
// fn test_p103() {
//     let regex = Regex::xpath(r#".[b]."#, "");
//     // n
//     let regex = regex.unwrap();
//     assert!(!regex.is_match(r#"aBd"#));
// }

// #[test]
// fn test_p106() {
//     let regex = Regex::xpath(r#"a[b-d]e"#, "");
//     // n
//     let regex = regex.unwrap();
//     assert!(!regex.is_match(r#"abd"#));
// }

// #[test]
// fn test_p107() {
//     let regex = Regex::xpath(r#"a[b-d]e"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"ace"#));
// }

// #[test]
// fn test_p108() {
//     let regex = Regex::xpath(r#"a[b-d]"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"aac"#));
// }

// #[test]
// fn test_p109() {
//     let regex = Regex::xpath(r#"a[-b]"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"a-"#));
// }

// #[test]
// fn test_p110() {
//     let regex = Regex::xpath(r#"a[b-]"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"a-"#));
// }

// #[test]
// fn test_p116() {
//     let regex = Regex::xpath(r#"a[^bc]d"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"aed"#));
// }

// #[test]
// fn test_p117() {
//     let regex = Regex::xpath(r#"a[^bc]d"#, "");
//     // n
//     let regex = regex.unwrap();
//     assert!(!regex.is_match(r#"abd"#));
// }

// #[test]
// fn test_p118() {
//     let regex = Regex::xpath(r#"a[^-b]c"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"adc"#));
// }

// #[test]
// fn test_p119() {
//     let regex = Regex::xpath(r#"a[^-b]c"#, "");
//     // n
//     let regex = regex.unwrap();
//     assert!(!regex.is_match(r#"a-c"#));
// }

// #[test]
// fn test_p137() {
//     let regex = Regex::xpath(r#"\w"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"a"#));
// }

// #[test]
// fn test_p138() {
//     let regex = Regex::xpath(r#"\w"#, "");
//     // n
//     let regex = regex.unwrap();
//     assert!(!regex.is_match(r#"-"#));
// }

// #[test]
// fn test_p139() {
//     let regex = Regex::xpath(r#"\W"#, "");
//     // n
//     let regex = regex.unwrap();
//     assert!(!regex.is_match(r#"a"#));
// }

// #[test]
// fn test_p140() {
//     let regex = Regex::xpath(r#"\W"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"-"#));
// }

// #[test]
// fn test_p141() {
//     let regex = Regex::xpath(r#"a\sb"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"a b"#));
// }

// #[test]
// fn test_p142() {
//     let regex = Regex::xpath(r#"a\sb"#, "");
//     // n
//     let regex = regex.unwrap();
//     assert!(!regex.is_match(r#"a-b"#));
// }

// #[test]
// fn test_p143() {
//     let regex = Regex::xpath(r#"a\Sb"#, "");
//     // n
//     let regex = regex.unwrap();
//     assert!(!regex.is_match(r#"a b"#));
// }

// #[test]
// fn test_p144() {
//     let regex = Regex::xpath(r#"a\Sb"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"a-b"#));
// }

// #[test]
// fn test_p145() {
//     let regex = Regex::xpath(r#"\d"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"1"#));
// }

// #[test]
// fn test_p146() {
//     let regex = Regex::xpath(r#"\d"#, "");
//     // n
//     let regex = regex.unwrap();
//     assert!(!regex.is_match(r#"-"#));
// }

// #[test]
// fn test_p147() {
//     let regex = Regex::xpath(r#"\D"#, "");
//     // n
//     let regex = regex.unwrap();
//     assert!(!regex.is_match(r#"1"#));
// }

// #[test]
// fn test_p148() {
//     let regex = Regex::xpath(r#"\D"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"-"#));
// }

// #[test]
// fn test_p149() {
//     let regex = Regex::xpath(r#"[\w]"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"a"#));
// }

// #[test]
// fn test_p150() {
//     let regex = Regex::xpath(r#"[\w]"#, "");
//     // n
//     let regex = regex.unwrap();
//     assert!(!regex.is_match(r#"-"#));
// }

// #[test]
// fn test_p151() {
//     let regex = Regex::xpath(r#"[\W]"#, "");
//     // n
//     let regex = regex.unwrap();
//     assert!(!regex.is_match(r#"a"#));
// }

// #[test]
// fn test_p152() {
//     let regex = Regex::xpath(r#"[\W]"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"-"#));
// }

// #[test]
// fn test_p153() {
//     let regex = Regex::xpath(r#"a[\s]b"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"a b"#));
// }

// #[test]
// fn test_p154() {
//     let regex = Regex::xpath(r#"a[\s]b"#, "");
//     // n
//     let regex = regex.unwrap();
//     assert!(!regex.is_match(r#"a-b"#));
// }

// #[test]
// fn test_p155() {
//     let regex = Regex::xpath(r#"a[\S]b"#, "");
//     // n
//     let regex = regex.unwrap();
//     assert!(!regex.is_match(r#"a b"#));
// }

// #[test]
// fn test_p156() {
//     let regex = Regex::xpath(r#"a[\S]b"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"a-b"#));
// }

// #[test]
// fn test_p157() {
//     let regex = Regex::xpath(r#"[\d]"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"1"#));
// }

// #[test]
// fn test_p158() {
//     let regex = Regex::xpath(r#"[\d]"#, "");
//     // n
//     let regex = regex.unwrap();
//     assert!(!regex.is_match(r#"-"#));
// }

// #[test]
// fn test_p159() {
//     let regex = Regex::xpath(r#"[\D]"#, "");
//     // n
//     let regex = regex.unwrap();
//     assert!(!regex.is_match(r#"1"#));
// }

// #[test]
// fn test_p160() {
//     let regex = Regex::xpath(r#"[\D]"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"-"#));
// }

// #[test]
// fn test_p161() {
//     let regex = Regex::xpath(r#"ab|cd"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"abc"#));
// }

// #[test]
// fn test_p162() {
//     let regex = Regex::xpath(r#"ab|cd"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"abcd"#));
// }

// #[test]
// fn test_p163() {
//     let regex = Regex::xpath(r#"()ef"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"def"#));
// }

// #[test]
// fn test_p164() {
//     let regex = Regex::xpath(r#"()ef"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"def"#));
// }

// #[test]
// fn test_p165() {
//     let regex = Regex::xpath(r#"()ef"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"def"#));
// }

// #[test]
// fn test_p167() {
//     let regex = Regex::xpath(r#"()ef"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"def"#));
// }

// #[test]
// fn test_p168() {
//     let regex = Regex::xpath(r#"()ef"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"def"#));
// }

// #[test]
// fn test_p172() {
//     let regex = Regex::xpath(r#"$b"#, "");
//     // n
//     let regex = regex.unwrap();
//     assert!(!regex.is_match(r#"b"#));
// }

// #[test]
// fn test_p174() {
//     let regex = Regex::xpath(r#"a\(b"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"a(b"#));
// }

// #[test]
// fn test_p175() {
//     let regex = Regex::xpath(r#"a\(*b"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"ab"#));
// }

// #[test]
// fn test_p176() {
//     let regex = Regex::xpath(r#"a\(*b"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"a((b"#));
// }

// #[test]
// fn test_p177() {
//     let regex = Regex::xpath(r#"a\\b"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"a\b"#));
// }

// #[test]
// fn test_p180() {
//     let regex = Regex::xpath(r#"((a))"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"abc"#));
// }

// #[test]
// fn test_p184() {
//     let regex = Regex::xpath(r#"((a))"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"abc"#));
// }

// #[test]
// fn test_p185() {
//     let regex = Regex::xpath(r#"(a)b(c)"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"abc"#));
// }

// #[test]
// fn test_p186() {
//     let regex = Regex::xpath(r#"(a)b(c)"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"abc"#));
// }

// #[test]
// fn test_p187() {
//     let regex = Regex::xpath(r#"(a)b(c)"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"abc"#));
// }

// #[test]
// fn test_p188() {
//     let regex = Regex::xpath(r#"a+b+c"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"aabbabc"#));
// }

// #[test]
// fn test_p189() {
//     let regex = Regex::xpath(r#"a{1,}b{1,}c"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"aabbabc"#));
// }

// #[test]
// fn test_p191() {
//     let regex = Regex::xpath(r#"a.+?c"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"abcabc"#));
// }

// #[test]
// fn test_p192() {
//     let regex = Regex::xpath(r#"(a+|b)*"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"ab"#));
// }

// #[test]
// fn test_p193() {
//     let regex = Regex::xpath(r#"(a+|b)*"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"ab"#));
// }

// #[test]
// fn test_p194() {
//     let regex = Regex::xpath(r#"(a+|b)*"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"ab"#));
// }

// #[test]
// fn test_p195() {
//     let regex = Regex::xpath(r#"(a+|b)*"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"ab"#));
// }

// #[test]
// fn test_p196() {
//     let regex = Regex::xpath(r#"(a+|b)*"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"ab"#));
// }

// #[test]
// fn test_p197() {
//     let regex = Regex::xpath(r#"(a+|b){0,}"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"ab"#));
// }

// #[test]
// fn test_p198() {
//     let regex = Regex::xpath(r#"(a+|b)+"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"ab"#));
// }

// #[test]
// fn test_p199() {
//     let regex = Regex::xpath(r#"(a+|b){1,}"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"ab"#));
// }

// #[test]
// fn test_p200() {
//     let regex = Regex::xpath(r#"(a+|b)?"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"ab"#));
// }

// #[test]
// fn test_p201() {
//     let regex = Regex::xpath(r#"(a+|b){0,1}"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"ab"#));
// }

// #[test]
// fn test_p203() {
//     let regex = Regex::xpath(r#"[^ab]*"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"cde"#));
// }

// #[test]
// fn test_p204() {
//     let regex = Regex::xpath(r#"abc"#, "");
//     // n
//     let regex = regex.unwrap();
//     assert!(!regex.is_match(r#""#));
// }

// #[test]
// fn test_p205() {
//     let regex = Regex::xpath(r#"a*"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#""#));
// }

// #[test]
// fn test_p206() {
//     let regex = Regex::xpath(r#"([abc])*d"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"abbbcd"#));
// }

// #[test]
// fn test_p207() {
//     let regex = Regex::xpath(r#"([abc])*bcd"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"abcd"#));
// }

// #[test]
// fn test_p208() {
//     let regex = Regex::xpath(r#"a|b|c|d|e"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"e"#));
// }

// #[test]
// fn test_p209() {
//     let regex = Regex::xpath(r#"(a|b|c|d|e)f"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"ef"#));
// }

// #[test]
// fn test_p210() {
//     let regex = Regex::xpath(r#"(a|b|c|d|e)f"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"ef"#));
// }

// #[test]
// fn test_p211() {
//     let regex = Regex::xpath(r#"(a|b|c|d|e)f"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"ef"#));
// }

// #[test]
// fn test_p212() {
//     let regex = Regex::xpath(r#"(a|b|c|d|e)f"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"ef"#));
// }

// #[test]
// fn test_p213() {
//     let regex = Regex::xpath(r#"(a|b|c|d|e)f"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"ef"#));
// }

// #[test]
// fn test_p214() {
//     let regex = Regex::xpath(r#"abcd*efg"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"abcdefg"#));
// }

// #[test]
// fn test_p215() {
//     let regex = Regex::xpath(r#"ab*"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"xabyabbbz"#));
// }

// #[test]
// fn test_p216() {
//     let regex = Regex::xpath(r#"ab*"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"xayabbbz"#));
// }

// #[test]
// fn test_p217() {
//     let regex = Regex::xpath(r#"(ab|cd)e"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"abcde"#));
// }

// #[test]
// fn test_p218() {
//     let regex = Regex::xpath(r#"[abhgefdc]ij"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"hij"#));
// }

// #[test]
// fn test_p219() {
//     let regex = Regex::xpath(r#"^(ab|cd)e"#, "");
//     // n
//     let regex = regex.unwrap();
//     assert!(!regex.is_match(r#"abcde"#));
// }

// #[test]
// fn test_p220() {
//     let regex = Regex::xpath(r#"(abc|)ef"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"abcdef"#));
// }

// #[test]
// fn test_p221() {
//     let regex = Regex::xpath(r#"(a|b)c*d"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"abcd"#));
// }

// #[test]
// fn test_p222() {
//     let regex = Regex::xpath(r#"(ab|ab*)bc"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"abc"#));
// }

// #[test]
// fn test_p223() {
//     let regex = Regex::xpath(r#"a([bc]*)c*"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"abc"#));
// }

// #[test]
// fn test_p224() {
//     let regex = Regex::xpath(r#"a([bc]*)(c*d)"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"abcd"#));
// }

// #[test]
// fn test_p225() {
//     let regex = Regex::xpath(r#"a([bc]*)(c*d)"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"abcd"#));
// }

// #[test]
// fn test_p226() {
//     let regex = Regex::xpath(r#"a([bc]*)(c*d)"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"abcd"#));
// }

// #[test]
// fn test_p227() {
//     let regex = Regex::xpath(r#"a([bc]*)(c*d)"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"abcd"#));
// }

// #[test]
// fn test_p228() {
//     let regex = Regex::xpath(r#"a([bc]*)(c*d)"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"abcd"#));
// }

// #[test]
// fn test_p229() {
//     let regex = Regex::xpath(r#"a([bc]*)(c*d)"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"abcd"#));
// }

// #[test]
// fn test_p230() {
//     let regex = Regex::xpath(r#"a([bc]*)(c*d)"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"abcd"#));
// }

// #[test]
// fn test_p231() {
//     let regex = Regex::xpath(r#"a([bc]+)(c*d)"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"abcd"#));
// }

// #[test]
// fn test_p232() {
//     let regex = Regex::xpath(r#"a([bc]*)(c+d)"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"abcd"#));
// }

// #[test]
// fn test_p233() {
//     let regex = Regex::xpath(r#"a([bc]*)(c+d)"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"abcd"#));
// }

// #[test]
// fn test_p234() {
//     let regex = Regex::xpath(r#"a([bc]*)(c+d)"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"abcd"#));
// }

// #[test]
// fn test_p235() {
//     let regex = Regex::xpath(r#"a([bc]*)(c+d)"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"abcd"#));
// }

// #[test]
// fn test_p236() {
//     let regex = Regex::xpath(r#"a([bc]*)(c+d)"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"abcd"#));
// }

// #[test]
// fn test_p237() {
//     let regex = Regex::xpath(r#"a([bc]*)(c+d)"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"abcd"#));
// }

// #[test]
// fn test_p238() {
//     let regex = Regex::xpath(r#"a([bc]*)(c+d)"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"abcd"#));
// }

// #[test]
// fn test_p239() {
//     let regex = Regex::xpath(r#"a[bcd]*dcdcde"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"adcdcde"#));
// }

// #[test]
// fn test_p240() {
//     let regex = Regex::xpath(r#"a[bcd]+dcdcde"#, "");
//     // n
//     let regex = regex.unwrap();
//     assert!(!regex.is_match(r#"adcdcde"#));
// }

// #[test]
// fn test_p241() {
//     let regex = Regex::xpath(r#"(ab|a)b*c"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"abc"#));
// }

// #[test]
// fn test_p242() {
//     let regex = Regex::xpath(r#"(ab|a)b*c"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"abc"#));
// }

// #[test]
// fn test_p243() {
//     let regex = Regex::xpath(r#"(ab|a)b*c"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"abc"#));
// }

// #[test]
// fn test_p244() {
//     let regex = Regex::xpath(r#"(ab|a)b*c"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"abc"#));
// }

// #[test]
// fn test_p245() {
//     let regex = Regex::xpath(r#"(ab|a)b*c"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"abc"#));
// }

// #[test]
// fn test_p246() {
//     let regex = Regex::xpath(r#"((a)(b)c)(d)"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"abcd"#));
// }

// #[test]
// fn test_p247() {
//     let regex = Regex::xpath(r#"((a)(b)c)(d)"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"abcd"#));
// }

// #[test]
// fn test_p248() {
//     let regex = Regex::xpath(r#"((a)(b)c)(d)"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"abcd"#));
// }

// #[test]
// fn test_p249() {
//     let regex = Regex::xpath(r#"((a)(b)c)(d)"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"abcd"#));
// }

// #[test]
// fn test_p250() {
//     let regex = Regex::xpath(r#"((a)(b)c)(d)"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"abcd"#));
// }

// #[test]
// fn test_p251() {
//     let regex = Regex::xpath(r#"((a)(b)c)(d)"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"abcd"#));
// }

// #[test]
// fn test_p252() {
//     let regex = Regex::xpath(r#"((a)(b)c)(d)"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"abcd"#));
// }

// #[test]
// fn test_p253() {
//     let regex = Regex::xpath(r#"((a)(b)c)(d)"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"abcd"#));
// }

// #[test]
// fn test_p254() {
//     let regex = Regex::xpath(r#"((a)(b)c)(d)"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"abcd"#));
// }

// #[test]
// fn test_p255() {
//     let regex = Regex::xpath(r#"((a)(b)c)(d)"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"abcd"#));
// }

// #[test]
// fn test_p256() {
//     let regex = Regex::xpath(r#"((a)(b)c)(d)"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"abcd"#));
// }

// #[test]
// fn test_p257() {
//     let regex = Regex::xpath(r#"[a-zA-Z_][a-zA-Z0-9_]*"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"alpha"#));
// }

// #[test]
// fn test_p258() {
//     let regex = Regex::xpath(r#"^a(bc+|b[eh])g|.h$"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"abh"#));
// }

// #[test]
// fn test_p259() {
//     let regex = Regex::xpath(r#"(bc+d$|ef*g.|h?i(j|k))"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"effgz"#));
// }

// #[test]
// fn test_p260() {
//     let regex = Regex::xpath(r#"(bc+d$|ef*g.|h?i(j|k))"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"ij"#));
// }

// #[test]
// fn test_p261() {
//     let regex = Regex::xpath(r#"(bc+d$|ef*g.|h?i(j|k))"#, "");
//     // n
//     let regex = regex.unwrap();
//     assert!(!regex.is_match(r#"effg"#));
// }

// #[test]
// fn test_p262() {
//     let regex = Regex::xpath(r#"(bc+d$|ef*g.|h?i(j|k))"#, "");
//     // n
//     let regex = regex.unwrap();
//     assert!(!regex.is_match(r#"bcdd"#));
// }

// #[test]
// fn test_p263() {
//     let regex = Regex::xpath(r#"(bc+d$|ef*g.|h?i(j|k))"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"reffgz"#));
// }

// #[test]
// fn test_p264() {
//     let regex = Regex::xpath(r#"((((((((((a))))))))))"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"a"#));
// }

// #[test]
// fn test_p265() {
//     let regex = Regex::xpath(r#"((((((((((a))))))))))"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"a"#));
// }

// #[test]
// fn test_p266() {
//     let regex = Regex::xpath(r#"((((((((((a))))))))))"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"a"#));
// }

// #[test]
// fn test_p267() {
//     let regex = Regex::xpath(r#"((((((((((a))))))))))"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"a"#));
// }

// #[test]
// fn test_p268() {
//     let regex = Regex::xpath(r#"((((((((((a))))))))))"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"a"#));
// }

// #[test]
// fn test_p269() {
//     let regex = Regex::xpath(r#"((((((((((a))))))))))\10"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"aa"#));
// }

// #[test]
// fn test_p272() {
//     let regex = Regex::xpath(r#"(((((((((a)))))))))"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"a"#));
// }

// #[test]
// fn test_p273() {
//     let regex = Regex::xpath(r#"multiple words of text"#, "");
//     // n
//     let regex = regex.unwrap();
//     assert!(!regex.is_match(r#"uh-uh"#));
// }

// #[test]
// fn test_p274() {
//     let regex = Regex::xpath(r#"multiple words"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"multiple words, yeah"#));
// }

// #[test]
// fn test_p275() {
//     let regex = Regex::xpath(r#"(.*)c(.*)"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"abcde"#));
// }

// #[test]
// fn test_p276() {
//     let regex = Regex::xpath(r#"\((.*), (.*)\)"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"(a, b)"#));
// }

// #[test]
// fn test_p277() {
//     let regex = Regex::xpath(r#"[k]"#, "");
//     // n
//     let regex = regex.unwrap();
//     assert!(!regex.is_match(r#"ab"#));
// }

// #[test]
// fn test_p278() {
//     let regex = Regex::xpath(r#"abcd"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"abcd"#));
// }

// #[test]
// fn test_p279() {
//     let regex = Regex::xpath(r#"a(bc)d"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"abcd"#));
// }

// #[test]
// fn test_p280() {
//     let regex = Regex::xpath(r#"a[-]?c"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"ac"#));
// }

// #[test]
// fn test_p281() {
//     let regex = Regex::xpath(r#"(abc)\1"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"abcabc"#));
// }

// #[test]
// fn test_p282() {
//     let regex = Regex::xpath(r#"([a-c]*)\1"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"abcabc"#));
// }

// #[test]
// fn test_p293() {
//     let regex = Regex::xpath(r#"(a)|\1"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"a"#));
// }

// #[test]
// fn test_p294() {
//     let regex = Regex::xpath(r#"(a)|\1"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"x"#));
// }

// #[test]
// fn test_p295() {
//     let regex = Regex::xpath(r#"(?:(b)?a)\1"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"a"#));
// }

// #[test]
// fn test_p297() {
//     let regex = Regex::xpath(r#"(([a-c])b*?\2)*"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"ababbbcbc"#));
// }

// #[test]
// fn test_p298() {
//     let regex = Regex::xpath(r#"(([a-c])b*?\2){3}"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"ababbbcbc"#));
// }

// #[test]
// fn test_p303() {
//     let regex = Regex::xpath(r#"^((.)?a\2)+$"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"babadad"#));
// }

// #[test]
// fn test_p304() {
//     let regex = Regex::xpath(r#"(a)|(b)"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"b"#));
// }

// #[test]
// fn test_p305() {
//     let regex = Regex::xpath(r#"(a)|(b)"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"b"#));
// }

// #[test]
// fn test_p306() {
//     let regex = Regex::xpath(r#"(a)|(b)"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"b"#));
// }

// #[test]
// fn test_p307() {
//     let regex = Regex::xpath(r#"(a)|(b)"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"b"#));
// }

// #[test]
// fn test_p308() {
//     let regex = Regex::xpath(r#"(a)|(b)"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"b"#));
// }

// #[test]
// fn test_p309() {
//     let regex = Regex::xpath(r#"(a)|(b)"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"b"#));
// }

// #[test]
// fn test_p310() {
//     let regex = Regex::xpath(r#"abc"#, "i");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"ABC"#));
// }

// #[test]
// fn test_p311() {
//     let regex = Regex::xpath(r#"abc"#, "i");
//     // n
//     let regex = regex.unwrap();
//     assert!(!regex.is_match(r#"XBC"#));
// }

// #[test]
// fn test_p312() {
//     let regex = Regex::xpath(r#"abc"#, "i");
//     // n
//     let regex = regex.unwrap();
//     assert!(!regex.is_match(r#"AXC"#));
// }

// #[test]
// fn test_p313() {
//     let regex = Regex::xpath(r#"abc"#, "i");
//     // n
//     let regex = regex.unwrap();
//     assert!(!regex.is_match(r#"ABX"#));
// }

// #[test]
// fn test_p314() {
//     let regex = Regex::xpath(r#"abc"#, "i");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"XABCY"#));
// }

// #[test]
// fn test_p315() {
//     let regex = Regex::xpath(r#"abc"#, "i");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"ABABC"#));
// }

// #[test]
// fn test_p316() {
//     let regex = Regex::xpath(r#"ab*c"#, "i");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"ABC"#));
// }

// #[test]
// fn test_p317() {
//     let regex = Regex::xpath(r#"ab*bc"#, "i");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"ABC"#));
// }

// #[test]
// fn test_p318() {
//     let regex = Regex::xpath(r#"ab*bc"#, "i");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"ABBC"#));
// }

// #[test]
// fn test_p319() {
//     let regex = Regex::xpath(r#"ab*?bc"#, "i");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"ABBBBC"#));
// }

// #[test]
// fn test_p320() {
//     let regex = Regex::xpath(r#"ab{0,}?bc"#, "i");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"ABBBBC"#));
// }

// #[test]
// fn test_p321() {
//     let regex = Regex::xpath(r#"ab+?bc"#, "i");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"ABBC"#));
// }

// #[test]
// fn test_p322() {
//     let regex = Regex::xpath(r#"ab+bc"#, "i");
//     // n
//     let regex = regex.unwrap();
//     assert!(!regex.is_match(r#"ABC"#));
// }

// #[test]
// fn test_p323() {
//     let regex = Regex::xpath(r#"ab+bc"#, "i");
//     // n
//     let regex = regex.unwrap();
//     assert!(!regex.is_match(r#"ABQ"#));
// }

// #[test]
// fn test_p324() {
//     let regex = Regex::xpath(r#"ab{1,}bc"#, "i");
//     // n
//     let regex = regex.unwrap();
//     assert!(!regex.is_match(r#"ABQ"#));
// }

// #[test]
// fn test_p325() {
//     let regex = Regex::xpath(r#"ab+bc"#, "i");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"ABBBBC"#));
// }

// #[test]
// fn test_p326() {
//     let regex = Regex::xpath(r#"ab{1,}?bc"#, "i");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"ABBBBC"#));
// }

// #[test]
// fn test_p327() {
//     let regex = Regex::xpath(r#"ab{1,3}?bc"#, "i");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"ABBBBC"#));
// }

// #[test]
// fn test_p328() {
//     let regex = Regex::xpath(r#"ab{3,4}?bc"#, "i");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"ABBBBC"#));
// }

// #[test]
// fn test_p329() {
//     let regex = Regex::xpath(r#"ab{4,5}?bc"#, "i");
//     // n
//     let regex = regex.unwrap();
//     assert!(!regex.is_match(r#"ABBBBC"#));
// }

// #[test]
// fn test_p330() {
//     let regex = Regex::xpath(r#"ab??bc"#, "i");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"ABBC"#));
// }

// #[test]
// fn test_p331() {
//     let regex = Regex::xpath(r#"ab??bc"#, "i");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"ABC"#));
// }

// #[test]
// fn test_p332() {
//     let regex = Regex::xpath(r#"ab{0,1}?bc"#, "i");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"ABC"#));
// }

// #[test]
// fn test_p333() {
//     let regex = Regex::xpath(r#"ab??bc"#, "i");
//     // n
//     let regex = regex.unwrap();
//     assert!(!regex.is_match(r#"ABBBBC"#));
// }

// #[test]
// fn test_p334() {
//     let regex = Regex::xpath(r#"ab??c"#, "i");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"ABC"#));
// }

// #[test]
// fn test_p335() {
//     let regex = Regex::xpath(r#"ab{0,1}?c"#, "i");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"ABC"#));
// }

// #[test]
// fn test_p336() {
//     let regex = Regex::xpath(r#"^abc$"#, "i");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"ABC"#));
// }

// #[test]
// fn test_p337() {
//     let regex = Regex::xpath(r#"^abc$"#, "i");
//     // n
//     let regex = regex.unwrap();
//     assert!(!regex.is_match(r#"ABCC"#));
// }

// #[test]
// fn test_p338() {
//     let regex = Regex::xpath(r#"^abc"#, "i");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"ABCC"#));
// }

// #[test]
// fn test_p339() {
//     let regex = Regex::xpath(r#"^abc$"#, "i");
//     // n
//     let regex = regex.unwrap();
//     assert!(!regex.is_match(r#"AABC"#));
// }

// #[test]
// fn test_p340() {
//     let regex = Regex::xpath(r#"abc$"#, "i");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"AABC"#));
// }

// #[test]
// fn test_p341() {
//     let regex = Regex::xpath(r#"^"#, "i");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"ABC"#));
// }

// #[test]
// fn test_p342() {
//     let regex = Regex::xpath(r#"$"#, "i");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"ABC"#));
// }

// #[test]
// fn test_p343() {
//     let regex = Regex::xpath(r#"a.c"#, "i");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"ABC"#));
// }

// #[test]
// fn test_p344() {
//     let regex = Regex::xpath(r#"a.c"#, "i");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"AXC"#));
// }

// #[test]
// fn test_p346() {
//     let regex = Regex::xpath(r#"a.*?c"#, "i");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"AXYZC"#));
// }

// #[test]
// fn test_p347() {
//     let regex = Regex::xpath(r#"a.*c"#, "i");
//     // n
//     let regex = regex.unwrap();
//     assert!(!regex.is_match(r#"AXYZD"#));
// }

// #[test]
// fn test_p348() {
//     let regex = Regex::xpath(r#"a[bc]d"#, "i");
//     // n
//     let regex = regex.unwrap();
//     assert!(!regex.is_match(r#"ABC"#));
// }

// #[test]
// fn test_p349() {
//     let regex = Regex::xpath(r#"a[bc]d"#, "i");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"ABD"#));
// }

// #[test]
// fn test_p350() {
//     let regex = Regex::xpath(r#"a[b-d]e"#, "i");
//     // n
//     let regex = regex.unwrap();
//     assert!(!regex.is_match(r#"ABD"#));
// }

// #[test]
// fn test_p351() {
//     let regex = Regex::xpath(r#"a[b-d]e"#, "i");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"ACE"#));
// }

// #[test]
// fn test_p352() {
//     let regex = Regex::xpath(r#"a[b-d]"#, "i");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"AAC"#));
// }

// #[test]
// fn test_p353() {
//     let regex = Regex::xpath(r#"a[-b]"#, "i");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"A-"#));
// }

// #[test]
// fn test_p354() {
//     let regex = Regex::xpath(r#"a[b-]"#, "i");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"A-"#));
// }

// #[test]
// fn test_p360() {
//     let regex = Regex::xpath(r#"a[^bc]d"#, "i");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"AED"#));
// }

// #[test]
// fn test_p361() {
//     let regex = Regex::xpath(r#"a[^bc]d"#, "i");
//     // n
//     let regex = regex.unwrap();
//     assert!(!regex.is_match(r#"ABD"#));
// }

// #[test]
// fn test_p362() {
//     let regex = Regex::xpath(r#"a[^-b]c"#, "i");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"ADC"#));
// }

// #[test]
// fn test_p363() {
//     let regex = Regex::xpath(r#"a[^-b]c"#, "i");
//     // n
//     let regex = regex.unwrap();
//     assert!(!regex.is_match(r#"A-C"#));
// }

// #[test]
// fn test_p366() {
//     let regex = Regex::xpath(r#"ab|cd"#, "i");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"ABC"#));
// }

// #[test]
// fn test_p367() {
//     let regex = Regex::xpath(r#"ab|cd"#, "i");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"ABCD"#));
// }

// #[test]
// fn test_p368() {
//     let regex = Regex::xpath(r#"()ef"#, "i");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"DEF"#));
// }

// #[test]
// fn test_p372() {
//     let regex = Regex::xpath(r#"$b"#, "i");
//     // n
//     let regex = regex.unwrap();
//     assert!(!regex.is_match(r#"B"#));
// }

// #[test]
// fn test_p374() {
//     let regex = Regex::xpath(r#"a\(b"#, "i");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"A(B"#));
// }

// #[test]
// fn test_p375() {
//     let regex = Regex::xpath(r#"a\(*b"#, "i");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"AB"#));
// }

// #[test]
// fn test_p376() {
//     let regex = Regex::xpath(r#"a\(*b"#, "i");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"A((B"#));
// }

// #[test]
// fn test_p377() {
//     let regex = Regex::xpath(r#"a\\b"#, "i");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"A\B"#));
// }

// #[test]
// fn test_p380() {
//     let regex = Regex::xpath(r#"((a))"#, "i");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"ABC"#));
// }

// #[test]
// fn test_p381() {
//     let regex = Regex::xpath(r#"(a)b(c)"#, "i");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"ABC"#));
// }

// #[test]
// fn test_p382() {
//     let regex = Regex::xpath(r#"a+b+c"#, "i");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"AABBABC"#));
// }

// #[test]
// fn test_p383() {
//     let regex = Regex::xpath(r#"a{1,}b{1,}c"#, "i");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"AABBABC"#));
// }

// #[test]
// fn test_p385() {
//     let regex = Regex::xpath(r#"a.+?c"#, "i");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"ABCABC"#));
// }

// #[test]
// fn test_p386() {
//     let regex = Regex::xpath(r#"a.*?c"#, "i");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"ABCABC"#));
// }

// #[test]
// fn test_p387() {
//     let regex = Regex::xpath(r#"a.{0,5}?c"#, "i");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"ABCABC"#));
// }

// #[test]
// fn test_p388() {
//     let regex = Regex::xpath(r#"(a+|b)*"#, "i");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"AB"#));
// }

// #[test]
// fn test_p389() {
//     let regex = Regex::xpath(r#"(a+|b){0,}"#, "i");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"AB"#));
// }

// #[test]
// fn test_p390() {
//     let regex = Regex::xpath(r#"(a+|b)+"#, "i");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"AB"#));
// }

// #[test]
// fn test_p391() {
//     let regex = Regex::xpath(r#"(a+|b){1,}"#, "i");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"AB"#));
// }

// #[test]
// fn test_p392() {
//     let regex = Regex::xpath(r#"(a+|b)?"#, "i");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"AB"#));
// }

// #[test]
// fn test_p393() {
//     let regex = Regex::xpath(r#"(a+|b){0,1}"#, "i");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"AB"#));
// }

// #[test]
// fn test_p394() {
//     let regex = Regex::xpath(r#"(a+|b){0,1}?"#, "i");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"AB"#));
// }

// #[test]
// fn test_p396() {
//     let regex = Regex::xpath(r#"[^ab]*"#, "i");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"CDE"#));
// }

// #[test]
// fn test_p397() {
//     let regex = Regex::xpath(r#"abc"#, "i");
//     // n
//     let regex = regex.unwrap();
//     assert!(!regex.is_match(r#""#));
// }

// #[test]
// fn test_p398() {
//     let regex = Regex::xpath(r#"a*"#, "i");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#""#));
// }

// #[test]
// fn test_p399() {
//     let regex = Regex::xpath(r#"([abc])*d"#, "i");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"ABBBCD"#));
// }

// #[test]
// fn test_p400() {
//     let regex = Regex::xpath(r#"([abc])*bcd"#, "i");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"ABCD"#));
// }

// #[test]
// fn test_p401() {
//     let regex = Regex::xpath(r#"a|b|c|d|e"#, "i");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"E"#));
// }

// #[test]
// fn test_p402() {
//     let regex = Regex::xpath(r#"(a|b|c|d|e)f"#, "i");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"EF"#));
// }

// #[test]
// fn test_p403() {
//     let regex = Regex::xpath(r#"abcd*efg"#, "i");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"ABCDEFG"#));
// }

// #[test]
// fn test_p404() {
//     let regex = Regex::xpath(r#"ab*"#, "i");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"XABYABBBZ"#));
// }

// #[test]
// fn test_p405() {
//     let regex = Regex::xpath(r#"ab*"#, "i");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"XAYABBBZ"#));
// }

// #[test]
// fn test_p406() {
//     let regex = Regex::xpath(r#"(ab|cd)e"#, "i");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"ABCDE"#));
// }

// #[test]
// fn test_p407() {
//     let regex = Regex::xpath(r#"[abhgefdc]ij"#, "i");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"HIJ"#));
// }

// #[test]
// fn test_p408() {
//     let regex = Regex::xpath(r#"^(ab|cd)e"#, "i");
//     // n
//     let regex = regex.unwrap();
//     assert!(!regex.is_match(r#"ABCDE"#));
// }

// #[test]
// fn test_p409() {
//     let regex = Regex::xpath(r#"(abc|)ef"#, "i");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"ABCDEF"#));
// }

// #[test]
// fn test_p410() {
//     let regex = Regex::xpath(r#"(a|b)c*d"#, "i");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"ABCD"#));
// }

// #[test]
// fn test_p411() {
//     let regex = Regex::xpath(r#"(ab|ab*)bc"#, "i");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"ABC"#));
// }

// #[test]
// fn test_p412() {
//     let regex = Regex::xpath(r#"a([bc]*)c*"#, "i");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"ABC"#));
// }

// #[test]
// fn test_p413() {
//     let regex = Regex::xpath(r#"a([bc]*)(c*d)"#, "i");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"ABCD"#));
// }

// #[test]
// fn test_p414() {
//     let regex = Regex::xpath(r#"a([bc]+)(c*d)"#, "i");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"ABCD"#));
// }

// #[test]
// fn test_p415() {
//     let regex = Regex::xpath(r#"a([bc]*)(c+d)"#, "i");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"ABCD"#));
// }

// #[test]
// fn test_p416() {
//     let regex = Regex::xpath(r#"a[bcd]*dcdcde"#, "i");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"ADCDCDE"#));
// }

// #[test]
// fn test_p417() {
//     let regex = Regex::xpath(r#"a[bcd]+dcdcde"#, "i");
//     // n
//     let regex = regex.unwrap();
//     assert!(!regex.is_match(r#"ADCDCDE"#));
// }

// #[test]
// fn test_p418() {
//     let regex = Regex::xpath(r#"(ab|a)b*c"#, "i");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"ABC"#));
// }

// #[test]
// fn test_p419() {
//     let regex = Regex::xpath(r#"((a)(b)c)(d)"#, "i");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"ABCD"#));
// }

// #[test]
// fn test_p420() {
//     let regex = Regex::xpath(r#"[a-zA-Z_][a-zA-Z0-9_]*"#, "i");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"ALPHA"#));
// }

// #[test]
// fn test_p421() {
//     let regex = Regex::xpath(r#"^a(bc+|b[eh])g|.h$"#, "i");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"ABH"#));
// }

// #[test]
// fn test_p422() {
//     let regex = Regex::xpath(r#"(bc+d$|ef*g.|h?i(j|k))"#, "i");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"EFFGZ"#));
// }

// #[test]
// fn test_p423() {
//     let regex = Regex::xpath(r#"(bc+d$|ef*g.|h?i(j|k))"#, "i");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"IJ"#));
// }

// #[test]
// fn test_p424() {
//     let regex = Regex::xpath(r#"(bc+d$|ef*g.|h?i(j|k))"#, "i");
//     // n
//     let regex = regex.unwrap();
//     assert!(!regex.is_match(r#"EFFG"#));
// }

// #[test]
// fn test_p425() {
//     let regex = Regex::xpath(r#"(bc+d$|ef*g.|h?i(j|k))"#, "i");
//     // n
//     let regex = regex.unwrap();
//     assert!(!regex.is_match(r#"BCDD"#));
// }

// #[test]
// fn test_p426() {
//     let regex = Regex::xpath(r#"(bc+d$|ef*g.|h?i(j|k))"#, "i");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"REFFGZ"#));
// }

// #[test]
// fn test_p427() {
//     let regex = Regex::xpath(r#"((((((((((a))))))))))"#, "i");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"A"#));
// }

// #[test]
// fn test_p428() {
//     let regex = Regex::xpath(r#"((((((((((a))))))))))\10"#, "i");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"AA"#));
// }

// #[test]
// fn test_p431() {
//     let regex = Regex::xpath(r#"(((((((((a)))))))))"#, "i");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"A"#));
// }

// #[test]
// fn test_p432() {
//     let regex = Regex::xpath(r#"(?:(?:(?:(?:(?:(?:(?:(?:(?:(a))))))))))"#, "i");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"A"#));
// }

// #[test]
// fn test_p433() {
//     let regex = Regex::xpath(r#"(?:(?:(?:(?:(?:(?:(?:(?:(?:(a|b|c))))))))))"#, "i");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"C"#));
// }

// #[test]
// fn test_p434() {
//     let regex = Regex::xpath(r#"multiple words of text"#, "i");
//     // n
//     let regex = regex.unwrap();
//     assert!(!regex.is_match(r#"UH-UH"#));
// }

// #[test]
// fn test_p435() {
//     let regex = Regex::xpath(r#"multiple words"#, "i");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"MULTIPLE WORDS, YEAH"#));
// }

// #[test]
// fn test_p436() {
//     let regex = Regex::xpath(r#"(.*)c(.*)"#, "i");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"ABCDE"#));
// }

// #[test]
// fn test_p437() {
//     let regex = Regex::xpath(r#"\((.*), (.*)\)"#, "i");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"(A, B)"#));
// }

// #[test]
// fn test_p438() {
//     let regex = Regex::xpath(r#"[k]"#, "i");
//     // n
//     let regex = regex.unwrap();
//     assert!(!regex.is_match(r#"AB"#));
// }

// #[test]
// fn test_p439() {
//     let regex = Regex::xpath(r#"abcd"#, "i");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"ABCD"#));
// }

// #[test]
// fn test_p440() {
//     let regex = Regex::xpath(r#"a(bc)d"#, "i");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"ABCD"#));
// }

// #[test]
// fn test_p441() {
//     let regex = Regex::xpath(r#"a[-]?c"#, "i");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"AC"#));
// }

// #[test]
// fn test_p442() {
//     let regex = Regex::xpath(r#"(abc)\1"#, "i");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"ABCABC"#));
// }

// #[test]
// fn test_p443() {
//     let regex = Regex::xpath(r#"([a-c]*)\1"#, "i");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"ABCABC"#));
// }

// #[test]
// fn test_p448() {
//     let regex = Regex::xpath(r#"a(?:b|c|d)(.)"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"ace"#));
// }

// #[test]
// fn test_p449() {
//     let regex = Regex::xpath(r#"a(?:b|c|d)*(.)"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"ace"#));
// }

// #[test]
// fn test_p450() {
//     let regex = Regex::xpath(r#"a(?:b|c|d)+?(.)"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"ace"#));
// }

// #[test]
// fn test_p451() {
//     let regex = Regex::xpath(r#"a(?:b|c|d)+?(.)"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"acdbcdbe"#));
// }

// #[test]
// fn test_p452() {
//     let regex = Regex::xpath(r#"a(?:b|c|d)+(.)"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"acdbcdbe"#));
// }

// #[test]
// fn test_p453() {
//     let regex = Regex::xpath(r#"a(?:b|c|d){2}(.)"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"acdbcdbe"#));
// }

// #[test]
// fn test_p454() {
//     let regex = Regex::xpath(r#"a(?:b|c|d){4,5}(.)"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"acdbcdbe"#));
// }

// #[test]
// fn test_p455() {
//     let regex = Regex::xpath(r#"a(?:b|c|d){4,5}?(.)"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"acdbcdbe"#));
// }

// #[test]
// fn test_p456() {
//     let regex = Regex::xpath(r#"((foo)|(bar))*"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"foobar"#));
// }

// #[test]
// fn test_p458() {
//     let regex = Regex::xpath(r#"a(?:b|c|d){6,7}(.)"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"acdbcdbe"#));
// }

// #[test]
// fn test_p459() {
//     let regex = Regex::xpath(r#"a(?:b|c|d){6,7}?(.)"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"acdbcdbe"#));
// }

// #[test]
// fn test_p460() {
//     let regex = Regex::xpath(r#"a(?:b|c|d){5,6}(.)"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"acdbcdbe"#));
// }

// #[test]
// fn test_p461() {
//     let regex = Regex::xpath(r#"a(?:b|c|d){5,6}?(.)"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"acdbcdbe"#));
// }

// #[test]
// fn test_p462() {
//     let regex = Regex::xpath(r#"a(?:b|c|d){5,7}(.)"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"acdbcdbe"#));
// }

// #[test]
// fn test_p463() {
//     let regex = Regex::xpath(r#"a(?:b|c|d){5,7}?(.)"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"acdbcdbe"#));
// }

// #[test]
// fn test_p464() {
//     let regex = Regex::xpath(r#"a(?:b|(c|e){1,2}?|d)+?(.)"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"ace"#));
// }

// #[test]
// fn test_p465() {
//     let regex = Regex::xpath(r#"^(.+)?B"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"AB"#));
// }

// #[test]
// fn test_p466() {
//     let regex = Regex::xpath(r#"^([^a-z])|(\^)$"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"."#));
// }

// #[test]
// fn test_p467() {
//     let regex = Regex::xpath(r#"^[<>]&"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"<&OUT"#));
// }

// #[test]
// fn test_p474() {
//     let regex = Regex::xpath(r#"((a{4})+)"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"aaaaaaaaa"#));
// }

// #[test]
// fn test_p475() {
//     let regex = Regex::xpath(r#"(((aa){2})+)"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"aaaaaaaaaa"#));
// }

// #[test]
// fn test_p476() {
//     let regex = Regex::xpath(r#"(((a{2}){2})+)"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"aaaaaaaaaa"#));
// }

// #[test]
// fn test_p477() {
//     let regex = Regex::xpath(r#"(?:(f)(o)(o)|(b)(a)(r))*"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"foobar"#));
// }

// #[test]
// fn test_p486() {
//     let regex = Regex::xpath(r#"(?:..)*a"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"aba"#));
// }

// #[test]
// fn test_p487() {
//     let regex = Regex::xpath(r#"(?:..)*?a"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"aba"#));
// }

// #[test]
// fn test_p489() {
//     let regex = Regex::xpath(r#"^(){3,5}"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"abc"#));
// }

// #[test]
// fn test_p490() {
//     let regex = Regex::xpath(r#"^(a+)*ax"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"aax"#));
// }

// #[test]
// fn test_p491() {
//     let regex = Regex::xpath(r#"^((a|b)+)*ax"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"aax"#));
// }

// #[test]
// fn test_p492() {
//     let regex = Regex::xpath(r#"^((a|bc)+)*ax"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"aax"#));
// }

// #[test]
// fn test_p493() {
//     let regex = Regex::xpath(r#"(a|x)*ab"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"cab"#));
// }

// #[test]
// fn test_p494() {
//     let regex = Regex::xpath(r#"(a)*ab"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"cab"#));
// }

// #[test]
// fn test_p533() {
//     let regex = Regex::xpath(r#"(?:c|d)(?:)(?:a(?:)(?:b)(?:b(?:))(?:b(?:)(?:b)))"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"cabbbb"#));
// }

// #[test]
// fn test_p534() {
//     let regex = Regex::xpath(
//         r#"(?:c|d)(?:)(?:aaaaaaaa(?:)(?:bbbbbbbb)(?:bbbbbbbb(?:))(?:bbbbbbbb(?:)(?:bbbbbbbb)))"#,
//         "",
//     );
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"caaaaaaaabbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb"#));
// }

// #[test]
// fn test_p535() {
//     let regex = Regex::xpath(r#"(ab)\d\1"#, "i");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"Ab4ab"#));
// }

// #[test]
// fn test_p536() {
//     let regex = Regex::xpath(r#"(ab)\d\1"#, "i");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"ab4Ab"#));
// }

// #[test]
// fn test_p537() {
//     let regex = Regex::xpath(r#"foo\w*\d{4}baz"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"foobar1234baz"#));
// }

// #[test]
// fn test_p546() {
//     let regex = Regex::xpath(r#"x(~~)*(?:(?:F)?)?"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"x~~"#));
// }

// #[test]
// fn test_p554() {
//     let regex = Regex::xpath(r#"^(?:a?b?)*$"#, "");
//     // n
//     let regex = regex.unwrap();
//     assert!(!regex.is_match(r#"a--"#));
// }

// #[test]
// fn test_p567() {
//     let regex = Regex::xpath(r#"^b"#, "");
//     // n
//     let regex = regex.unwrap();
//     assert!(!regex.is_match(r#"a\nb\nc\n"#));
// }

// #[test]
// fn test_p568() {
//     let regex = Regex::xpath(r#"()^b"#, "");
//     // n
//     let regex = regex.unwrap();
//     assert!(!regex.is_match(r#"a\nb\nc\n"#));
// }

// #[test]
// fn test_p601() {
//     let regex = Regex::xpath(r#"(\w+:)+"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"one:"#));
// }

// #[test]
// fn test_p605() {
//     let regex = Regex::xpath(r#"([\w:]+::)?(\w+)$"#, "");
//     // n
//     let regex = regex.unwrap();
//     assert!(!regex.is_match(r#"abcd:"#));
// }

// #[test]
// fn test_p606() {
//     let regex = Regex::xpath(r#"([\w:]+::)?(\w+)$"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"abcd"#));
// }

// #[test]
// fn test_p607() {
//     let regex = Regex::xpath(r#"([\w:]+::)?(\w+)$"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"xy:z:::abcd"#));
// }

// #[test]
// fn test_p608() {
//     let regex = Regex::xpath(r#"^[^bcd]*(c+)"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"aexycd"#));
// }

// #[test]
// fn test_p609() {
//     let regex = Regex::xpath(r#"(a*)b+"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"caab"#));
// }

// #[test]
// fn test_p610() {
//     let regex = Regex::xpath(r#"([\w:]+::)?(\w+)$"#, "");
//     // n
//     let regex = regex.unwrap();
//     assert!(!regex.is_match(r#"abcd:"#));
// }

// #[test]
// fn test_p611() {
//     let regex = Regex::xpath(r#"([\w:]+::)?(\w+)$"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"abcd"#));
// }

// #[test]
// fn test_p612() {
//     let regex = Regex::xpath(r#"([\w:]+::)?(\w+)$"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"xy:z:::abcd"#));
// }

// #[test]
// fn test_p613() {
//     let regex = Regex::xpath(r#"^[^bcd]*(c+)"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"aexycd"#));
// }

// #[test]
// fn test_p618() {
//     let regex = Regex::xpath(r#"(>a+)ab"#, "");
//     // n
//     let regex = regex.unwrap();
//     assert!(!regex.is_match(r#"aaab"#));
// }

// #[test]
// fn test_p662() {
//     let regex = Regex::xpath(r#"$"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"a\nb\n"#));
// }

// #[test]
// fn test_p665() {
//     let regex = Regex::xpath(r#"$"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"b\na\n"#));
// }

// #[test]
// fn test_p668() {
//     let regex = Regex::xpath(r#"$"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"b\na"#));
// }

// #[test]
// fn test_p671() {
//     let regex = Regex::xpath(r#"$"#, "m");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(
//         r#"a
// b
// "#
//     ));
// }

// #[test]
// fn test_p674() {
//     let regex = Regex::xpath(r#"$"#, "m");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(
//         r#"b
// a
// "#
//     ));
// }

// #[test]
// fn test_p677() {
//     let regex = Regex::xpath(r#"$"#, "m");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(
//         r#"b
// a"#
//     ));
// }

// #[test]
// fn test_p680() {
//     let regex = Regex::xpath(r#"a$"#, "");
//     // n
//     let regex = regex.unwrap();
//     assert!(!regex.is_match(
//         r#"a
// b
// "#
//     ));
// }

// #[test]
// fn test_p683() {
//     let regex = Regex::xpath(r#"a$"#, "");
//     // n
//     let regex = regex.unwrap();
//     assert!(!regex.is_match(
//         r#"b
// a
// "#
//     ));
// }

// #[test]
// fn test_p686() {
//     let regex = Regex::xpath(r#"a$"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(
//         r#"b
// a"#
//     ));
// }

// #[test]
// fn test_p689() {
//     let regex = Regex::xpath(r#"a$"#, "m");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(
//         r#"a
// b
// "#
//     ));
// }

// #[test]
// fn test_p692() {
//     let regex = Regex::xpath(r#"a$"#, "m");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(
//         r#"b
// a
// "#
//     ));
// }

// #[test]
// fn test_p695() {
//     let regex = Regex::xpath(r#"a$"#, "m");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(
//         r#"b
// a"#
//     ));
// }

// #[test]
// fn test_p698() {
//     let regex = Regex::xpath(r#"aa$"#, "");
//     // n
//     let regex = regex.unwrap();
//     assert!(!regex.is_match(
//         r#"aa
// b
// "#
//     ));
// }

// #[test]
// fn test_p701() {
//     let regex = Regex::xpath(r#"aa$"#, "");
//     // n
//     let regex = regex.unwrap();
//     assert!(!regex.is_match(
//         r#"b
// aa
// "#
//     ));
// }

// #[test]
// fn test_p704() {
//     let regex = Regex::xpath(r#"aa$"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(
//         r#"b
// aa"#
//     ));
// }

// #[test]
// fn test_p707() {
//     let regex = Regex::xpath(r#"aa$"#, "m");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(
//         r#"aa
// b
// "#
//     ));
// }

// #[test]
// fn test_p710() {
//     let regex = Regex::xpath(r#"aa$"#, "m");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(
//         r#"b
// aa
// "#
//     ));
// }

// #[test]
// fn test_p713() {
//     let regex = Regex::xpath(r#"aa$"#, "m");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(
//         r#"b
// aa"#
//     ));
// }

// #[test]
// fn test_p716() {
//     let regex = Regex::xpath(r#"aa$"#, "");
//     // n
//     let regex = regex.unwrap();
//     assert!(!regex.is_match(
//         r#"ac
// b
// "#
//     ));
// }

// #[test]
// fn test_p719() {
//     let regex = Regex::xpath(r#"aa$"#, "");
//     // n
//     let regex = regex.unwrap();
//     assert!(!regex.is_match(
//         r#"b
// ac
// "#
//     ));
// }

// #[test]
// fn test_p722() {
//     let regex = Regex::xpath(r#"aa$"#, "");
//     // n
//     let regex = regex.unwrap();
//     assert!(!regex.is_match(
//         r#"b
// ac"#
//     ));
// }

// #[test]
// fn test_p725() {
//     let regex = Regex::xpath(r#"aa$"#, "m");
//     // n
//     let regex = regex.unwrap();
//     assert!(!regex.is_match(
//         r#"ac
// b
// "#
//     ));
// }

// #[test]
// fn test_p728() {
//     let regex = Regex::xpath(r#"aa$"#, "m");
//     // n
//     let regex = regex.unwrap();
//     assert!(!regex.is_match(
//         r#"b
// ac
// "#
//     ));
// }

// #[test]
// fn test_p731() {
//     let regex = Regex::xpath(r#"aa$"#, "m");
//     // n
//     let regex = regex.unwrap();
//     assert!(!regex.is_match(
//         r#"b
// ac"#
//     ));
// }

// #[test]
// fn test_p734() {
//     let regex = Regex::xpath(r#"aa$"#, "");
//     // n
//     let regex = regex.unwrap();
//     assert!(!regex.is_match(
//         r#"ca
// b
// "#
//     ));
// }

// #[test]
// fn test_p737() {
//     let regex = Regex::xpath(r#"aa$"#, "");
//     // n
//     let regex = regex.unwrap();
//     assert!(!regex.is_match(
//         r#"b
// ca
// "#
//     ));
// }

// #[test]
// fn test_p740() {
//     let regex = Regex::xpath(r#"aa$"#, "");
//     // n
//     let regex = regex.unwrap();
//     assert!(!regex.is_match(
//         r#"b
// ca"#
//     ));
// }

// #[test]
// fn test_p743() {
//     let regex = Regex::xpath(r#"aa$"#, "m");
//     // n
//     let regex = regex.unwrap();
//     assert!(!regex.is_match(
//         r#"ca
// b
// "#
//     ));
// }

// #[test]
// fn test_p746() {
//     let regex = Regex::xpath(r#"aa$"#, "m");
//     // n
//     let regex = regex.unwrap();
//     assert!(!regex.is_match(
//         r#"b
// ca
// "#
//     ));
// }

// #[test]
// fn test_p749() {
//     let regex = Regex::xpath(r#"aa$"#, "m");
//     // n
//     let regex = regex.unwrap();
//     assert!(!regex.is_match(
//         r#"b
// ca"#
//     ));
// }

// #[test]
// fn test_p752() {
//     let regex = Regex::xpath(r#"ab$"#, "");
//     // n
//     let regex = regex.unwrap();
//     assert!(!regex.is_match(
//         r#"ab
// b
// "#
//     ));
// }

// #[test]
// fn test_p755() {
//     let regex = Regex::xpath(r#"ab$"#, "");
//     // n
//     let regex = regex.unwrap();
//     assert!(!regex.is_match(
//         r#"b
// ab
// "#
//     ));
// }

// #[test]
// fn test_p758() {
//     let regex = Regex::xpath(r#"ab$"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(
//         r#"b
// ab"#
//     ));
// }

// #[test]
// fn test_p761() {
//     let regex = Regex::xpath(r#"ab$"#, "m");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(
//         r#"ab
// b
// "#
//     ));
// }

// #[test]
// fn test_p764() {
//     let regex = Regex::xpath(r#"ab$"#, "m");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(
//         r#"b
// ab
// "#
//     ));
// }

// #[test]
// fn test_p767() {
//     let regex = Regex::xpath(r#"ab$"#, "m");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(
//         r#"b
// ab"#
//     ));
// }

// #[test]
// fn test_p770() {
//     let regex = Regex::xpath(r#"ab$"#, "");
//     // n
//     let regex = regex.unwrap();
//     assert!(!regex.is_match(
//         r#"ac
// b
// "#
//     ));
// }

// #[test]
// fn test_p773() {
//     let regex = Regex::xpath(r#"ab$"#, "");
//     // n
//     let regex = regex.unwrap();
//     assert!(!regex.is_match(
//         r#"b
// ac
// "#
//     ));
// }

// #[test]
// fn test_p776() {
//     let regex = Regex::xpath(r#"ab$"#, "");
//     // n
//     let regex = regex.unwrap();
//     assert!(!regex.is_match(
//         r#"b
// ac"#
//     ));
// }

// #[test]
// fn test_p779() {
//     let regex = Regex::xpath(r#"ab$"#, "m");
//     // n
//     let regex = regex.unwrap();
//     assert!(!regex.is_match(
//         r#"ac
// b
// "#
//     ));
// }

// #[test]
// fn test_p782() {
//     let regex = Regex::xpath(r#"ab$"#, "m");
//     // n
//     let regex = regex.unwrap();
//     assert!(!regex.is_match(
//         r#"b
// ac
// "#
//     ));
// }

// #[test]
// fn test_p785() {
//     let regex = Regex::xpath(r#"ab$"#, "m");
//     // n
//     let regex = regex.unwrap();
//     assert!(!regex.is_match(
//         r#"b
// ac"#
//     ));
// }

// #[test]
// fn test_p788() {
//     let regex = Regex::xpath(r#"ab$"#, "");
//     // n
//     let regex = regex.unwrap();
//     assert!(!regex.is_match(
//         r#"ca
// b
// "#
//     ));
// }

// #[test]
// fn test_p791() {
//     let regex = Regex::xpath(r#"ab$"#, "");
//     // n
//     let regex = regex.unwrap();
//     assert!(!regex.is_match(
//         r#"b
// ca
// "#
//     ));
// }

// #[test]
// fn test_p794() {
//     let regex = Regex::xpath(r#"ab$"#, "");
//     // n
//     let regex = regex.unwrap();
//     assert!(!regex.is_match(
//         r#"b
// ca"#
//     ));
// }

// #[test]
// fn test_p797() {
//     let regex = Regex::xpath(r#"ab$"#, "m");
//     // n
//     let regex = regex.unwrap();
//     assert!(!regex.is_match(
//         r#"ca
// b
// "#
//     ));
// }

// #[test]
// fn test_p800() {
//     let regex = Regex::xpath(r#"ab$"#, "m");
//     // n
//     let regex = regex.unwrap();
//     assert!(!regex.is_match(
//         r#"b
// ca
// "#
//     ));
// }

// #[test]
// fn test_p803() {
//     let regex = Regex::xpath(r#"ab$"#, "m");
//     // n
//     let regex = regex.unwrap();
//     assert!(!regex.is_match(
//         r#"b
// ca"#
//     ));
// }

// #[test]
// fn test_p806() {
//     let regex = Regex::xpath(r#"abb$"#, "");
//     // n
//     let regex = regex.unwrap();
//     assert!(!regex.is_match(
//         r#"abb
// b
// "#
//     ));
// }

// #[test]
// fn test_p809() {
//     let regex = Regex::xpath(r#"abb$"#, "");
//     // n
//     let regex = regex.unwrap();
//     assert!(!regex.is_match(
//         r#"b
// abb
// "#
//     ));
// }

// #[test]
// fn test_p812() {
//     let regex = Regex::xpath(r#"abb$"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(
//         r#"b
// abb"#
//     ));
// }

// #[test]
// fn test_p815() {
//     let regex = Regex::xpath(r#"abb$"#, "m");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(
//         r#"abb
// b
// "#
//     ));
// }

// #[test]
// fn test_p818() {
//     let regex = Regex::xpath(r#"abb$"#, "m");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(
//         r#"b
// abb
// "#
//     ));
// }

// #[test]
// fn test_p821() {
//     let regex = Regex::xpath(r#"abb$"#, "m");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(
//         r#"b
// abb"#
//     ));
// }

// #[test]
// fn test_p824() {
//     let regex = Regex::xpath(r#"abb$"#, "");
//     // n
//     let regex = regex.unwrap();
//     assert!(!regex.is_match(
//         r#"ac
// b
// "#
//     ));
// }

// #[test]
// fn test_p827() {
//     let regex = Regex::xpath(r#"abb$"#, "");
//     // n
//     let regex = regex.unwrap();
//     assert!(!regex.is_match(
//         r#"b
// ac
// "#
//     ));
// }

// #[test]
// fn test_p830() {
//     let regex = Regex::xpath(r#"abb$"#, "");
//     // n
//     let regex = regex.unwrap();
//     assert!(!regex.is_match(
//         r#"b
// ac"#
//     ));
// }

// #[test]
// fn test_p833() {
//     let regex = Regex::xpath(r#"abb$"#, "m");
//     // n
//     let regex = regex.unwrap();
//     assert!(!regex.is_match(
//         r#"ac
// b
// "#
//     ));
// }

// #[test]
// fn test_p836() {
//     let regex = Regex::xpath(r#"abb$"#, "m");
//     // n
//     let regex = regex.unwrap();
//     assert!(!regex.is_match(
//         r#"b
// ac
// "#
//     ));
// }

// #[test]
// fn test_p839() {
//     let regex = Regex::xpath(r#"abb$"#, "m");
//     // n
//     let regex = regex.unwrap();
//     assert!(!regex.is_match(
//         r#"b
// ac"#
//     ));
// }

// #[test]
// fn test_p842() {
//     let regex = Regex::xpath(r#"abb$"#, "");
//     // n
//     let regex = regex.unwrap();
//     assert!(!regex.is_match(
//         r#"ca
// b
// "#
//     ));
// }

// #[test]
// fn test_p845() {
//     let regex = Regex::xpath(r#"abb$"#, "");
//     // n
//     let regex = regex.unwrap();
//     assert!(!regex.is_match(
//         r#"b
// ca
// "#
//     ));
// }

// #[test]
// fn test_p848() {
//     let regex = Regex::xpath(r#"abb$"#, "");
//     // n
//     let regex = regex.unwrap();
//     assert!(!regex.is_match(
//         r#"b
// ca"#
//     ));
// }

// #[test]
// fn test_p851() {
//     let regex = Regex::xpath(r#"abb$"#, "m");
//     // n
//     let regex = regex.unwrap();
//     assert!(!regex.is_match(
//         r#"ca
// b
// "#
//     ));
// }

// #[test]
// fn test_p854() {
//     let regex = Regex::xpath(r#"abb$"#, "m");
//     // n
//     let regex = regex.unwrap();
//     assert!(!regex.is_match(
//         r#"b
// ca
// "#
//     ));
// }

// #[test]
// fn test_p857() {
//     let regex = Regex::xpath(r#"abb$"#, "m");
//     // n
//     let regex = regex.unwrap();
//     assert!(!regex.is_match(
//         r#"b
// ca"#
//     ));
// }

// #[test]
// fn test_p859() {
//     let regex = Regex::xpath(r#"(^|x)(c)"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"ca"#));
// }

// #[test]
// fn test_p860() {
//     let regex = Regex::xpath(r#"a*abc?xyz+pqr{3}ab{2,}xy{4,5}pq{0,6}AB{0,}zz"#, "");
//     // n
//     let regex = regex.unwrap();
//     assert!(!regex.is_match(r#"x"#));
// }

// #[test]
// fn test_p865() {
//     let regex = Regex::xpath(r#"foo.bart"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"foo.bart"#));
// }

// #[test]
// fn test_p866() {
//     let regex = Regex::xpath(r#"^d[x][x][x]"#, "m");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(
//         r#"abcd
// dxxx"#
//     ));
// }

// #[test]
// fn test_p885() {
//     let regex = Regex::xpath(r#"tt+$"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"xxxtt"#));
// }

// #[test]
// fn test_p892() {
//     let regex = Regex::xpath(r#"([a-[:digit:]]+)"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"za-9z"#));
// }

// #[test]
// fn test_p893() {
//     let regex = Regex::xpath(r#"([a-[:digit:]]+)"#, "");
//     // n
//     let regex = regex.unwrap();
//     assert!(!regex.is_match(r#"-"#));
// }

// #[test]
// fn test_p899() {
//     let regex = Regex::xpath(r#"(\d+\.\d+)"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"3.1415926"#));
// }

// #[test]
// fn test_p901() {
//     let regex = Regex::xpath(r#"\.c(pp|xx|c)?$"#, "i");
//     // n
//     let regex = regex.unwrap();
//     assert!(!regex.is_match(r#"Changes"#));
// }

// #[test]
// fn test_p902() {
//     let regex = Regex::xpath(r#"\.c(pp|xx|c)?$"#, "i");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"IO.c"#));
// }

// #[test]
// fn test_p903() {
//     let regex = Regex::xpath(r#"(\.c(pp|xx|c)?$)"#, "i");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"IO.c"#));
// }

// #[test]
// fn test_p904() {
//     let regex = Regex::xpath(r#"^([a-z]:)"#, "");
//     // n
//     let regex = regex.unwrap();
//     assert!(!regex.is_match(r#"C:/"#));
// }

// #[test]
// fn test_p905() {
//     let regex = Regex::xpath(r#"^\S\s+aa$"#, "m");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(
//         r#"
// x aa"#
//     ));
// }

// #[test]
// fn test_p906() {
//     let regex = Regex::xpath(r#"(^|a)b"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"ab"#));
// }

// #[test]
// fn test_p907() {
//     let regex = Regex::xpath(r#"^([ab]*?)(b)?(c)$"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"abac"#));
// }

// #[test]
// fn test_p908() {
//     let regex = Regex::xpath(r#"(\w)?(abc)\1b"#, "");
//     // n
//     let regex = regex.unwrap();
//     assert!(!regex.is_match(r#"abcab"#));
// }

// #[test]
// fn test_p909() {
//     let regex = Regex::xpath(r#"^(?:.,){2}c"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"a,b,c"#));
// }

// #[test]
// fn test_p910() {
//     let regex = Regex::xpath(r#"^(.,){2}c"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"a,b,c"#));
// }

// #[test]
// fn test_p911() {
//     let regex = Regex::xpath(r#"^(?:[^,]*,){2}c"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"a,b,c"#));
// }

// #[test]
// fn test_p912() {
//     let regex = Regex::xpath(r#"^([^,]*,){2}c"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"a,b,c"#));
// }

// #[test]
// fn test_p913() {
//     let regex = Regex::xpath(r#"^([^,]*,){3}d"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"aaa,b,c,d"#));
// }

// #[test]
// fn test_p914() {
//     let regex = Regex::xpath(r#"^([^,]*,){3,}d"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"aaa,b,c,d"#));
// }

// #[test]
// fn test_p915() {
//     let regex = Regex::xpath(r#"^([^,]*,){0,3}d"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"aaa,b,c,d"#));
// }

// #[test]
// fn test_p916() {
//     let regex = Regex::xpath(r#"^([^,]{1,3},){3}d"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"aaa,b,c,d"#));
// }

// #[test]
// fn test_p917() {
//     let regex = Regex::xpath(r#"^([^,]{1,3},){3,}d"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"aaa,b,c,d"#));
// }

// #[test]
// fn test_p918() {
//     let regex = Regex::xpath(r#"^([^,]{1,3},){0,3}d"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"aaa,b,c,d"#));
// }

// #[test]
// fn test_p919() {
//     let regex = Regex::xpath(r#"^([^,]{1,},){3}d"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"aaa,b,c,d"#));
// }

// #[test]
// fn test_p920() {
//     let regex = Regex::xpath(r#"^([^,]{1,},){3,}d"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"aaa,b,c,d"#));
// }

// #[test]
// fn test_p921() {
//     let regex = Regex::xpath(r#"^([^,]{1,},){0,3}d"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"aaa,b,c,d"#));
// }

// #[test]
// fn test_p922() {
//     let regex = Regex::xpath(r#"^([^,]{0,3},){3}d"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"aaa,b,c,d"#));
// }

// #[test]
// fn test_p923() {
//     let regex = Regex::xpath(r#"^([^,]{0,3},){3,}d"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"aaa,b,c,d"#));
// }

// #[test]
// fn test_p924() {
//     let regex = Regex::xpath(r#"^([^,]{0,3},){0,3}d"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"aaa,b,c,d"#));
// }

// #[test]
// fn test_p928() {
//     let regex = Regex::xpath(r#"^(a(b)?)+$"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"aba"#));
// }

// #[test]
// fn test_p929() {
//     let regex = Regex::xpath(r#"^(aa(bb)?)+$"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"aabbaa"#));
// }

// #[test]
// fn test_p930() {
//     let regex = Regex::xpath(r#"^.{9}abc.*\n"#, "m");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(
//         r#"123
// abcabcabcabc
// "#
//     ));
// }

// #[test]
// fn test_p931() {
//     let regex = Regex::xpath(r#"^(a)?a$"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"a"#));
// }

// #[test]
// fn test_p935() {
//     let regex = Regex::xpath(r#"^(0+)?(?:x(1))?"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"x1"#));
// }

// #[test]
// fn test_p936() {
//     let regex = Regex::xpath(
//         r#"^([0-9a-fA-F]+)(?:x([0-9a-fA-F]+)?)(?:x([0-9a-fA-F]+))?"#,
//         "",
//     );
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"012cxx0190"#));
// }

// #[test]
// fn test_p937() {
//     let regex = Regex::xpath(r#"^(b+?|a){1,2}c"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"bbbac"#));
// }

// #[test]
// fn test_p938() {
//     let regex = Regex::xpath(r#"^(b+?|a){1,2}c"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"bbbbac"#));
// }

// #[test]
// fn test_p939() {
//     let regex = Regex::xpath(r#"\((\w\. \w+)\)"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"cd. (A. Tw)"#));
// }

// #[test]
// fn test_p940() {
//     let regex = Regex::xpath(r#"((?:aaaa|bbbb)cccc)?"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"aaaacccc"#));
// }

// #[test]
// fn test_p941() {
//     let regex = Regex::xpath(r#"((?:aaaa|bbbb)cccc)?"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"bbbbcccc"#));
// }

// #[test]
// fn test_p942() {
//     let regex = Regex::xpath(r#"(a)?(a)+"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"a"#));
// }

// #[test]
// fn test_p943() {
//     let regex = Regex::xpath(r#"(ab)?(ab)+"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"ab"#));
// }

// #[test]
// fn test_p944() {
//     let regex = Regex::xpath(r#"(abc)?(abc)+"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"abc"#));
// }

// #[test]
// fn test_p945() {
//     let regex = Regex::xpath(r#"b\s^"#, "m");
//     // n
//     let regex = regex.unwrap();
//     assert!(!regex.is_match(r#"a\nb\n"#));
// }

// #[test]
// fn test_p955() {
//     let regex = Regex::xpath(r#"(.*)\d+\1"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"abc12bc"#));
// }

// #[test]
// fn test_p957() {
//     let regex = Regex::xpath(r#"(.*)c"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"abcd"#));
// }

// #[test]
// fn test_p974() {
//     let regex = Regex::xpath(r#"(.*?)c"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"abcd"#));
// }

// #[test]
// fn test_p993() {
//     let regex = Regex::xpath(r#"a(b)??"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"abc"#));
// }

// #[test]
// fn test_p994() {
//     let regex = Regex::xpath(r#"(\d{1,3}\.){3,}"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"128.134.142.8"#));
// }

// #[test]
// fn test_p995() {
//     let regex = Regex::xpath(r#"^.{3,4}(.+)\1$"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"foobarbar"#));
// }

// #[test]
// fn test_p996() {
//     let regex = Regex::xpath(r#"^(?:f|o|b){3,4}(.+)\1$"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"foobarbar"#));
// }

// #[test]
// fn test_p997() {
//     let regex = Regex::xpath(r#"^.{3,4}((?:b|a|r)+)\1$"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"foobarbar"#));
// }

// #[test]
// fn test_p998() {
//     let regex = Regex::xpath(r#"^(?:f|o|b){3,4}((?:b|a|r)+)\1$"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"foobarbar"#));
// }

// #[test]
// fn test_p999() {
//     let regex = Regex::xpath(r#"^.{3,4}(.+?)\1$"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"foobarbar"#));
// }

// #[test]
// fn test_p1000() {
//     let regex = Regex::xpath(r#"^(?:f|o|b){3,4}(.+?)\1$"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"foobarbar"#));
// }

// #[test]
// fn test_p1001() {
//     let regex = Regex::xpath(r#"^.{3,4}((?:b|a|r)+?)\1$"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"foobarbar"#));
// }

// #[test]
// fn test_p1002() {
//     let regex = Regex::xpath(r#"^(?:f|o|b){3,4}((?:b|a|r)+?)\1$"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"foobarbar"#));
// }

// #[test]
// fn test_p1003() {
//     let regex = Regex::xpath(r#"^.{2,3}?(.+)\1$"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"foobarbar"#));
// }

// #[test]
// fn test_p1004() {
//     let regex = Regex::xpath(r#"^(?:f|o|b){2,3}?(.+)\1$"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"foobarbar"#));
// }

// #[test]
// fn test_p1005() {
//     let regex = Regex::xpath(r#"^.{2,3}?((?:b|a|r)+)\1$"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"foobarbar"#));
// }

// #[test]
// fn test_p1006() {
//     let regex = Regex::xpath(r#"^(?:f|o|b){2,3}?((?:b|a|r)+)\1$"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"foobarbar"#));
// }

// #[test]
// fn test_p1007() {
//     let regex = Regex::xpath(r#"^.{2,3}?(.+?)\1$"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"foobarbar"#));
// }

// #[test]
// fn test_p1008() {
//     let regex = Regex::xpath(r#"^(?:f|o|b){2,3}?(.+?)\1$"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"foobarbar"#));
// }

// #[test]
// fn test_p1009() {
//     let regex = Regex::xpath(r#"^.{2,3}?((?:b|a|r)+?)\1$"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"foobarbar"#));
// }

// #[test]
// fn test_p1010() {
//     let regex = Regex::xpath(r#"^(?:f|o|b){2,3}?((?:b|a|r)+?)\1$"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"foobarbar"#));
// }

// #[test]
// fn test_p1014() {
//     let regex = Regex::xpath(r#"(WORDS|WORD)S"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"WORDS"#));
// }

// #[test]
// fn test_p1015() {
//     let regex = Regex::xpath(r#"(X.|WORDS|X.|WORD)S"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"WORDS"#));
// }

// #[test]
// fn test_p1016() {
//     let regex = Regex::xpath(r#"(WORDS|WORLD|WORD)S"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"WORDS"#));
// }

// #[test]
// fn test_p1017() {
//     let regex = Regex::xpath(r#"(X.|WORDS|WORD|Y.)S"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"WORDS"#));
// }

// #[test]
// fn test_p1018() {
//     let regex = Regex::xpath(r#"(foo|fool|x.|money|parted)$"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"fool"#));
// }

// #[test]
// fn test_p1019() {
//     let regex = Regex::xpath(r#"(x.|foo|fool|x.|money|parted|y.)$"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"fool"#));
// }

// #[test]
// fn test_p1020() {
//     let regex = Regex::xpath(r#"(foo|fool|money|parted)$"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"fool"#));
// }

// #[test]
// fn test_p1021() {
//     let regex = Regex::xpath(r#"(foo|fool|x.|money|parted)$"#, "");
//     // n
//     let regex = regex.unwrap();
//     assert!(!regex.is_match(r#"fools"#));
// }

// #[test]
// fn test_p1022() {
//     let regex = Regex::xpath(r#"(x.|foo|fool|x.|money|parted|y.)$"#, "");
//     // n
//     let regex = regex.unwrap();
//     assert!(!regex.is_match(r#"fools"#));
// }

// #[test]
// fn test_p1023() {
//     let regex = Regex::xpath(r#"(foo|fool|money|parted)$"#, "");
//     // n
//     let regex = regex.unwrap();
//     assert!(!regex.is_match(r#"fools"#));
// }

// #[test]
// fn test_p1024() {
//     let regex = Regex::xpath(r#"(a|aa|aaa||aaaa|aaaaa|aaaaaa)(b|c)"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"aaaaaaaaaaaaaaab"#));
// }

// #[test]
// fn test_p1030() {
//     let regex = Regex::xpath(r#"(?:r?)*?r|(.{2,4})"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"abcde"#));
// }

// #[test]
// fn test_p1034() {
//     let regex = Regex::xpath(r#"^((?:aa)*)(?:X+((?:\d+|-)(?:X+(.+))?))?$"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"aaaaX5"#));
// }

// #[test]
// fn test_p1035() {
//     let regex = Regex::xpath(r#"X(A|B||C|D)Y"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"XXXYYY"#));
// }

// #[test]
// fn test_p1037() {
//     let regex = Regex::xpath(r#"^([a]{1})*$"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"aa"#));
// }

// #[test]
// fn test_p1042() {
//     let regex = Regex::xpath(r#"^(XXXXXXXXXX|YYYYYYYYYY|Z.Q*X|Z[TE]Q*P):"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"ZEQQQQQQQQQQQQQQQQQQP:"#));
// }

// #[test]
// fn test_p1043() {
//     let regex = Regex::xpath(r#"^(XXXXXXXXXX|YYYYYYYYYY|Z.Q*X|Z[TE]Q*P):"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"ZEQQQX:"#));
// }

// #[test]
// fn test_p1044() {
//     let regex = Regex::xpath(r#"^([TUV]+|XXXXXXXXXX|YYYYYYYYYY|Z.Q*X|Z[TE]Q*P):"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"ZEQQQQQQQQQQQQQQQQQQP:"#));
// }

// #[test]
// fn test_p1045() {
//     let regex = Regex::xpath(r#"^([TUV]+|XXXXXXXXXX|YYYYYYYYYY|Z.Q*X|Z[TE]Q*P):"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"ZEQQQX:"#));
// }

// #[test]
// fn test_p1046() {
//     let regex = Regex::xpath(
//         r#"^([TUV]+|XXXXXXXXXX|YYYYYYYYYY|Z.Q*X|Z[TE]Q*P|[MKJ]):"#,
//         "",
//     );
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"ZEQQQQQQQQQQQQQQQQQQP:"#));
// }

// #[test]
// fn test_p1047() {
//     let regex = Regex::xpath(
//         r#"^([TUV]+|XXXXXXXXXX|YYYYYYYYYY|Z.Q*X|Z[TE]Q*P|[MKJ]):"#,
//         "",
//     );
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"ZEQQQX:"#));
// }

// #[test]
// fn test_p1048() {
//     let regex = Regex::xpath(r#"^(XXX|YYY|Z.Q*X|Z[TE]Q*P):"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"ZEQQQQQQQQQQQQQQQQQQP:"#));
// }

// #[test]
// fn test_p1049() {
//     let regex = Regex::xpath(r#"^(XXX|YYY|Z.Q*X|Z[TE]Q*P):"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"ZEQQQX:"#));
// }

// #[test]
// fn test_p1050() {
//     let regex = Regex::xpath(r#"^([TUV]+|XXX|YYY|Z.Q*X|Z[TE]Q*P):"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"ZEQQQQQQQQQQQQQQQQQQP:"#));
// }

// #[test]
// fn test_p1051() {
//     let regex = Regex::xpath(r#"^([TUV]+|XXX|YYY|Z.Q*X|Z[TE]Q*P):"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"ZEQQQX:"#));
// }

// #[test]
// fn test_p1052() {
//     let regex = Regex::xpath(r#"^([TUV]+|XXX|YYY|Z.Q*X|Z[TE]Q*P|[MKJ]):"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"ZEQQQQQQQQQQQQQQQQQQP:"#));
// }

// #[test]
// fn test_p1053() {
//     let regex = Regex::xpath(r#"^([TUV]+|XXX|YYY|Z.Q*X|Z[TE]Q*P|[MKJ]):"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"ZEQQQX:"#));
// }

// #[test]
// fn test_p1054() {
//     let regex = Regex::xpath(r#"X(?:ABCF[cC]x*|ABCD|ABCF):(?:DIT|DID|DIM)"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"XABCFCxxxxxxxxxx:DIM"#));
// }

// #[test]
// fn test_p1055() {
//     let regex = Regex::xpath(r#"(((ABCD|ABCE|ABCF)))(A|B|C[xy]*):"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"ABCFCxxxxxxxxxx:DIM"#));
// }

// #[test]
// fn test_p1222() {
//     let regex = Regex::xpath(r#"(foo[1x]|bar[2x]|baz[3x])+y"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"foo1bar2baz3y"#));
// }

// #[test]
// fn test_p1223() {
//     let regex = Regex::xpath(r#"(foo[1x]|bar[2x]|baz[3x])+y"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"foo1bar2baz3y"#));
// }

// #[test]
// fn test_p1224() {
//     let regex = Regex::xpath(r#"(foo[1x]|bar[2x]|baz[3x])*y"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"foo1bar2baz3y"#));
// }

// #[test]
// fn test_p1225() {
//     let regex = Regex::xpath(r#"(foo[1x]|bar[2x]|baz[3x])*y"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"foo1bar2baz3y"#));
// }

// #[test]
// fn test_p1227() {
//     let regex = Regex::xpath(r#"([yX].|WORDS|[yX].|WORD)S"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"WORDS"#));
// }

// #[test]
// fn test_p1228() {
//     let regex = Regex::xpath(r#"(WORDS|WORLD|WORD)S"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"WORDS"#));
// }

// #[test]
// fn test_p1229() {
//     let regex = Regex::xpath(r#"([yX].|WORDS|WORD|[xY].)S"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"WORDS"#));
// }

// #[test]
// fn test_p1230() {
//     let regex = Regex::xpath(r#"(foo|fool|[zx].|money|parted)$"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"fool"#));
// }

// #[test]
// fn test_p1231() {
//     let regex = Regex::xpath(r#"([zx].|foo|fool|[zq].|money|parted|[yx].)$"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"fool"#));
// }

// #[test]
// fn test_p1232() {
//     let regex = Regex::xpath(r#"(foo|fool|[zx].|money|parted)$"#, "");
//     // n
//     let regex = regex.unwrap();
//     assert!(!regex.is_match(r#"fools"#));
// }

// #[test]
// fn test_p1233() {
//     let regex = Regex::xpath(r#"([zx].|foo|fool|[qx].|money|parted|[py].)$"#, "");
//     // n
//     let regex = regex.unwrap();
//     assert!(!regex.is_match(r#"fools"#));
// }

// #[test]
// fn test_p1235() {
//     let regex = Regex::xpath(r#"([yX].|WORDS|[yX].|WORD)+S"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"WORDS"#));
// }

// #[test]
// fn test_p1236() {
//     let regex = Regex::xpath(r#"(WORDS|WORLD|WORD)+S"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"WORDS"#));
// }

// #[test]
// fn test_p1237() {
//     let regex = Regex::xpath(r#"([yX].|WORDS|WORD|[xY].)+S"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"WORDS"#));
// }

// #[test]
// fn test_p1238() {
//     let regex = Regex::xpath(r#"(foo|fool|[zx].|money|parted)+$"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"fool"#));
// }

// #[test]
// fn test_p1239() {
//     let regex = Regex::xpath(r#"([zx].|foo|fool|[zq].|money|parted|[yx].)+$"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"fool"#));
// }

// #[test]
// fn test_p1240() {
//     let regex = Regex::xpath(r#"(foo|fool|[zx].|money|parted)+$"#, "");
//     // n
//     let regex = regex.unwrap();
//     assert!(!regex.is_match(r#"fools"#));
// }

// #[test]
// fn test_p1241() {
//     let regex = Regex::xpath(r#"([zx].|foo|fool|[qx].|money|parted|[py].)+$"#, "");
//     // n
//     let regex = regex.unwrap();
//     assert!(!regex.is_match(r#"fools"#));
// }

// #[test]
// fn test_p1243() {
//     let regex = Regex::xpath(
//         r#"(x|y|z[QW])+(longish|loquatious|excessive|overblown[QW])+"#,
//         "",
//     );
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"xyzQzWlongishoverblownW"#));
// }

// #[test]
// fn test_p1244() {
//     let regex = Regex::xpath(
//         r#"(x|y|z[QW])*(longish|loquatious|excessive|overblown[QW])*"#,
//         "",
//     );
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"xyzQzWlongishoverblownW"#));
// }

// #[test]
// fn test_p1245() {
//     let regex = Regex::xpath(
//         r#"(x|y|z[QW]){1,5}(longish|loquatious|excessive|overblown[QW]){1,5}"#,
//         "",
//     );
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"xyzQzWlongishoverblownW"#));
// }

// #[test]
// fn test_p1403() {
//     let regex = Regex::xpath(r#"^(?:(\d)x)?\d$"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"1"#));
// }

// #[test]
// fn test_p1404() {
//     let regex = Regex::xpath(r#".*?(?:(\w)|(\w))x"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"abx"#));
// }

// #[test]
// fn test_p1406() {
//     let regex = Regex::xpath(r#"0{50}"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"000000000000000000000000000000000000000000000000000"#));
// }

// #[test]
// fn test_p1409() {
//     let regex = Regex::xpath(r#"/>\d+$ \n/ix"#, "");
//     // n
//     let regex = regex.unwrap();
//     assert!(!regex.is_match(r#">10\n"#));
// }

// #[test]
// fn test_p1410() {
//     let regex = Regex::xpath(r#"/>\d+$ \n/ix"#, "");
//     // n
//     let regex = regex.unwrap();
//     assert!(!regex.is_match(r#">1\n"#));
// }

// #[test]
// fn test_p1411() {
//     let regex = Regex::xpath(r#"/\d+$ \n/ix"#, "");
//     // n
//     let regex = regex.unwrap();
//     assert!(!regex.is_match(r#">10\n"#));
// }

// #[test]
// fn test_p1412() {
//     let regex = Regex::xpath(r#"/>\d\d$ \n/ix"#, "");
//     // n
//     let regex = regex.unwrap();
//     assert!(!regex.is_match(r#">10\n"#));
// }

// #[test]
// fn test_p1413() {
//     let regex = Regex::xpath(r#"/>\d+$ \n/x"#, "");
//     // n
//     let regex = regex.unwrap();
//     assert!(!regex.is_match(r#">10\n"#));
// }

// #[test]
// fn test_p1417() {
//     let regex = Regex::xpath(r#"/^\s*i.*?o\s*$/s"#, "");
//     // n
//     let regex = regex.unwrap();
//     assert!(!regex.is_match(r#"io\n io"#));
// }

// #[test]
// fn test_p1430() {
//     let regex = Regex::xpath(r#"[\s][\S]"#, "");
//     // n
//     let regex = regex.unwrap();
//     assert!(!regex.is_match(r#"\x{a0}\x{a0}"#));
// }

// #[test]
// fn test_p1475() {
//     let regex = Regex::xpath(r#"\c`"#, "");
//     // n
//     let regex = regex.unwrap();
//     assert!(!regex.is_match(r#"-"#));
// }

// #[test]
// fn test_p1476() {
//     let regex = Regex::xpath(r#"\c1"#, "");
//     // n
//     let regex = regex.unwrap();
//     assert!(!regex.is_match(r#"-"#));
// }

// #[test]
// fn test_p1477() {
//     let regex = Regex::xpath(r#"\cA"#, "");
//     // n
//     let regex = regex.unwrap();
//     assert!(!regex.is_match(r#"\001"#));
// }

// #[test]
// fn test_p1558() {
//     let regex = Regex::xpath(r#"(q1|.)*(q2|.)*(x(a|bc)*y){2,}"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"xayxay"#));
// }

// #[test]
// fn test_p1559() {
//     let regex = Regex::xpath(r#"(q1|.)*(q2|.)*(x(a|bc)*y){2,3}"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"xayxay"#));
// }

// #[test]
// fn test_p1560() {
//     let regex = Regex::xpath(r#"(q1|z)*(q2|z)*z{15}-.*?(x(a|bc)*y){2,3}Z"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"zzzzzzzzzzzzzzzz-xayxayxayxayZ"#));
// }

// #[test]
// fn test_p1562() {
//     let regex = Regex::xpath(r#"(?:(?:)foo|bar|zot|rt78356)"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"foo"#));
// }

// #[test]
// fn test_p1569() {
//     let regex = Regex::xpath(r#"^m?(\S)(.*)\1$"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"aba"#));
// }

// #[test]
// fn test_p1570() {
//     let regex = Regex::xpath(r#"^m?(\S)(.*)\1$"#, "");
//     // n
//     let regex = regex.unwrap();
//     assert!(!regex.is_match(r#"\tb\t"#));
// }

// #[test]
// fn test_p1571() {
//     let regex = Regex::xpath(r#"^m?(\s)(.*)\1$"#, "");
//     // n
//     let regex = regex.unwrap();
//     assert!(!regex.is_match(r#"\tb\t"#));
// }

// #[test]
// fn test_p1572() {
//     let regex = Regex::xpath(r#"^m?(\s)(.*)\1$"#, "");
//     // n
//     let regex = regex.unwrap();
//     assert!(!regex.is_match(r#"aba"#));
// }

// #[test]
// fn test_p1573() {
//     let regex = Regex::xpath(r#"^m?(\W)(.*)\1$"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#":b:"#));
// }

// #[test]
// fn test_p1574() {
//     let regex = Regex::xpath(r#"^m?(\W)(.*)\1$"#, "");
//     // n
//     let regex = regex.unwrap();
//     assert!(!regex.is_match(r#"aba"#));
// }

// #[test]
// fn test_p1575() {
//     let regex = Regex::xpath(r#"^m?(\w)(.*)\1$"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"aba"#));
// }

// #[test]
// fn test_p1576() {
//     let regex = Regex::xpath(r#"^m?(\w)(.*)\1$"#, "");
//     // n
//     let regex = regex.unwrap();
//     assert!(!regex.is_match(r#":b:"#));
// }

// #[test]
// fn test_p1577() {
//     let regex = Regex::xpath(r#"^m?(\D)(.*)\1$"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"aba"#));
// }

// #[test]
// fn test_p1578() {
//     let regex = Regex::xpath(r#"^m?(\D)(.*)\1$"#, "");
//     // n
//     let regex = regex.unwrap();
//     assert!(!regex.is_match(r#"5b5"#));
// }

// #[test]
// fn test_p1579() {
//     let regex = Regex::xpath(r#"^m?(\d)(.*)\1$"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"5b5"#));
// }

// #[test]
// fn test_p1580() {
//     let regex = Regex::xpath(r#"^m?(\d)(.*)\1$"#, "");
//     // n
//     let regex = regex.unwrap();
//     assert!(!regex.is_match(r#"aba"#));
// }

// #[test]
// fn test_p1583() {
//     let regex = Regex::xpath(r#"/s/ai"#, "");
//     // n
//     let regex = regex.unwrap();
//     assert!(!regex.is_match(r#"ſ"#));
// }

// #[test]
// fn test_p1584() {
//     let regex = Regex::xpath(r#"/s/aia"#, "");
//     // n
//     let regex = regex.unwrap();
//     assert!(!regex.is_match(r#"ſ"#));
// }

// #[test]
// fn test_p1585() {
//     let regex = Regex::xpath(r#"/s/aia"#, "");
//     // n
//     let regex = regex.unwrap();
//     assert!(!regex.is_match(r#"S"#));
// }

// #[test]
// fn test_p1601() {
//     let regex = Regex::xpath(r#"^\p{L}"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"㐀"#));
// }

// #[test]
// fn test_p1610() {
//     let regex = Regex::xpath(r#"/ff/i"#, "");
//     // n
//     let regex = regex.unwrap();
//     assert!(!regex.is_match(r#"\x{FB00}\x{FB01}"#));
// }

// #[test]
// fn test_p1611() {
//     let regex = Regex::xpath(r#"/ff/i"#, "");
//     // n
//     let regex = regex.unwrap();
//     assert!(!regex.is_match(r#"\x{FB01}\x{FB00}"#));
// }

// #[test]
// fn test_p1612() {
//     let regex = Regex::xpath(r#"/fi/i"#, "");
//     // n
//     let regex = regex.unwrap();
//     assert!(!regex.is_match(r#"\x{FB01}\x{FB00}"#));
// }

// #[test]
// fn test_p1613() {
//     let regex = Regex::xpath(r#"/fi/i"#, "");
//     // n
//     let regex = regex.unwrap();
//     assert!(!regex.is_match(r#"\x{FB00}\x{FB01}"#));
// }

// #[test]
// fn test_p1618() {
//     let regex = Regex::xpath(r#"ab[(?{1]"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"ab1"#));
// }

// #[test]
// fn test_p1619() {
//     let regex = Regex::xpath(r#"ab[(?{1\](?{2]"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"ab2"#));
// }

// #[test]
// fn test_p1623() {
//     let regex = Regex::xpath(r#"ab\\[(??{1;})]c"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"ab\;c"#));
// }

// #[test]
// fn test_p1625() {
//     let regex = Regex::xpath(r#"ab[c\](??{"]d"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"abcd"#));
// }

// #[test]
// fn test_p1627() {
//     let regex = Regex::xpath(r#"ab[c\\\](??{"x"})]{3}d"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"ab\](d"#));
// }

// #[test]
// fn test_p1631() {
//     let regex = Regex::xpath(r#"/ffiffl/i"#, "");
//     // n
//     let regex = regex.unwrap();
//     assert!(!regex.is_match(r#"abcdef\x{FB03}\x{FB04}"#));
// }

// #[test]
// fn test_p1634() {
//     let regex = Regex::xpath(r#"/st/i"#, "");
//     // n
//     let regex = regex.unwrap();
//     assert!(!regex.is_match(r#"\x{DF}\x{FB05}"#));
// }

// #[test]
// fn test_p1635() {
//     let regex = Regex::xpath(r#"/ssst/i"#, "");
//     // n
//     let regex = regex.unwrap();
//     assert!(!regex.is_match(r#"\x{DF}\x{FB05}"#));
// }

// #[test]
// fn test_p1636() {
//     let regex = Regex::xpath(r#"/[s]s/i"#, "");
//     // n
//     let regex = regex.unwrap();
//     assert!(!regex.is_match(r#"\x{DF}"#));
// }

// #[test]
// fn test_p1637() {
//     let regex = Regex::xpath(r#"/s[s]/i"#, "");
//     // n
//     let regex = regex.unwrap();
//     assert!(!regex.is_match(r#"\x{DF}"#));
// }

// #[test]
// fn test_p1646() {
//     let regex = Regex::xpath(r#"/sst/ui"#, "");
//     // n
//     let regex = regex.unwrap();
//     assert!(!regex.is_match(r#"s\N{LATIN SMALL LIGATURE ST}"#));
// }

// #[test]
// fn test_p1647() {
//     let regex = Regex::xpath(r#"/sst/ui"#, "");
//     // n
//     let regex = regex.unwrap();
//     assert!(!regex.is_match(r#"s\N{LATIN SMALL LIGATURE LONG S T}"#));
// }

// #[test]
// fn test_p1684() {
//     let regex = Regex::xpath(r#"^(foo|)bar$"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"bar"#));
// }

// #[test]
// fn test_p1685() {
//     let regex = Regex::xpath(r#"^(foo||baz)bar$"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"bar"#));
// }

// #[test]
// fn test_p1686() {
//     let regex = Regex::xpath(r#"^(foo||baz)bar$"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"bazbar"#));
// }

// #[test]
// fn test_p1687() {
//     let regex = Regex::xpath(r#"^(foo||baz)bar$"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"foobar"#));
// }

// #[test]
// fn test_p1689() {
//     let regex = Regex::xpath(r#"^(?:foo|)bar$"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"bar"#));
// }

// #[test]
// fn test_p1690() {
//     let regex = Regex::xpath(r#"^(?:foo||baz)bar$"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"bar"#));
// }

// #[test]
// fn test_p1691() {
//     let regex = Regex::xpath(r#"^(?:foo||baz)bar$"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"bazbar"#));
// }

// #[test]
// fn test_p1692() {
//     let regex = Regex::xpath(r#"^(?:foo||baz)bar$"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"foobar"#));
// }

// #[test]
// fn test_p1701() {
//     let regex = Regex::xpath(r#"^(.)(?:(..)|B)[CX]"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"ABCDE"#));
// }

// #[test]
// fn test_p1703() {
//     let regex = Regex::xpath(r#"^(.)(?:BC(.)|B)[CX]"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"ABCDE"#));
// }

// #[test]
// fn test_p1705() {
//     let regex = Regex::xpath(r#"^(.)(?:(.)+)*[BX]"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"ABCDE"#));
// }

// #[test]
// fn test_p1707() {
//     let regex = Regex::xpath(r#"^(.)(BC)*"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"ABCDE"#));
// }

// #[test]
// fn test_p1708() {
//     let regex = Regex::xpath(r#"^(.)(BC)*[BX]"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"ABCDE"#));
// }

// #[test]
// fn test_p1710() {
//     let regex = Regex::xpath(r#"^(.)(B)*.[DX]"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"ABCDE"#));
// }

// #[test]
// fn test_p1711() {
//     let regex = Regex::xpath(r#"^(.)(B)*.[CX]"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"ABCDE"#));
// }

// #[test]
// fn test_p1739() {
//     let regex = Regex::xpath(r#"^(?:(X)?(\d)|(X)?(\d\d))$"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"X12"#));
// }

// #[test]
// fn test_p1740() {
//     let regex = Regex::xpath(r#"^(?:(XX)?(\d)|(XX)?(\d\d))$"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"XX12"#));
// }

// #[test]
// fn test_p1745() {
//     let regex = Regex::xpath(r#"( [^z] $ [^z]+)"#, "xm");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(
//         r#"as
// bb
// cc
// "#
//     ));
// }

// #[test]
// fn test_p1753() {
//     let regex = Regex::xpath(r#"[^\n]+"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"\nb"#));
// }

// #[test]
// fn test_p1754() {
//     let regex = Regex::xpath(r#"[^\n]+"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"a\n"#));
// }

// #[test]
// fn test_p1760() {
//     let regex = Regex::xpath(r#"\w"#, "");
//     // n
//     let regex = regex.unwrap();
//     assert!(!regex.is_match(r#"‌"#));
// }

// #[test]
// fn test_p1761() {
//     let regex = Regex::xpath(r#"\W"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"‌"#));
// }

// #[test]
// fn test_p1762() {
//     let regex = Regex::xpath(r#"\w"#, "");
//     // n
//     let regex = regex.unwrap();
//     assert!(!regex.is_match(r#"‍"#));
// }

// #[test]
// fn test_p1763() {
//     let regex = Regex::xpath(r#"\W"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"‍"#));
// }

// #[test]
// fn test_p1774() {
//     let regex = Regex::xpath(r#"/^\D{11}/a"#, "");
//     // n
//     let regex = regex.unwrap();
//     assert!(!regex.is_match(r#"\x{10FFFF}\x{10FFFF}\x{10FFFF}\x{10FFFF}\x{10FFFF}\x{10FFFF}\x{10FFFF}\x{10FFFF}\x{10FFFF}\x{10FFFF}"#));
// }

// #[test]
// fn test_p1775() {
//     let regex = Regex::xpath(r#"/^\S{11}/a"#, "");
//     // n
//     let regex = regex.unwrap();
//     assert!(!regex.is_match(r#"\x{10FFFF}\x{10FFFF}\x{10FFFF}\x{10FFFF}\x{10FFFF}\x{10FFFF}\x{10FFFF}\x{10FFFF}\x{10FFFF}\x{10FFFF}"#));
// }

// #[test]
// fn test_p1776() {
//     let regex = Regex::xpath(r#"/^\W{11}/a"#, "");
//     // n
//     let regex = regex.unwrap();
//     assert!(!regex.is_match(r#"\x{10FFFF}\x{10FFFF}\x{10FFFF}\x{10FFFF}\x{10FFFF}\x{10FFFF}\x{10FFFF}\x{10FFFF}\x{10FFFF}\x{10FFFF}"#));
// }

// #[test]
// fn test_p1785() {
//     let regex = Regex::xpath(r#"m?^xy\?$?"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"xy?"#));
// }

// #[test]
// fn test_p1790() {
//     let regex = Regex::xpath(r#"\s?\s"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"	"#));
// }

// #[test]
// fn test_p1791() {
//     let regex = Regex::xpath(r#"\s?\d"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"3"#));
// }

// #[test]
// fn test_p1792() {
//     let regex = Regex::xpath(r#"\s?\S"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"A"#));
// }

// #[test]
// fn test_p1799() {
//     let regex = Regex::xpath(r#"(a|(bc)){0,0}?xyz"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"xyz"#));
// }

// #[test]
// fn test_p1800() {
//     let regex = Regex::xpath(r#"( a | ( bc ) ) {0,0} ? xyz"#, "x");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"xyz"#));
// }

// #[test]
// fn test_p1803() {
//     let regex = Regex::xpath(r#"(( a | ( bc ) ) {0,0} )+ xyz"#, "x");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"xyz"#));
// }

// #[test]
// fn test_p1820() {
//     let regex = Regex::xpath(r#"[#]"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"a#b"#));
// }

// #[test]
// fn test_p1821() {
//     let regex = Regex::xpath(r#"[#]b"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"a#b"#));
// }

// #[test]
// fn test_p1822() {
//     let regex = Regex::xpath(r#"[#]"#, "x");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"a#b"#));
// }

// #[test]
// fn test_p1823() {
//     let regex = Regex::xpath(r#"[#]b"#, "x");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"a#b"#));
// }

// #[test]
// fn test_p1848() {
//     let regex = Regex::xpath(r#"^\S+="#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"Σ=Π"#));
// }

// #[test]
// fn test_p1854() {
//     let regex = Regex::xpath(r#"^x?abc?de"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"abcde"#));
// }

// #[test]
// fn test_p1860() {
//     let regex = Regex::xpath(r#"/^[+]([^(]+)$/mi"#, "");
//     // n
//     let regex = regex.unwrap();
//     assert!(!regex.is_match(r#"li"#));
// }

// #[test]
// fn test_p1878() {
//     let regex = Regex::xpath(r#"(a)(b)(c)(d)(e)(f)(g)(h)(i)\10"#, "");
//     // n
//     let regex = regex.unwrap();
//     assert!(!regex.is_match(r#"abcdefghi\10"#));
// }

// #[test]
// fn test_p1879() {
//     let regex = Regex::xpath(r#"(a)(b)(c)(d)(e)(f)(g)(h)(i)(j)\11"#, "");
//     // n
//     let regex = regex.unwrap();
//     assert!(!regex.is_match(r#"abcdefghij\11"#));
// }

// #[test]
// fn test_p1880() {
//     let regex = Regex::xpath(r#"(a)(b)(c)(d)(e)(f)(g)(h)(i)(j)(k)\12"#, "");
//     // n
//     let regex = regex.unwrap();
//     assert!(!regex.is_match(r#"abcdefghijk\12"#));
// }

// #[test]
// fn test_p1881() {
//     let regex = Regex::xpath(r#"(a)(b)(c)(d)(e)(f)(g)(h)(i)(j)(k)\12\13\14"#, "");
//     // n
//     let regex = regex.unwrap();
//     assert!(!regex.is_match(r#"abcdefghijk\12\13\14"#));
// }

// #[test]
// fn test_p1883() {
//     let regex = Regex::xpath(r#"\d<(.*?)>"#, "");
//     // n
//     let regex = regex.unwrap();
//     assert!(!regex.is_match(r#"a<>"#));
// }

// #[test]
// fn test_p1884() {
//     let regex = Regex::xpath(r#"[bcd].{2,3}aaaa"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"XbXaaaaa"#));
// }

// #[test]
// fn test_p1885() {
//     let regex = Regex::xpath(r#"[bcd].{2,3}aaaa"#, "");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"XbĀaaaaa"#));
// }

// #[test]
// fn test_p1887() {
//     let regex = Regex::xpath(r#"(alias|status)es$"#, "i");
//     // y
//     let regex = regex.unwrap();
//     assert!(regex.is_match(r#"Statuses"#));
// }
